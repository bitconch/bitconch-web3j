{"version":3,"file":"index.cjs.js","sources":["../src/pubkey.js","../src/bus-account.js","../src/timing.js","../src/typelayout.js","../src/util/shortvec-encoding.js","../src/transaction-controller.js","../src/util/sleep.js","../src/connection.js","../src/util/send-and-confm-tx.js","../src/system-controller.js","../src/controller-loader.js","../src/bpfcontroller-loader.js","../src/budget-controller.js","../src/nativecontroller-loader.js","../src/token-controller.js","../src/util/send-and-confm-original-tx.js","../src/util/testnet.js"],"sourcesContent":["// @flow\n\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\n\nexport class PubKey {\n  _bn: BN;\n\n  constructor(value: number | string | Buffer | Array<number>) {\n    if (typeof value === 'string') {\n      if (value.startsWith('0x')) {\n        this._bn = new BN(value.substring(2), 16);\n      } else {\n        this._bn = new BN(bs58.decode(value));\n      }\n    } else {\n      this._bn = new BN(value);\n    }\n\n    if (this._bn.byteLength() > 32) {\n      throw new Error(`Invalid public key input`);\n    }\n  }\n\n  static isPubKey(o: Object): boolean {\n    return o instanceof PubKey;\n  }\n\n  equals(pubKey: PubKey): boolean {\n    return this._bn.eq(pubKey._bn);\n  }\n\n\n  toBase58(): string {\n    return bs58.encode(this.toBuffer());\n  }\n\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  toString(): string {\n    return this.toBase58();\n  }\n}\n","// @flow\nimport nacl from 'tweetnacl';\nimport type {KeyPair} from 'tweetnacl';\n\nimport {PubKey} from './pubkey';\n\n/**\n * \n */\nexport class BusAccount {\n  _keypair: KeyPair;\n\n  /**\n   * \n   *\n   * \n   * \n   *\n   * @param secretKey \n   */\n  constructor(secretKey: ?Buffer = null) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * \n   */\n  get pubKey(): PubKey {\n    return new PubKey(this._keypair.publicKey);\n  }\n\n  /**\n   * \n   */\n  get privateKey(): Buffer {\n    return this._keypair.secretKey;\n  }\n}\n","// @flow\n\nexport const NUM_TICKS_PER_SECOND = 10;\nexport const DEFAULT_TICKS_PER_ROUND = 8;\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\n\nexport const pubKey = (property: string = 'pubKey'): Object => {\n  return BufferLayout.blob(32, property);\n};\n\n\nexport const uint64 = (property: string = 'uint64'): Object => {\n  return BufferLayout.blob(8, property);\n};\n\n\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer, offset) => {\n    const data = _decode(buffer, offset);\n    return data.chars.toString('utf8');\n  };\n\n  rsl.encode = (str, buffer, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  return rsl;\n};\n","// @flow\n\nexport function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","// @flow\n\nimport invariant from 'assert';\nimport * as BufferLayout from 'buffer-layout';\nimport nacl from 'tweetnacl';\nimport bs58 from 'bs58';\n\nimport * as Layout from './typelayout';\nimport {PubKey} from './pubkey';\nimport {BusAccount} from './bus-account';\nimport * as shortvec from './util/shortvec-encoding';\nimport type {Blockhash} from './bus-blockhash';\n\n/**\n * @typedef {string} TxnSignature\n */\nexport type TxnSignature = string;\n\n/**\n */\nexport const PACKET_DATA_SIZE = 512;\n\n/**\n *\n * @typedef {Object} TransactionInstructionCtorFields\n * @property {?Array<PubKey>} keys\n * @property {?PubKey} controllerId\n * @property {?Buffer} data\n */\ntype TxnInstructionControlFields = {|\n  keys?: Array<{pubkey: PubKey, isSigner: boolean}>,\n  controllerId?: PubKey,\n  data?: Buffer,\n|};\n\n/**\n */\nexport class TxOperation {\n  /**\n   */\n  keys: Array<{pubkey: PubKey, isSigner: boolean}> = [];\n\n  /**\n   */\n  controllerId: PubKey;\n\n  /**\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts?: TxnInstructionControlFields) {\n    opts && Object.assign(this, opts);\n  }\n}\n\n/**\n * @private\n */\ntype SignaturePubkeyPair = {|\n  signature: Buffer | null,\n  pubKey: PubKey,\n|};\n\n/**\n *\n * @typedef {Object} TxnControlFields\n * @property (?recentBlockhash} \n * @property (?signatures} \n *\n */\ntype TxnControlFields = {|\n  recentBlockhash?: Blockhash,\n  signatures?: Array<SignaturePubkeyPair>,\n|};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   */\n  instructions: Array<TxOperation> = [];\n\n  /**\n   */\n  recentBlockhash: ?Blockhash;\n\n  /**\n   */\n  constructor(opts?: TxnControlFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   */\n  add(\n    ...items: Array<Transaction | TxnInstructionControlFields>\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach(item => {\n      if (item instanceof Transaction) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else {\n        this.instructions.push(new TxOperation(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * @private\n   */\n  _fetchSignData(): Buffer {\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      throw new Error('No instructions provided');\n    }\n\n    const keys = this.signatures.map(({pubKey}) => pubKey.toString());\n    let numRequiredSignatures = 0;\n\n    const controllerIds = [];\n    this.instructions.forEach(instruction => {\n      const controllerId = instruction.controllerId.toString();\n      if (!controllerIds.includes(controllerId)) {\n        controllerIds.push(controllerId);\n      }\n\n      instruction.keys.forEach(keySignerPair => {\n        const keyStr = keySignerPair.pubkey.toString();\n        if (!keys.includes(keyStr)) {\n          if (keySignerPair.isSigner) {\n            numRequiredSignatures += 1;\n          }\n          keys.push(keyStr);\n        }\n      });\n    });\n\n    if (numRequiredSignatures > this.signatures.length) {\n      throw new Error(\n        `Insufficent signatures: expected ${numRequiredSignatures} but got ${\n          this.signatures.length\n        }`,\n      );\n    }\n\n    let keyCount = [];\n    shortvec.encodeLength(keyCount, keys.length);\n\n    let controllerIdCount = [];\n    shortvec.encodeLength(controllerIdCount, controllerIds.length);\n\n    const instructions = this.instructions.map(instruction => {\n      const {data, controllerId} = instruction;\n      let keyIndicesCount = [];\n      shortvec.encodeLength(keyIndicesCount, instruction.keys.length);\n      let dataCount = [];\n      shortvec.encodeLength(dataCount, instruction.data.length);\n      return {\n        controllerIdIndex: controllerIds.indexOf(controllerId.toString()),\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(\n          instruction.keys.map(keyObj =>\n            keys.indexOf(keyObj.pubkey.toString()),\n          ),\n        ),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    instructions.forEach(instruction => {\n      invariant(instruction.controllerIdIndex >= 0);\n      instruction.keyIndices.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    let instructionCount = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('controllerIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.pubKey('key'), keys.length, 'keys'),\n      Layout.pubKey('recentBlockhash'),\n\n      BufferLayout.blob(controllerIdCount.length, 'controllerIdCount'),\n      BufferLayout.seq(\n        Layout.pubKey('controllerId'),\n        controllerIds.length,\n        'controllerIds',\n      ),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.signatures.length]),\n      keyCount: Buffer.from(keyCount),\n      keys: keys.map(key => new PubKey(key).toBuffer()),\n      recentBlockhash: Buffer.from(bs58.decode(recentBlockhash)),\n      controllerIdCount: Buffer.from(controllerIdCount),\n      controllerIds: controllerIds.map(controllerId =>\n        new PubKey(controllerId).toBuffer(),\n      ),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    signData = signData.slice(0, length + instructionBuffer.length);\n\n    return signData;\n  }\n\n  sign(...signers: Array<BusAccount>) {\n    this.signPartial(...signers);\n  }\n\n  signPartial(...partialSigners: Array<PubKey | BusAccount>) {\n    if (partialSigners.length === 0) {\n      throw new Error('No signers');\n    }\n    const signatures: Array<SignaturePubkeyPair> = partialSigners.map(\n      accountOrPubKey => {\n        const pubKey =\n          accountOrPubKey instanceof BusAccount\n            ? accountOrPubKey.pubKey\n            : accountOrPubKey;\n        return {\n          signature: null,\n          pubKey,\n        };\n      },\n    );\n    this.signatures = signatures;\n    const signData = this._fetchSignData();\n\n    partialSigners.forEach((accountOrPubKey, index) => {\n      if (accountOrPubKey instanceof PubKey) {\n        return;\n      }\n      const signature = nacl.sign.detached(\n        signData,\n        accountOrPubKey.privateKey,\n      );\n      invariant(signature.length === 64);\n      signatures[index].signature = Buffer.from(signature);\n    });\n  }\n\n  addSigner(signer: BusAccount) {\n    const index = this.signatures.findIndex(sigpair =>\n      signer.pubKey.equals(sigpair.pubKey),\n    );\n    if (index < 0) {\n      throw new Error(`Unknown signer: ${signer.pubKey.toString()}`);\n    }\n\n    const signData = this._fetchSignData();\n    const signature = nacl.sign.detached(signData, signer.privateKey);\n    invariant(signature.length === 64);\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  serialize(): Buffer {\n    const {signatures} = this;\n    if (!signatures) {\n      throw new Error('Transaction has not been signed');\n    }\n\n    const signData = this._fetchSignData();\n    const signatureCount = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      invariant(signature !== null, `null signature`);\n      invariant(signature.length === 64, `signature has invalid length`);\n      Buffer.from(signature).copy(\n        wireTransaction,\n        signatureCount.length + index * 64,\n      );\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * @private\n   */\n  get keys(): Array<PubKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * @private\n   */\n  get controllerId(): PubKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].controllerId;\n  }\n\n  /**\n   * @private\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   */\n  static from(buffer: Buffer): Transaction {\n    const PUBKEY_LENGTH = 32;\n    const SIGNATURE_LENGTH = 64;\n\n    let transaction = new Transaction();\n\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(signature);\n    }\n\n    byteArray = byteArray.slice(1); \n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accounts = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accounts.push(account);\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const controllerIdCount = shortvec.decodeLength(byteArray);\n    let programs = [];\n    for (let i = 0; i < controllerIdCount; i++) {\n      const program = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      programs.push(program);\n    }\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      let instruction = {};\n      instruction.programIndex = byteArray.shift();\n      const accountIndexCount = shortvec.decodeLength(byteArray);\n      instruction.accountIndex = byteArray.slice(0, accountIndexCount);\n      byteArray = byteArray.slice(accountIndexCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      instruction.data = byteArray.slice(0, dataLength);\n      byteArray = byteArray.slice(dataLength);\n      instructions.push(instruction);\n    }\n\n    transaction.recentBlockhash = new PubKey(recentBlockhash).toBase58();\n    for (let i = 0; i < signatureCount; i++) {\n      const sigPubkeyPair = {\n        signature: Buffer.from(signatures[i]),\n        pubKey: new PubKey(accounts[i]),\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    }\n    for (let i = 0; i < instructionCount; i++) {\n      let instructionData = {\n        keys: [],\n        controllerId: new PubKey(programs[instructions[i].programIndex]),\n        data: Buffer.from(instructions[i].data),\n      };\n      for (let j = 0; j < instructions[i].accountIndex.length; j++) {\n        const pubkey = new PubKey(accounts[instructions[i].accountIndex[j]]);\n        instructionData.keys.push({\n          pubkey,\n          isSigner: transaction.signatures.some(\n            keyObj => keyObj.pubKey.toString() === pubkey.toString(),\n          ),\n        });\n      }\n      let instruction = new TxOperation(instructionData);\n      transaction.instructions.push(instruction);\n    }\n    return transaction;\n  }\n}\n","// @flow\n\n// \nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","// @flow\n\nimport assert from 'assert';\nimport {parse as urlParse, format as urlFormat} from 'url';\nimport fetch from 'node-fetch';\nimport jayson from 'jayson/lib/client/browser';\nimport {struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\n\nimport {DEFAULT_TICKS_PER_ROUND, NUM_TICKS_PER_SECOND} from './timing';\nimport {PubKey} from './pubkey';\nimport {Transaction} from './transaction-controller';\nimport {sleep} from './util/sleep';\nimport type {Blockhash} from './bus-blockhash';\nimport type {BusAccount} from './bus-account';\nimport type {TxnSignature} from './transaction-controller';\n\ntype RpcReq = (methodName: string, args: Array<any>) => any;\n\n/**\n * \n *\n * @typedef {Object} NodeInfo\n * @property {string} id \n * @property {string} gossip \n * @property {string} tpu \n * @property {string|null} rpc \n */\ntype NodeInfo = {\n  id: string,\n  gossip: string,\n  tpu: string | null,\n  rpc: string | null,\n};\n\nfunction createRpcReq(url): RpcReq {\n  const server = jayson(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    try {\n      const res = await fetch(url, options);\n      const text = await res.text();\n      callback(null, text);\n    } catch (err) {\n      callback(err);\n    }\n  });\n\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      server.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * \n */\nconst FetchBalanceRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: 'number?',\n});\n\n/**\n * @private\n */\nfunction jsonRpcResult(resultDescription: any) {\n  const jsonRpcVersion = struct.literal('2.0');\n  return struct.union([\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'any',\n    }),\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'null?',\n      result: resultDescription,\n    }),\n  ]);\n}\n\n/**\n * @private\n */\nconst AccountDetailResult = struct({\n  executable: 'boolean',\n  owner: 'array',\n  // lamports: 'number',\n  dif: 'number',\n  data: 'array',\n});\n\n/**\n *\n */\nconst FetchAccountDetailRpcResult = jsonRpcResult(AccountDetailResult);\n\n/***\n * \n */\nconst AccountNoticeResult = struct({\n  subscription: 'number',\n  result: AccountDetailResult,\n});\n\n/**\n * @private\n */\nconst ControllerAccountDetailResult = struct(['string', AccountDetailResult]);\n\n/***\n * \n */\nconst ControllerAccountNoticeResult = struct({\n  subscription: 'number',\n  result: ControllerAccountDetailResult,\n});\n\n/**\n * \n */\nconst ConfmTxnRpcResult = jsonRpcResult('boolean');\n\n/**\n *\n */\nconst FetchRoundLeader = jsonRpcResult('string');\n\n/**\n * \n */\nconst FetchClusterNodes = jsonRpcResult(\n  struct.list([\n    struct({\n      id: 'string',\n      gossip: 'string',\n      tpu: struct.union(['null', 'string']),\n      rpc: struct.union(['null', 'string']),\n    }),\n  ]),\n);\n\n/**\n * \n */\nconst FetchSignatureStateRpcResult = jsonRpcResult(\n  struct.union([\n    'null',\n    struct.union([struct({Ok: 'null'}), struct({Err: 'object'})]),\n  ]),\n);\n\n/**\n *\n */\nconst FetchTxnAmountRpcResult = jsonRpcResult('number');\n\n/**\n * \n */\nconst FetchRecentBlockhash = jsonRpcResult('string');\n\n/**\n * \n */\nconst ReqDroneRpcResult = jsonRpcResult('string');\n\n/**\n * \n */\nconst SendTxnRpcResult = jsonRpcResult('string');\n\n/**\n * Information describing an account\n *\n * @typedef {Object} AccountDetail\n//  * @property {number} lamports \n * @property {number} dif \n * @property {PubKey} owner\n * @property {?Buffer} data \n * @property {boolean} executable \n */\ntype AccountDetail = {\n  executable: boolean,\n  owner: PubKey,\n  // lamports: number,\n  dif: number,\n  data: Buffer,\n};\n\n/**\n * \n *\n * @typedef {Object} KeyedAccountDetail\n * @property {PubKey} accountId\n * @property {AccountDetail} AccountDetail\n */\ntype KeyedAccountDetail = {\n  accountId: PubKey,\n  accountDetail: AccountDetail,\n};\n\n/**\n * \n */\nexport type AccountChangeCallback = (accountInfo: AccountDetail) => void;\n\n/**\n * @private\n */\ntype AccountSubscriptionDetail = {\n  pubKey: string,\n  callback: AccountChangeCallback,\n  subscriptionId: null | number,\n};\n\n/**\n * \n */\nexport type ControllerAccountChangeCallback = (\n  keyedAccountDetail: KeyedAccountDetail,\n) => void;\n\n/**\n * @private\n */\ntype ControllerAccountSubscriptionDetail = {\n  controllerId: string, \n  callback: ControllerAccountChangeCallback,\n  subscriptionId: null | number, \n};\n\n/**\n * \n *\n * @typedef {Object} SignaturePass\n */\nexport type SignaturePass = {|\n  Ok: null,\n|};\n\n/**\n *\n *\n * @typedef {Object} TxnErr\n */\nexport type TxnErr = {|\n  Err: Object,\n|};\n\n/**\n * \n */\nexport class Connection {\n  _rpcReq: RpcReq;\n  _rpcWebSocket: RpcWebSocketClient;\n  _rpcWebSocketConnected: boolean = false;\n\n  _blockhashInfo: {\n    recentBlockhash: Blockhash | null,\n    seconds: number,\n    transactionSignatures: Array<string>,\n  };\n  _disableBlockhashCaching: boolean = false;\n  _accountChangeSubscriptions: {[number]: AccountSubscriptionDetail} = {};\n  _accountChangeSubscriptionCounter: number = 0;\n  _controllerAccountChangeSubscriptions: {\n    [number]: ControllerAccountSubscriptionDetail,\n  } = {};\n  _controllerAccountChangeSubscriptionCounter: number = 0;\n\n  /**\n   * \n   *\n   * \n   */\n  constructor(endpoint: string) {\n    let url = urlParse(endpoint);\n\n    this._rpcReq = createRpcReq(url.href);\n    this._blockhashInfo = {\n      recentBlockhash: null,\n      seconds: -1,\n      transactionSignatures: [],\n    };\n\n    url.protocol = url.protocol === 'https:' ? 'wss:' : 'ws:';\n    url.host = '';\n    url.port = String(Number(url.port) + 1);\n    if (url.port === '1') {\n      url.port = url.protocol === 'wss:' ? '8901' : '8900';\n    }\n    this._rpcWebSocket = new RpcWebSocketClient(urlFormat(url), {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnErr.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotice',\n      this._wsOnAccountNotice.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'controllerNotification',\n      this._wsOnControllerAccountNotice.bind(this),\n    );\n  }\n\n  /**\n   * \n   */\n  async fetchAccountBalance(pubKey: PubKey): Promise<number> {\n    const unsafeRes = await this._rpcReq('getDif', [\n      pubKey.toBase58(),\n    ]);\n    const res = FetchBalanceRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   *\n   */\n  async fetchAccountDetail(pubKey: PubKey): Promise<AccountDetail> {\n    const unsafeRes = await this._rpcReq('getAccountInfo', [\n      pubKey.toBase58(),\n    ]);\n    const res = FetchAccountDetailRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n\n    const {result} = res;\n    assert(typeof result !== 'undefined');\n\n    return {\n      executable: result.executable,\n      owner: new PubKey(result.owner),\n      dif: result.dif,\n      data: Buffer.from(result.data),\n    };\n  }\n\n  /**\n   * \n   */\n  async confmTxn(signature: TxnSignature): Promise<boolean> {\n    const unsafeRes = await this._rpcReq('confirmTxn', [signature]);\n    const res = ConfmTxnRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * \n   */\n  async fetchRoundLeader(): Promise<string> {\n    const unsafeRes = await this._rpcReq('getRoundLeader', []);\n    const res = FetchRoundLeader(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * \n   */\n  async fetchClusterNodes(): Promise<Array<NodeInfo>> {\n    const unsafeRes = await this._rpcReq('getClusterNodes', []);\n    const res = FetchClusterNodes(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * \n   */\n  async fetchSignatureState(\n    signature: TxnSignature,\n  ): Promise<SignaturePass | TxnErr | null> {\n    const unsafeRes = await this._rpcReq('getSignatureState', [signature]);\n    const res = FetchSignatureStateRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * \n   */\n  async fetchTxnAmount(): Promise<number> {\n    const unsafeRes = await this._rpcReq('getTxnCnt', []);\n    const res = FetchTxnAmountRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * \n   */\n  async fetchRecentBlockhash(): Promise<Blockhash> {\n    const unsafeRes = await this._rpcReq('getLatestBlockhash', []);\n    const res = FetchRecentBlockhash(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * \n   */\n  async reqDrone(\n    to: PubKey,\n    amount: number,\n  ): Promise<TxnSignature> {\n    const unsafeRes = await this._rpcReq('requestDif', [\n      to.toBase58(),\n      amount,\n    ]);\n    const res = ReqDroneRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * \n   */\n  async sendTxn(\n    transaction: Transaction,\n    ...signers: Array<BusAccount>\n  ): Promise<TxnSignature> {\n    for (;;) {\n      const seconds = new Date().getSeconds();\n      if (\n        this._blockhashInfo.recentBlockhash != null &&\n        this._blockhashInfo.seconds < seconds + 30\n      ) {\n        transaction.recentBlockhash = this._blockhashInfo.recentBlockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); \n        }\n\n        const signature = transaction.signature.toString();\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          this._blockhashInfo.transactionSignatures.push(signature);\n          if (this._disableBlockhashCaching) {\n            this._blockhashInfo.seconds = -1;\n          }\n          break;\n        }\n      }\n\n      let attempts = 0;\n      const startTime = Date.now();\n      for (;;) {\n        const recentBlockhash = await this.fetchRecentBlockhash();\n\n        if (this._blockhashInfo.recentBlockhash != recentBlockhash) {\n          this._blockhashInfo = {\n            recentBlockhash,\n            seconds: new Date().getSeconds(),\n            transactionSignatures: [],\n          };\n          break;\n        }\n        if (attempts === 50) {\n          throw new Error(\n            `Unable to obtain a new blockhash after ${Date.now() -\n              startTime}ms`,\n          );\n        }\n\n        await sleep((500 * DEFAULT_TICKS_PER_ROUND) / NUM_TICKS_PER_SECOND);\n\n        ++attempts;\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendOriginalTx(wireTransaction);\n  }\n\n  /**\n   * @private\n   */\n  async fullnodeExit(): Promise<boolean> {\n    const unsafeRes = await this._rpcReq('fullnodeQuit', []);\n    const res = jsonRpcResult('boolean')(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  async sendOriginalTx(\n    rawTransaction: Buffer,\n  ): Promise<TxnSignature> {\n    const unsafeRes = await this._rpcReq('sendTxn', [\n      [...rawTransaction],\n    ]);\n    const res = SendTxnRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    assert(res.result);\n    return res.result;\n  }\n\n  /**\n   * @private\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @private\n   */\n  _wsOnErr(err: Error) {\n    console.log('ws error:', err.message);\n  }\n\n  /**\n   * @private\n   */\n  _wsOnClose(code: number, message: string) {\n    if (code !== 1000) {\n      console.log('ws close:', code, message);\n    }\n    this._rpcWebSocketConnected = false;\n  }\n\n  /**\n   * @private\n   */\n  async _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const controllerKeys = Object.keys(\n      this._controllerAccountChangeSubscriptions,\n    ).map(Number);\n    if (accountKeys.length === 0 && controllerKeys.length === 0) {\n      this._rpcWebSocket.close();\n      return;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      for (let id of accountKeys) {\n        this._accountChangeSubscriptions[id].subscriptionId = null;\n      }\n      for (let id of controllerKeys) {\n        this._controllerAccountChangeSubscriptions[id].subscriptionId = null;\n      }\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const {subscriptionId, pubKey} = this._accountChangeSubscriptions[id];\n      if (subscriptionId === null) {\n        try {\n          this._accountChangeSubscriptions[\n            id\n          ].subscriptionId = await this._rpcWebSocket.call('accountSubscribe', [\n            pubKey,\n          ]);\n        } catch (err) {\n          console.log(\n            `accountSubscribe error for ${pubKey}: ${err.message}`,\n          );\n        }\n      }\n    }\n    for (let id of controllerKeys) {\n      const {\n        subscriptionId,\n        controllerId,\n      } = this._controllerAccountChangeSubscriptions[id];\n      if (subscriptionId === null) {\n        try {\n          this._controllerAccountChangeSubscriptions[\n            id\n          ].subscriptionId = await this._rpcWebSocket.call('controllerSubscribe', [\n            controllerId,\n          ]);\n        } catch (err) {\n          console.log(\n            `programSubscribe error for ${controllerId}: ${err.message}`,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnAccountNotice(notification: Object) {\n    const res = AccountNoticeResult(notification);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n\n    const keys = Object.keys(this._accountChangeSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._accountChangeSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        const {result} = res;\n        assert(typeof result !== 'undefined');\n\n        sub.callback({\n          executable: result.executable,\n          owner: new PubKey(result.owner),\n          dif: result.dif,\n          data: Buffer.from(result.data),\n        });\n        return true;\n      }\n    }\n  }\n\n  onAccountChange(\n    pubKey: PubKey,\n    callback: AccountChangeCallback,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      pubKey: pubKey.toBase58(),\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  async removeListenerOfAccountChange(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const {subscriptionId} = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      if (subscriptionId !== null) {\n        try {\n          await this._rpcWebSocket.call('accountUnsubscribe', [subscriptionId]);\n        } catch (err) {\n          console.log('accountUnsubscribe error:', err.message);\n        }\n      }\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`); \n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnControllerAccountNotice(notification: Object) {\n    const res = ControllerAccountNoticeResult(notification);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n\n    const keys = Object.keys(this._controllerAccountChangeSubscriptions).map(\n      Number,\n    );\n    for (let id of keys) {\n      const sub = this._controllerAccountChangeSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        const {result} = res;\n        assert(typeof result !== 'undefined');\n\n        sub.callback({\n          accountId: result[0],\n          accountDetail: {\n            executable: result[1].executable,\n            owner: new PubKey(result[1].owner),\n            dif: result[1].dif,\n            data: Buffer.from(result[1].data),\n          },\n        });\n        return true;\n      }\n    }\n  }\n\n  onControllerAccountChange(\n    controllerId: PubKey,\n    callback: ControllerAccountChangeCallback,\n  ): number {\n    const id = ++this._controllerAccountChangeSubscriptionCounter;\n    this._controllerAccountChangeSubscriptions[id] = {\n      controllerId: controllerId.toBase58(),\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  async removeControllerAccountChangeListener(id: number): Promise<void> {\n    if (this._controllerAccountChangeSubscriptions[id]) {\n      const {subscriptionId} = this._controllerAccountChangeSubscriptions[id];\n      delete this._controllerAccountChangeSubscriptions[id];\n      if (subscriptionId !== null) {\n        try {\n          await this._rpcWebSocket.call('controllerUnsubscribe', [subscriptionId]);\n        } catch (err) {\n          console.log('controllerUnsubscribe error:', err.message);\n        }\n      }\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n}\n","// @flow\n\nimport invariant from 'assert';\n\nimport {Connection} from '../connection';\nimport {Transaction} from '../transaction-controller';\nimport {sleep} from './sleep';\nimport type {BusAccount} from '../bus-account';\nimport type {TxnSignature} from '../transaction-controller';\nimport {DEFAULT_TICKS_PER_ROUND, NUM_TICKS_PER_SECOND} from '../timing';\n\n/**\n * \n */\nexport async function sendAndConfmTxn(\n  connection: Connection,\n  transaction: Transaction,\n  ...signers: Array<BusAccount>\n): Promise<TxnSignature> {\n  let sendRetries = 10;\n  let signature;\n  for (;;) {\n    const start = Date.now();\n    signature = await connection.sendTxn(transaction, ...signers);\n\n    // \n    let status = null;\n    let statusRetries = 6;\n    for (;;) {\n      status = await connection.fetchSignatureState(signature);\n      if (status) {\n        break;\n      }\n\n      if (--statusRetries <= 0) {\n        break;\n      }\n      // \n      await sleep((500 * DEFAULT_TICKS_PER_ROUND) / NUM_TICKS_PER_SECOND);\n    }\n\n    if (status && 'Ok' in status) {\n      break;\n    }\n    if (--sendRetries <= 0) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction '${signature}' was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds (${JSON.stringify(status)})`,\n      );\n    }\n\n    if (status && status.Err && !('AccountInUse' in status.Err)) {\n      throw new Error(\n        `Transaction ${signature} failed (${JSON.stringify(status)})`,\n      );\n    }\n\n    // \n    await sleep(Math.random() * 100);\n  }\n\n  invariant(signature !== undefined);\n  return signature;\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {Transaction} from './transaction-controller';\nimport {PubKey} from './pubkey';\nimport * as Layout from './typelayout';\n\n\nexport class SystemController {\n\n  static get controllerId(): PubKey {\n    return new PubKey(\n      '0x000000000000000000000000000000000000000000000000000000000000000',\n    );\n  }\n\n  static createNewAccount(\n    from: PubKey,\n    newAccount: PubKey,\n    dif: number,\n    space: number,\n    controllerId: PubKey,\n  ): Transaction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('dif'),\n      BufferLayout.ns64('space'),\n      Layout.pubKey('controllerId'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 0, \n        dif,\n        space,\n        controllerId: controllerId.toBuffer(),\n      },\n      data,\n    );\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: from, isSigner: true},\n        {pubkey: newAccount, isSigner: false},\n      ],\n      controllerId: SystemController.controllerId,\n      data,\n    });\n  }\n\n  static transfer(from: PubKey, to: PubKey, amount: number): Transaction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('amount'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 2, \n        amount,\n      },\n      data,\n    );\n\n    return new Transaction().add({\n      keys: [{pubkey: from, isSigner: true}, {pubkey: to, isSigner: false}],\n      controllerId: SystemController.controllerId,\n      data,\n    });\n  }\n\n  static assign(from: PubKey, controllerId: PubKey): Transaction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.pubKey('controllerId'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 1,\n        controllerId: controllerId.toBuffer(),\n      },\n      data,\n    );\n\n    return new Transaction().add({\n      keys: [{pubkey: from, isSigner: true}],\n      controllerId: SystemController.controllerId,\n      data,\n    });\n  }\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {BusAccount} from './bus-account';\nimport {PubKey} from './pubkey';\nimport {NUM_TICKS_PER_SECOND} from './timing';\nimport {Transaction} from './transaction-controller';\nimport {sendAndConfmTxn} from './util/send-and-confm-tx';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport {SystemController} from './system-controller';\n\nexport class ControllerLoader {\n\n  static get chunkSize(): number {\n    return 229;\n  }\n\n \n  static async load(\n    connection: Connection,\n    payer: BusAccount,\n    controller: BusAccount,\n    controllerId: PubKey,\n    data: Array<number>,\n  ): Promise<PubKey> {\n    {\n      const transaction = SystemController.createNewAccount(\n        payer.pubKey,\n        controller.pubKey,\n        1,\n        data.length,\n        controllerId,\n      );\n      await sendAndConfmTxn(connection, transaction, payer);\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = ControllerLoader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, \n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: controller.pubKey, isSigner: true}],\n        controllerId,\n        data,\n      });\n      transactions.push(\n        sendAndConfmTxn(connection, transaction, payer, controller),\n      );\n\n      await sleep(1000 / NUM_TICKS_PER_SECOND);\n\n      if (transactions.length === 8) {\n        await Promise.all(transactions);\n        transactions = [];\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, \n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: controller.pubKey, isSigner: true}],\n        controllerId,\n        data,\n      });\n      await sendAndConfmTxn(connection, transaction, payer, controller);\n    }\n    return controller.pubKey;\n  }\n}\n","// @flow\n\nimport {BusAccount} from './bus-account';\nimport {PubKey} from './pubkey';\nimport {ControllerLoader} from './controller-loader';\nimport type {Connection} from './connection';\n\n/**\n * \n */\nexport class BpfControllerLoader {\n  /**\n   * \n   */\n  static get controllerId(): PubKey {\n    return new PubKey('BPFControllerLoader1111111111111111111111111111111111');\n  }\n\n  /**\n   * \n   *\n   * @param connection \n   * @param owner \n   * @param elfBytes \n   */\n  static load(\n    connection: Connection,\n    payer: BusAccount,\n    elf: Array<number>,\n  ): Promise<PubKey> {\n    const controller = new BusAccount();\n    return ControllerLoader.load(connection, payer, controller, BpfControllerLoader.controllerId, elf);\n  }\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {Transaction} from './transaction-controller';\nimport {PubKey} from './pubkey';\nimport * as Layout from './typelayout';\n\n/**\n * \n * \n *\n * @typedef {Object} SignatureCond\n * @property {string} type \n * @property {PubKey} from \n */\nexport type SignatureCond = {\n  type: 'signature',\n  from: PubKey,\n};\n\n/**\n * \n * \n *\n * @typedef {Object} TimestampCond\n * @property {string} type \n * @property {PubKey} from\n * @property {Date} when \n */\nexport type TimestampCond = {\n  type: 'timestamp',\n  from: PubKey,\n  when: Date,\n};\n\n/**\n * \n *\n * @typedef {Object} Payment\n * @property {number} \n * @property {PubKey} \n */\nexport type Payment = {\n  amount: number,\n  to: PubKey,\n};\n\n/**\n * \n *\n * @typedef {SignatureCond|TimestampCond} BudgetCond\n */\nexport type BudgetCond = SignatureCond | TimestampCond;\n\n/**\n * @private\n */\nfunction serializePayment(payment: Payment): Buffer {\n  const toData = payment.to.toBuffer();\n  const data = Buffer.alloc(8 + toData.length);\n  data.writeUInt32LE(payment.amount, 0);\n  toData.copy(data, 8);\n  return data;\n}\n\n/**\n * @private\n */\nfunction serializeDate(when: Date): Buffer {\n  const data = Buffer.alloc(8 + 20);\n  data.writeUInt32LE(20, 0); // \n\n  function iso(date) {\n    function pad(number) {\n      if (number < 10) {\n        return '0' + number;\n      }\n      return number;\n    }\n\n    return (\n      date.getUTCFullYear() +\n      '-' +\n      pad(date.getUTCMonth() + 1) +\n      '-' +\n      pad(date.getUTCDate()) +\n      'T' +\n      pad(date.getUTCHours()) +\n      ':' +\n      pad(date.getUTCMinutes()) +\n      ':' +\n      pad(date.getUTCSeconds()) +\n      'Z'\n    );\n  }\n  data.write(iso(when), 8);\n  return data;\n}\n\n/**\n * @private\n */\nfunction serializeCond(condition: BudgetCond) {\n  switch (condition.type) {\n    case 'timestamp': {\n      const date = serializeDate(condition.when);\n      const from = condition.from.toBuffer();\n\n      const data = Buffer.alloc(4 + date.length + from.length);\n      data.writeUInt32LE(0, 0); \n      date.copy(data, 4);\n      from.copy(data, 4 + date.length);\n      return data;\n    }\n    case 'signature': {\n      const dataLayout = BufferLayout.struct([\n        BufferLayout.u32('condition'),\n        Layout.pubKey('from'),\n      ]);\n\n      const from = condition.from.toBuffer();\n      const data = Buffer.alloc(4 + from.length);\n      dataLayout.encode(\n        {\n          instruction: 1, \n          from,\n        },\n        data,\n      );\n      return data;\n    }\n    default:\n      throw new Error(`Unknown condition type: ${condition.type}`);\n  }\n}\n\n/**\n * \n */\nexport class BudgetController {\n  /**\n   * \n   */\n  static get controllerId(): PubKey {\n    return new PubKey('Budget1111111111111111111111111111111111111');\n  }\n\n  /**\n   * \n   */\n  static get size(): number {\n    return 128;\n  }\n\n  /**\n   * \n   */\n  static datetimeCond(from: PubKey, when: Date): TimestampCond {\n    return {\n      type: 'timestamp',\n      from,\n      when,\n    };\n  }\n\n  /**\n   * \n   */\n  static signatureCond(from: PubKey): SignatureCond {\n    return {\n      type: 'signature',\n      from,\n    };\n  }\n\n  /**\n   * \n   */\n  static pay(\n    from: PubKey,\n    program: PubKey,\n    to: PubKey,\n    amount: number,\n    ...conditions: Array<BudgetCond>\n  ): Transaction {\n    const data = Buffer.alloc(1024);\n    let pos = 0;\n    data.writeUInt32LE(0, pos); \n    pos += 4;\n\n    switch (conditions.length) {\n      case 0:\n        data.writeUInt32LE(0, pos); \n        pos += 4;\n\n        {\n          const payment = serializePayment({amount, to});\n          payment.copy(data, pos);\n          pos += payment.length;\n        }\n\n        return new Transaction().add({\n          keys: [{pubkey: from, isSigner: true}, {pubkey: to, isSigner: false}],\n          controllerId: this.controllerId,\n          data: data.slice(0, pos),\n        });\n      case 1:\n        data.writeUInt32LE(1, pos); \n        pos += 4;\n        {\n          const condition = conditions[0];\n\n          const conditionData = serializeCond(condition);\n          conditionData.copy(data, pos);\n          pos += conditionData.length;\n\n          const paymentData = serializePayment({amount, to});\n          paymentData.copy(data, pos);\n          pos += paymentData.length;\n        }\n\n        return new Transaction().add({\n          keys: [\n            {pubkey: from, isSigner: true},\n            {pubkey: program, isSigner: false},\n            {pubkey: to, isSigner: false},\n          ],\n          controllerId: this.controllerId,\n          data: data.slice(0, pos),\n        });\n\n      case 2:\n        data.writeUInt32LE(2, pos);\n        pos += 4;\n\n        for (let condition of conditions) {\n          const conditionData = serializeCond(condition);\n          conditionData.copy(data, pos);\n          pos += conditionData.length;\n\n          const paymentData = serializePayment({amount, to});\n          paymentData.copy(data, pos);\n          pos += paymentData.length;\n        }\n\n        return new Transaction().add({\n          keys: [\n            {pubkey: from, isSigner: true},\n            {pubkey: program, isSigner: false},\n            {pubkey: to, isSigner: false},\n          ],\n          controllerId: this.controllerId,\n          data: data.slice(0, pos),\n        });\n\n      default:\n        throw new Error(\n          `A maximum of two conditions are support: ${\n            conditions.length\n          } provided`,\n        );\n    }\n  }\n\n  /**\n   * \n   */\n  static payOnAll(\n    from: PubKey,\n    program: PubKey,\n    to: PubKey,\n    amount: number,\n    condition1: BudgetCond,\n    condition2: BudgetCond,\n  ): Transaction {\n    const data = Buffer.alloc(1024);\n    let pos = 0;\n    data.writeUInt32LE(0, pos); \n    pos += 4;\n\n    data.writeUInt32LE(3, pos); \n    pos += 4;\n\n    for (let condition of [condition1, condition2]) {\n      const conditionData = serializeCond(condition);\n      conditionData.copy(data, pos);\n      pos += conditionData.length;\n    }\n\n    const paymentData = serializePayment({amount, to});\n    paymentData.copy(data, pos);\n    pos += paymentData.length;\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: from, isSigner: true},\n        {pubkey: program, isSigner: false},\n        {pubkey: to, isSigner: false},\n      ],\n      controllerId: this.controllerId,\n      data: data.slice(0, pos),\n    });\n  }\n\n  /**\n   * \n   * \n   */\n  static sealWithDatetime(\n    from: PubKey,\n    program: PubKey,\n    to: PubKey,\n    when: Date,\n  ): Transaction {\n    const whenData = serializeDate(when);\n    const data = Buffer.alloc(4 + whenData.length);\n\n    data.writeUInt32LE(1, 0); \n    whenData.copy(data, 4);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: from, isSigner: true},\n        {pubkey: program, isSigner: false},\n        {pubkey: to, isSigner: false},\n      ],\n      controllerId: this.controllerId,\n      data,\n    });\n  }\n\n  /**\n   * \n   * \n   */\n  static sealWithSignature(\n    from: PubKey,\n    program: PubKey,\n    to: PubKey,\n  ): Transaction {\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        operation: 2, \n      },\n      data,\n    );\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: from, isSigner: true},\n        {pubkey: program, isSigner: false},\n        {pubkey: to, isSigner: false},\n      ],\n      controllerId: this.controllerId,\n      data,\n    });\n  }\n}\n","// @flow\n\nimport {BusAccount} from './bus-account';\nimport {PubKey} from './pubkey';\nimport {ControllerLoader} from './controller-loader';\nimport type {Connection} from './connection';\n\nexport class NativeControllerLoader {\n  static get controllerId(): PubKey {\n    return new PubKey('NativeControllerLoader1111111111111111111111111111111');\n  }\n\n  static load(\n    connection: Connection,\n    payer: BusAccount,\n    programName: string,\n  ): Promise<PubKey> {\n    const bytes = [...Buffer.from(programName)];\n    const program = new BusAccount();\n    return ControllerLoader.load(\n      connection,\n      payer,\n      program,\n      NativeControllerLoader.controllerId,\n      bytes,\n    );\n  }\n}\n","/**\n * @flow\n */\n\nimport assert from 'assert';\nimport BN from 'bn.js';\nimport * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './typelayout';\nimport {BusAccount} from './bus-account';\nimport {PubKey} from './pubkey';\nimport {SystemController} from './system-controller';\nimport {Transaction, TxOperation} from './transaction-controller';\nimport type {TxnSignature} from './transaction-controller';\nimport {sendAndConfmTxn} from './util/send-and-confm-tx';\nimport type {Connection} from './connection';\n\nexport class TokenCount extends BN {\n  toBuffer(): Buffer {\n    const a = super.toArray().reverse();\n    const b = Buffer.from(a);\n    if (b.length === 8) {\n      return b;\n    }\n    assert(b.length < 8, 'TokenCount too large');\n\n    const zeroPad = Buffer.alloc(8);\n    b.copy(zeroPad);\n    return zeroPad;\n  }\n\n\n  static fromBuffer(buffer: Buffer): TokenCount {\n    assert(buffer.length === 8, `Invalid buffer length: ${buffer.length}`);\n    return new BN(\n      [...buffer]\n        .reverse()\n        .map(i => `00${i.toString(16)}`.slice(-2))\n        .join(''),\n      16,\n    );\n  }\n}\n\n\ntype TokenDetail = {|\n\n  supply: TokenCount,\n\n\n  decimals: number,\n\n\n  name: string,\n\n\n  symbol: string,\n|};\n\n/**\n * @private\n */\nconst TokenDetailLayout = BufferLayout.struct([\n  Layout.uint64('supply'),\n  BufferLayout.u8('decimals'),\n  Layout.rustString('name'),\n  Layout.rustString('symbol'),\n]);\n\ntype TokenAccountDetail = {|\n  token: PubKey,\n\n  owner: PubKey,\n\n  amount: TokenCount,\n\n  source: null | PubKey,\n\n  originalAmount: TokenCount,\n|};\n\n/**\n * @private\n */\nconst TokenAccountDetailLayout = BufferLayout.struct([\n  Layout.pubKey('token'),\n  Layout.pubKey('owner'),\n  Layout.uint64('amount'),\n  BufferLayout.u8('sourceOption'),\n  Layout.pubKey('source'),\n  Layout.uint64('originalAmount'),\n]);\n\ntype TokenAndPubKey = [Token, PubKey]; \n\nexport const SYSTEM_TOKEN_CONTROLLER_ID = new PubKey(\n  'Token11111111111111111111111111111111111111',\n);\n\nexport class Token {\n  /**\n   * @private\n   */\n  connection: Connection;\n\n\n  token: PubKey;\n\n  controllerId: PubKey;\n\n  constructor(\n    connection: Connection,\n    token: PubKey,\n    controllerId: PubKey = SYSTEM_TOKEN_CONTROLLER_ID,\n  ) {\n    Object.assign(this, {connection, token, controllerId});\n  }\n\n  static async createNewToken(\n    connection: Connection,\n    owner: BusAccount,\n    supply: TokenCount,\n    name: string,\n    symbol: string,\n    decimals: number,\n    controllerId: PubKey = SYSTEM_TOKEN_CONTROLLER_ID,\n  ): Promise<TokenAndPubKey> {\n    const tokenAccount = new BusAccount();\n    const token = new Token(connection, tokenAccount.pubKey, controllerId);\n    const initialAccountPubKey = await token.createNewAccount(owner, null);\n\n    let transaction;\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.uint64('supply'),\n      BufferLayout.u8('decimals'),\n      Layout.rustString('name'),\n      Layout.rustString('symbol'),\n    ]);\n\n    let data = Buffer.alloc(1024);\n    {\n      const encodeLength = dataLayout.encode(\n        {\n          instruction: 0,\n          supply: supply.toBuffer(),\n          decimals,\n          name,\n          symbol,\n        },\n        data,\n      );\n      data = data.slice(0, encodeLength);\n    }\n\n    transaction = SystemController.createNewAccount(\n      owner.pubKey,\n      tokenAccount.pubKey,\n      1,\n      1 + data.length,\n      controllerId,\n    );\n    await sendAndConfmTxn(connection, transaction, owner);\n\n    transaction = new Transaction().add({\n      keys: [\n        {pubkey: tokenAccount.pubKey, isSigner: true},\n        {pubkey: initialAccountPubKey, isSigner: false},\n      ],\n      controllerId,\n      data,\n    });\n    await sendAndConfmTxn(\n      connection,\n      transaction,\n      owner,\n      tokenAccount,\n    );\n\n    return [token, initialAccountPubKey];\n  }\n\n  async createNewAccount(\n    owner: BusAccount,\n    source: null | PubKey = null,\n  ): Promise<PubKey> {\n    const tokenAccount = new BusAccount();\n    let transaction;\n\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 1, \n      },\n      data,\n    );\n\n    transaction = SystemController.createNewAccount(\n      owner.pubKey,\n      tokenAccount.pubKey,\n      1,\n      1 + TokenAccountDetailLayout.span,\n      this.controllerId,\n    );\n    await sendAndConfmTxn(this.connection, transaction, owner);\n\n    const keys = [\n      {pubkey: tokenAccount.pubKey, isSigner: true},\n      {pubkey: owner.pubKey, isSigner: false},\n      {pubkey: this.token, isSigner: false},\n    ];\n    if (source) {\n      keys.push({pubkey: source, isSigner: false});\n    }\n    transaction = new Transaction().add({\n      keys,\n      controllerId: this.controllerId,\n      data,\n    });\n    await sendAndConfmTxn(\n      this.connection,\n      transaction,\n      owner,\n      tokenAccount,\n    );\n\n    return tokenAccount.pubKey;\n  }\n\n\n  async fetchTokenDetail(): Promise<TokenDetail> {\n    const accountDetail = await this.connection.fetchAccountDetail(this.token);\n    if (!accountDetail.owner.equals(this.controllerId)) {\n      throw new Error(\n        `Invalid token owner: ${JSON.stringify(accountDetail.owner)}`,\n      );\n    }\n\n    const data = Buffer.from(accountDetail.data);\n\n    if (data.readUInt8(0) !== 1) {\n      throw new Error(`Invalid token data`);\n    }\n    const tokenDetail = TokenDetailLayout.decode(data, 1);\n    tokenDetail.supply = TokenCount.fromBuffer(tokenDetail.supply);\n    return tokenDetail;\n  }\n\n  async fetchAccountDetail(account: PubKey): Promise<TokenAccountDetail> {\n    const accountDetail = await this.connection.fetchAccountDetail(account);\n    if (!accountDetail.owner.equals(this.controllerId)) {\n      throw new Error(`Invalid token account owner`);\n    }\n\n    const data = Buffer.from(accountDetail.data);\n    if (data.readUInt8(0) !== 2) {\n      throw new Error(`Invalid token account data`);\n    }\n    const tokenAccountDetail = TokenAccountDetailLayout.decode(data, 1);\n\n    tokenAccountDetail.token = new PubKey(tokenAccountDetail.token);\n    tokenAccountDetail.owner = new PubKey(tokenAccountDetail.owner);\n    tokenAccountDetail.amount = TokenCount.fromBuffer(tokenAccountDetail.amount);\n    if (tokenAccountDetail.sourceOption === 0) {\n      tokenAccountDetail.source = null;\n      tokenAccountDetail.originalAmount = new TokenCount();\n    } else {\n      tokenAccountDetail.source = new PubKey(tokenAccountDetail.source);\n      tokenAccountDetail.originalAmount = TokenCount.fromBuffer(\n        tokenAccountDetail.originalAmount,\n      );\n    }\n\n    if (!tokenAccountDetail.token.equals(this.token)) {\n      throw new Error(\n        `Invalid token account token: ${JSON.stringify(\n          tokenAccountDetail.token,\n        )} !== ${JSON.stringify(this.token)}`,\n      );\n    }\n    return tokenAccountDetail;\n  }\n\n  async transfer(\n    owner: BusAccount,\n    source: PubKey,\n    destination: PubKey,\n    amount: number | TokenCount,\n  ): Promise<?TxnSignature> {\n    return await sendAndConfmTxn(\n      this.connection,\n      new Transaction().add(\n        await this.transferOperation(\n          owner.pubKey,\n          source,\n          destination,\n          amount,\n        ),\n      ),\n      owner,\n    );\n  }\n\n  async approve(\n    owner: BusAccount,\n    account: PubKey,\n    delegate: PubKey,\n    amount: number | TokenCount,\n  ): Promise<void> {\n    await sendAndConfmTxn(\n      this.connection,\n      new Transaction().add(\n        this.approveOperation(owner.pubKey, account, delegate, amount),\n      ),\n      owner,\n    );\n  }\n\n  revoke(\n    owner: BusAccount,\n    account: PubKey,\n    delegate: PubKey,\n  ): Promise<void> {\n    return this.approve(owner, account, delegate, 0);\n  }\n\n  async setOwner(\n    owner: BusAccount,\n    account: PubKey,\n    newOwner: PubKey,\n  ): Promise<void> {\n    await sendAndConfmTxn(\n      this.connection,\n      new Transaction().add(\n        this.setOwnerOperation(owner.pubKey, account, newOwner),\n      ),\n      owner,\n    );\n  }\n\n  async transferOperation(\n    owner: PubKey,\n    source: PubKey,\n    destination: PubKey,\n    amount: number | TokenCount,\n  ): Promise<TxOperation> {\n    const accountInfo = await this.fetchAccountDetail(source);\n    if (!owner.equals(accountInfo.owner)) {\n      throw new Error('Account owner mismatch');\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.uint64('amount'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 2, \n        amount: new TokenCount(amount).toBuffer(),\n      },\n      data,\n    );\n\n    const keys = [\n      {pubkey: owner, isSigner: true},\n      {pubkey: source, isSigner: false},\n      {pubkey: destination, isSigner: false},\n    ];\n    if (accountInfo.source) {\n      keys.push({pubkey: accountInfo.source, isSigner: false});\n    }\n    return new TxOperation({\n      keys,\n      controllerId: this.controllerId,\n      data,\n    });\n  }\n\n  approveOperation(\n    owner: PubKey,\n    account: PubKey,\n    delegate: PubKey,\n    amount: number | TokenCount,\n  ): TxOperation {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.uint64('amount'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 3,\n        amount: new TokenCount(amount).toBuffer(),\n      },\n      data,\n    );\n\n    return new TxOperation({\n      keys: [\n        {pubkey: owner, isSigner: true},\n        {pubkey: account, isSigner: false},\n        {pubkey: delegate, isSigner: false},\n      ],\n      controllerId: this.controllerId,\n      data,\n    });\n  }\n\n  revokeOperation(\n    owner: PubKey,\n    account: PubKey,\n    delegate: PubKey,\n  ): TxOperation {\n    return this.approveOperation(owner, account, delegate, 0);\n  }\n\n  setOwnerOperation(\n    owner: PubKey,\n    account: PubKey,\n    newOwner: PubKey,\n  ): TxOperation {\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 4,\n      },\n      data,\n    );\n\n    return new TxOperation({\n      keys: [\n        {pubkey: owner, isSigner: true},\n        {pubkey: account, isSigner: false},\n        {pubkey: newOwner, isSigner: false},\n      ],\n      controllerId: this.controllerId,\n      data,\n    });\n  }\n}\n","// @flow\n\nimport {Connection} from '../connection';\nimport {sleep} from './sleep';\nimport type {TxnSignature} from '../transaction-controller';\nimport {DEFAULT_TICKS_PER_ROUND, NUM_TICKS_PER_SECOND} from '../timing';\n\n/**\n *\n */\nexport async function sendAndConfmOriginalTxn(\n  connection: Connection,\n  rawTransaction: Buffer,\n): Promise<TxnSignature> {\n  const start = Date.now();\n  let signature = await connection.sendOriginalTx(rawTransaction);\n\n  // \n  let status = null;\n  let statusRetries = 6;\n  for (;;) {\n    status = await connection.fetchSignatureState(signature);\n    if (status) {\n      break;\n    }\n\n    // \n    await sleep((500 * DEFAULT_TICKS_PER_ROUND) / NUM_TICKS_PER_SECOND);\n\n    if (--statusRetries <= 0) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Raw Transaction '${signature}' was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds (${JSON.stringify(status)})`,\n      );\n    }\n  }\n\n  if (status && 'Ok' in status) {\n    return signature;\n  }\n\n  throw new Error(\n    `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n  );\n}\n","//@flow\n\nimport {testnetDefaultChannel} from '../../package.json';\n\n/**\n * @private\n */\nconst endpoint = {\n  nightly: 'https://api.nightly.bitconch.io',\n  beta: 'https://api.beta.testnet.bitconch.com',\n  stable: 'https://api.testnet.bitconch.com',\n};\n\n/**\n * \n * \n */\nexport function testnetChannelEndpoint(channel?: string): string {\n  if (!channel) {\n    return endpoint[testnetDefaultChannel];\n  }\n\n  if (endpoint[channel]) {\n    return endpoint[channel];\n  }\n  throw new Error(`Unknown channel: ${channel}`);\n}\n"],"names":["PubKey","value","startsWith","_bn","BN","substring","bs58","decode","byteLength","Error","pubKey","eq","encode","toBuffer","b","toArrayLike","Buffer","length","zeroPad","alloc","copy","toBase58","o","BusAccount","secretKey","_keypair","nacl","sign","keyPair","fromSecretKey","publicKey","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_ROUND","property","BufferLayout","uint64","rustString","rsl","_decode","bind","_encode","buffer","offset","data","chars","toString","str","from","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","push","PACKET_DATA_SIZE","TxOperation","opts","Object","assign","Transaction","signatures","signature","items","forEach","item","instructions","concat","recentBlockhash","keys","map","numRequiredSignatures","controllerIds","instruction","controllerId","includes","keySignerPair","keyStr","pubkey","isSigner","keyCount","shortvec","controllerIdCount","keyIndicesCount","dataCount","controllerIdIndex","indexOf","keyIndices","keyObj","dataLength","invariant","keyIndex","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","slice","signDataLayout","Layout","transaction","key","signData","signPartial","partialSigners","accountOrPubKey","_fetchSignData","index","detached","privateKey","signer","findIndex","sigpair","equals","signatureCount","transactionLength","wireTransaction","PUBKEY_LENGTH","SIGNATURE_LENGTH","byteArray","i","accountCount","accounts","account","programs","program","programIndex","accountIndexCount","accountIndex","sigPubkeyPair","instructionData","j","some","sleep","ms","Promise","resolve","setTimeout","createRpcReq","url","server","jayson","request","callback","options","method","body","headers","fetch","res","text","args","reject","err","response","FetchBalanceRpcResult","struct","jsonrpc","literal","id","error","result","jsonRpcResult","resultDescription","jsonRpcVersion","union","AccountDetailResult","executable","owner","dif","FetchAccountDetailRpcResult","AccountNoticeResult","subscription","ControllerAccountDetailResult","ControllerAccountNoticeResult","ConfmTxnRpcResult","FetchRoundLeader","FetchClusterNodes","list","gossip","tpu","rpc","FetchSignatureStateRpcResult","Ok","Err","FetchTxnAmountRpcResult","FetchRecentBlockhash","ReqDroneRpcResult","SendTxnRpcResult","Connection","endpoint","urlParse","_rpcReq","href","_blockhashInfo","seconds","transactionSignatures","protocol","host","port","String","Number","_rpcWebSocket","RpcWebSocketClient","urlFormat","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnErr","_wsOnClose","_wsOnAccountNotice","_wsOnControllerAccountNotice","unsafeRes","message","assert","to","amount","signers","Date","getSeconds","_disableBlockhashCaching","attempts","startTime","now","fetchRecentBlockhash","serialize","sendOriginalTx","rawTransaction","_rpcWebSocketConnected","_updateSubscriptions","console","log","code","accountKeys","_accountChangeSubscriptions","controllerKeys","_controllerAccountChangeSubscriptions","close","subscriptionId","connect","call","notification","sub","_accountChangeSubscriptionCounter","accountId","accountDetail","_controllerAccountChangeSubscriptionCounter","sendAndConfmTxn","connection","sendRetries","start","sendTxn","status","statusRetries","fetchSignatureState","duration","toFixed","JSON","stringify","Math","random","undefined","SystemController","newAccount","space","dataLayout","span","add","ControllerLoader","payer","controller","createNewAccount","chunkSize","array","transactions","all","BpfControllerLoader","elf","load","serializePayment","payment","toData","writeUInt32LE","serializeDate","when","iso","date","pad","number","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","write","serializeCond","condition","type","BudgetController","pos","conditions","conditionData","paymentData","condition1","condition2","whenData","operation","NativeControllerLoader","programName","TokenCount","a","reverse","join","TokenDetailLayout","TokenAccountDetailLayout","SYSTEM_TOKEN_CONTROLLER_ID","Token","token","source","tokenAccount","fetchAccountDetail","readUInt8","tokenDetail","supply","fromBuffer","tokenAccountDetail","sourceOption","originalAmount","destination","transferOperation","delegate","approveOperation","approve","newOwner","setOwnerOperation","accountInfo","name","symbol","decimals","initialAccountPubKey","sendAndConfmOriginalTxn","nightly","beta","stable","testnetChannelEndpoint","channel","testnetDefaultChannel"],"mappings":"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"}