{"version":3,"file":"index.cjs.js","sources":["../src/pubkey.js","../src/bus-account.js","../src/timing.js","../src/resize.js","../src/util/shortvec-encoding.js","../src/transaction-controller.js","../src/util/sleep.js","../src/connection.js","../src/util/send-and-confm-tx.js","../src/system-controller.js","../src/controller-loader.js","../src/bpfcontroller-loader.js","../src/budget-controller.js","../src/nativecontroller-loader.js","../src/token-controller.js","../src/util/send-and-confm-original-tx.js","../src/util/testnet.js","../src/index.js"],"sourcesContent":["// @flow\n\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\n\n/**\n * A public key\n */\nexport class PubKey {\n  _bn: BN;\n\n  /**\n   * Create a new PubKey object\n   */\n  constructor(value: number | string | Buffer | Array<number>) {\n    if (typeof value === 'string') {\n      // hexadecimal number\n      if (value.startsWith('0x')) {\n        this._bn = new BN(value.substring(2), 16);\n      } else {\n        // assume base 58 encoding by default\n        this._bn = new BN(bs58.decode(value));\n      }\n    } else {\n      this._bn = new BN(value);\n    }\n\n    if (this._bn.byteLength() > 32) {\n      throw new Error(`Invalid public key input`);\n    }\n  }\n\n  /**\n   * Checks if the provided object is a PubKey\n   */\n  static isPubKey(o: Object): boolean {\n    return o instanceof PubKey;\n  }\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(pubKey: PubKey): boolean {\n    return this._bn.eq(pubKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBuffer());\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Returns a string representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n}\n","// @flow\nimport nacl from 'tweetnacl';\nimport type {KeyPair} from 'tweetnacl';\n\nimport {PubKey} from './pubkey';\n\n/**\n * An account key pair (public and secret keys).\n */\nexport class BusAccount {\n  _keypair: KeyPair;\n\n  /**\n   * Create a new BusAccount object\n   *\n   * If the privateKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param privateKey Secret key for the account\n   */\n  constructor(privateKey: ?Buffer = null) {\n    if (privateKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(privateKey);\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get pubKey(): PubKey {\n    return new PubKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get privateKey(): Buffer {\n    return this._keypair.secretKey;\n  }\n}\n","// @flow\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @ignore\n */\nexport const NUM_TICKS_PER_SEC = 10;\n\n/**\n * @ignore\n */\nexport const DEFAULT_TICKS_PER_SLOT = 8;\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const pubKey = (property: string = 'pubKey'): Object => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): Object => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer, offset) => {\n    const data = _decode(buffer, offset);\n    return data.chars.toString('utf8');\n  };\n\n  rsl.encode = (str, buffer, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  return rsl;\n};\n","// @flow\n\nexport function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","// @flow\n\nimport invariant from 'assert';\nimport * as BufferLayout from 'buffer-layout';\nimport nacl from 'tweetnacl';\nimport bs58 from 'bs58';\n\nimport * as Layout from './resize';\nimport {PubKey} from './pubkey';\nimport {BusAccount} from './bus-account';\nimport * as shortvec from './util/shortvec-encoding';\nimport type {Blockhash} from './bus-blockhash';\n\n/**\n * @typedef {string} TxnSignature\n */\nexport type TxnSignature = string;\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\n/**\n * List of TxOperation object fields that may be initialized at construction\n *\n * @typedef {Object} TxInstructionControlFields\n * @property {?Array<PubKey>} keys\n * @property {?PubKey} controllerId\n * @property {?Buffer} data\n */\ntype TxInstructionControlFields = {|\n  keys?: Array<{pubkey: PubKey, isSigner: boolean, isDebitable: boolean}>,\n  controllerId?: PubKey,\n  data?: Buffer,\n|};\n\n/**\n * Transaction Instruction class\n */\nexport class TxOperation {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<{\n    pubkey: PubKey,\n    isSigner: boolean,\n    isDebitable: boolean,\n  }> = [];\n\n  /**\n   * Program Id to execute\n   */\n  controllerId: PubKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts?: TxInstructionControlFields) {\n    opts && Object.assign(this, opts);\n  }\n}\n\n/**\n * @private\n */\ntype SignaturePubkeyPair = {|\n  signature: Buffer | null,\n  pubKey: PubKey,\n|};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n * @typedef {Object} TxnControlFields\n * @property (?recentPackagehash} A recent block hash\n * @property (?signatures} One or more signatures\n *\n */\ntype TxnControlFields = {|\n  recentPackagehash?: Blockhash | null,\n  signatures?: Array<SignaturePubkeyPair>,\n|};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The operations to atomically execute\n   */\n  operations: Array<TxOperation> = [];\n\n  /**\n   * A recent transaction id.  Must be populated by the caller\n   */\n  recentPackagehash: Blockhash | null;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TxnControlFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more operations to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TxOperation | TxInstructionControlFields,\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No operations');\n    }\n\n    items.forEach(item => {\n      if (item instanceof Transaction) {\n        this.operations = this.operations.concat(item.operations);\n      } else if (item instanceof TxOperation) {\n        this.operations.push(item);\n      } else {\n        this.operations.push(new TxOperation(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * @private\n   */\n  _fetchSignData(): Buffer {\n    const {recentPackagehash} = this;\n    if (!recentPackagehash) {\n      throw new Error('Transaction recentPackagehash required');\n    }\n\n    if (this.operations.length < 1) {\n      throw new Error('No operations provided');\n    }\n\n    const keys = this.signatures.map(({pubKey}) => pubKey.toString());\n    let numRequiredSignatures = 0;\n    let numCreditOnlySignedAccounts = 0;\n    let numCreditOnlyUnsignedAccounts = 0;\n\n    const programIds = [];\n\n    this.operations.forEach(instruction => {\n      instruction.keys.forEach(keySignerPair => {\n        const keyStr = keySignerPair.pubkey.toString();\n        if (!keys.includes(keyStr)) {\n          if (keySignerPair.isSigner) {\n            numRequiredSignatures += 1;\n            if (!keySignerPair.isDebitable) {\n              numCreditOnlySignedAccounts += 1;\n            }\n          } else {\n            if (!keySignerPair.isDebitable) {\n              numCreditOnlyUnsignedAccounts += 1;\n            }\n          }\n          keys.push(keyStr);\n        }\n      });\n\n      const controllerId = instruction.controllerId.toString();\n      if (!programIds.includes(controllerId)) {\n        programIds.push(controllerId);\n      }\n    });\n\n    programIds.forEach(controllerId => {\n      if (!keys.includes(controllerId)) {\n        keys.push(controllerId);\n        numCreditOnlyUnsignedAccounts += 1;\n      }\n    });\n\n    if (numRequiredSignatures > this.signatures.length) {\n      throw new Error(\n        `Insufficent signatures: expected ${numRequiredSignatures} but got ${\n          this.signatures.length\n        }`,\n      );\n    }\n\n    let keyCount = [];\n    shortvec.encodeLength(keyCount, keys.length);\n\n    const operations = this.operations.map(instruction => {\n      const {data, controllerId} = instruction;\n      let keyIndicesCount = [];\n      shortvec.encodeLength(keyIndicesCount, instruction.keys.length);\n      let dataCount = [];\n      shortvec.encodeLength(dataCount, instruction.data.length);\n      return {\n        programIdIndex: keys.indexOf(controllerId.toString()),\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(\n          instruction.keys.map(keyObj =>\n            keys.indexOf(keyObj.pubkey.toString()),\n          ),\n        ),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    operations.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.keyIndices.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    let instructionCount = [];\n    shortvec.encodeLength(instructionCount, operations.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    operations.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numCreditOnlySignedAccounts'),\n      BufferLayout.blob(1, 'numCreditOnlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.pubKey('key'), keys.length, 'keys'),\n      Layout.pubKey('recentPackagehash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.signatures.length]),\n      numCreditOnlySignedAccounts: Buffer.from([numCreditOnlySignedAccounts]),\n      numCreditOnlyUnsignedAccounts: Buffer.from([\n        numCreditOnlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: keys.map(key => new PubKey(key).toBuffer()),\n      recentPackagehash: Buffer.from(bs58.decode(recentPackagehash)),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    signData = signData.slice(0, length + instructionBuffer.length);\n\n    return signData;\n  }\n\n  /**\n   * Sign the Transaction with the specified accounts.  Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used when testing for Transaction confirmation.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentPackagehash` before invoking this method\n   */\n  sign(...signers: Array<BusAccount>) {\n    this.signPartial(...signers);\n  }\n\n  /**\n   * Partially sign a Transaction with the specified accounts.  The `BusAccount`\n   * inputs will be used to sign the Transaction immediately, while any\n   * `PubKey` inputs will be referenced in the signed Transaction but need to\n   * be filled in later by calling `addSigner()` with the matching `BusAccount`.\n   *\n   * All the caveats from the `sign` method apply to `signPartial`\n   */\n  signPartial(...partialSigners: Array<PubKey | BusAccount>) {\n    if (partialSigners.length === 0) {\n      throw new Error('No signers');\n    }\n    const signatures: Array<SignaturePubkeyPair> = partialSigners.map(\n      accountOrPublicKey => {\n        const pubKey =\n          accountOrPublicKey instanceof BusAccount\n            ? accountOrPublicKey.pubKey\n            : accountOrPublicKey;\n        return {\n          signature: null,\n          pubKey,\n        };\n      },\n    );\n    this.signatures = signatures;\n    const signData = this._fetchSignData();\n\n    partialSigners.forEach((accountOrPublicKey, index) => {\n      if (accountOrPublicKey instanceof PubKey) {\n        return;\n      }\n      const signature = nacl.sign.detached(\n        signData,\n        accountOrPublicKey.privateKey,\n      );\n      invariant(signature.length === 64);\n      signatures[index].signature = Buffer.from(signature);\n    });\n  }\n\n  /**\n   * Fill in a signature for a partially signed Transaction.  The `signer` must\n   * be the corresponding `BusAccount` for a `PubKey` that was previously provided to\n   * `signPartial`\n   */\n  addSigner(signer: BusAccount) {\n    const index = this.signatures.findIndex(sigpair =>\n      signer.pubKey.equals(sigpair.pubKey),\n    );\n    if (index < 0) {\n      throw new Error(`Unknown signer: ${signer.pubKey.toString()}`);\n    }\n\n    const signData = this._fetchSignData();\n    const signature = nacl.sign.detached(signData, signer.privateKey);\n    invariant(signature.length === 64);\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * The Transaction must have a valid `signature` before invoking this method\n   */\n  serialize(): Buffer {\n    const {signatures} = this;\n    if (!signatures) {\n      throw new Error('Transaction has not been signed');\n    }\n\n    const signData = this._fetchSignData();\n    const signatureCount = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      invariant(signature !== null, `null signature`);\n      invariant(signature.length === 64, `signature has invalid length`);\n      Buffer.from(signature).copy(\n        wireTransaction,\n        signatureCount.length + index * 64,\n      );\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get keys(): Array<PubKey> {\n    invariant(this.operations.length === 1);\n    return this.operations[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get controllerId(): PubKey {\n    invariant(this.operations.length === 1);\n    return this.operations[0].controllerId;\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get data(): Buffer {\n    invariant(this.operations.length === 1);\n    return this.operations[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer): Transaction {\n    const PUBKEY_LENGTH = 32;\n    const SIGNATURE_LENGTH = 64;\n\n    function isCreditDebit(\n      i: number,\n      numRequiredSignatures: number,\n      numCreditOnlySignedAccounts: number,\n      numCreditOnlyUnsignedAccounts: number,\n      numKeys: number,\n    ): boolean {\n      return (\n        i < numRequiredSignatures - numCreditOnlySignedAccounts ||\n        (i >= numRequiredSignatures &&\n          i < numKeys - numCreditOnlyUnsignedAccounts)\n      );\n    }\n\n    let transaction = new Transaction();\n\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(signature);\n    }\n\n    const numRequiredSignatures = byteArray.shift();\n    // byteArray = byteArray.slice(1); // Skip numRequiredSignatures byte\n    const numCreditOnlySignedAccounts = byteArray.shift();\n    // byteArray = byteArray.slice(1); // Skip numCreditOnlySignedAccounts byte\n    const numCreditOnlyUnsignedAccounts = byteArray.shift();\n    // byteArray = byteArray.slice(1); // Skip numCreditOnlyUnsignedAccounts byte\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accounts = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accounts.push(account);\n    }\n\n    const recentPackagehash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let operations = [];\n    for (let i = 0; i < instructionCount; i++) {\n      let instruction = {};\n      instruction.programIndex = byteArray.shift();\n      const accountIndexCount = shortvec.decodeLength(byteArray);\n      instruction.accountIndex = byteArray.slice(0, accountIndexCount);\n      byteArray = byteArray.slice(accountIndexCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      instruction.data = byteArray.slice(0, dataLength);\n      byteArray = byteArray.slice(dataLength);\n      operations.push(instruction);\n    }\n\n    // Populate Transaction object\n    transaction.recentPackagehash = new PubKey(recentPackagehash).toBase58();\n    for (let i = 0; i < signatureCount; i++) {\n      const sigPubkeyPair = {\n        signature: Buffer.from(signatures[i]),\n        pubKey: new PubKey(accounts[i]),\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    }\n    for (let i = 0; i < instructionCount; i++) {\n      let instructionData = {\n        keys: [],\n        controllerId: new PubKey(accounts[operations[i].programIndex]),\n        data: Buffer.from(operations[i].data),\n      };\n      for (let j = 0; j < operations[i].accountIndex.length; j++) {\n        const pubkey = new PubKey(accounts[operations[i].accountIndex[j]]);\n\n        instructionData.keys.push({\n          pubkey,\n          isSigner: transaction.signatures.some(\n            keyObj => keyObj.pubKey.toString() === pubkey.toString(),\n          ),\n          isDebitable: isCreditDebit(\n            j,\n            numRequiredSignatures,\n            numCreditOnlySignedAccounts,\n            numCreditOnlyUnsignedAccounts,\n            accounts.length,\n          ),\n        });\n      }\n      let instruction = new TxOperation(instructionData);\n      transaction.operations.push(instruction);\n    }\n    return transaction;\n  }\n}\n","// @flow\n\n// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","// @flow\n\nimport assert from 'assert';\nimport {parse as urlParse, format as urlFormat} from 'url';\nimport fetch from 'node-fetch';\nimport jayson from 'jayson/lib/client/browser';\nimport {struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\n\nimport {DEFAULT_TICKS_PER_SLOT, NUM_TICKS_PER_SEC} from './timing';\nimport {PubKey} from './pubkey';\nimport {Transaction} from './transaction-controller';\nimport {sleep} from './util/sleep';\nimport type {Blockhash} from './bus-blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {BusAccount} from './bus-account';\nimport type {TxnSignature} from './transaction-controller';\n\ntype RpcReq = (methodName: string, args: Array<any>) => any;\n\n/**\n * Information describing a cluster node\n *\n * @typedef {Object} NodeInfo\n * @property {string} pubkey Identity public key of the node\n * @property {string} gossip Gossip network address for the node\n * @property {string} tpu TPU network address for the node (null if not available)\n * @property {string|null} rpc JSON RPC network address for the node (null if not available)\n */\ntype NodeInfo = {\n  pubkey: string,\n  gossip: string,\n  tpu: string | null,\n  rpc: string | null,\n};\n\n/**\n * Information describing a vote account\n *\n * @typedef {Object} VoteAccountInfo\n * @property {string} votePubkey Public key of the vote account\n * @property {string} nodePubkey Identity public key of the node voting with this account\n * @property {string} stake The stake, in lamports, delegated to this vote account\n * @property {string} commission A 32-bit integer used as a fraction (commission/0xFFFFFFFF) for rewards payout\n */\ntype VoteAccountInfo = {\n  votePubkey: string,\n  nodePubkey: string,\n  stake: number,\n  commission: number,\n};\n\nfunction createRpcReq(url): RpcReq {\n  const server = jayson(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    try {\n      const res = await fetch(url, options);\n      const text = await res.text();\n      callback(null, text);\n    } catch (err) {\n      callback(err);\n    }\n  });\n\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      server.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"fetchAccountBalance\" message\n */\nconst FetchBalanceRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: 'number?',\n});\n\n/**\n * @private\n */\nfunction jsonRpcResult(resultDescription: any) {\n  const jsonRpcVersion = struct.literal('2.0');\n  return struct.union([\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'any',\n    }),\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'null?',\n      result: resultDescription,\n    }),\n  ]);\n}\n\n/**\n * @private\n */\nconst AccountDetailResult = struct({\n  executable: 'boolean',\n  owner: 'array',\n  lamports: 'number',\n  data: 'array',\n});\n\n/**\n * Expected JSON RPC response for the \"fetchAccountDetail\" message\n */\nconst fetchAccountDetailRpcResult = jsonRpcResult(AccountDetailResult);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNoticeResult = struct({\n  subscription: 'number',\n  result: AccountDetailResult,\n});\n\n/**\n * @private\n */\nconst ControllerAccountDetailResult = struct(['string', AccountDetailResult]);\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ControllerAccountNoticeResult = struct({\n  subscription: 'number',\n  result: ControllerAccountDetailResult,\n});\n\n/**\n * Expected JSON RPC response for the \"confmTxn\" message\n */\nconst ConfmTxnRpcResult = jsonRpcResult('boolean');\n\n/**\n * Expected JSON RPC response for the \"fetchRoundLeader\" message\n */\nconst FetchRoundLeader = jsonRpcResult('string');\n\n/**\n * Expected JSON RPC response for the \"fetchClusterNodes\" message\n */\nconst GetClusterNodes = jsonRpcResult(\n  struct.list([\n    struct({\n      pubkey: 'string',\n      gossip: 'string',\n      tpu: struct.union(['null', 'string']),\n      rpc: struct.union(['null', 'string']),\n    }),\n  ]),\n);\n/**\n * @ignore\n */\nconst GetClusterNodes_015 = jsonRpcResult(\n  struct.list([\n    struct({\n      id: 'string',\n      gossip: 'string',\n      tpu: struct.union(['null', 'string']),\n      rpc: struct.union(['null', 'string']),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochVoteAccounts\" message\n */\nconst GetEpochVoteAccounts = jsonRpcResult(\n  struct.list([\n    struct({\n      votePubkey: 'string',\n      nodePubkey: 'string',\n      stake: 'number',\n      commission: 'number',\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"fetchSignatureState\" message\n */\nconst FetchSignatureStateRpcResult = jsonRpcResult(\n  struct.union([\n    'null',\n    struct.union([struct({Ok: 'null'}), struct({Err: 'object'})]),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"fetchTxnAmount\" message\n */\nconst FetchTxnAmountRpcResult = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getTotalSupply\" message\n */\nconst GetTotalSupplyRpcResult = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"fetchRecentBlockhash\" message\n */\nconst FetchRecentBlockhash = jsonRpcResult([\n  'string',\n  struct({\n    lamportsPerSignature: 'number',\n    maxLamportsPerSignature: 'number',\n    minLamportsPerSignature: 'number',\n    targetLamportsPerSignature: 'number',\n    targetSignaturesPerSlot: 'number',\n  }),\n]);\n/**\n * @ignore\n */\nconst GetRecentBlockhash_015 = jsonRpcResult([\n  'string',\n  struct({\n    lamportsPerSignature: 'number',\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"reqDrone\" message\n */\nconst ReqDroneRpcResult = jsonRpcResult('string');\n\n/**\n * Expected JSON RPC response for the \"sendTxn\" message\n */\nconst SendTxnRpcResult = jsonRpcResult('string');\n\n/**\n * Information describing an account\n *\n * @typedef {Object} AccountDetail\n * @property {number} lamports Number of lamports assigned to the account\n * @property {PubKey} owner Identifier of the program that owns the account\n * @property {?Buffer} data Optional data assigned to the account\n * @property {boolean} executable `true` if this account's data contains a loaded program\n */\ntype AccountDetail = {\n  executable: boolean,\n  owner: PubKey,\n  lamports: number,\n  data: Buffer,\n};\n\n/**\n * BusAccount information identified by pubkey\n *\n * @typedef {Object} KeyedAccountDetail\n * @property {PubKey} accountId\n * @property {AccountDetail} fetchAccountDetail\n */\ntype KeyedAccountDetail = {\n  accountId: PubKey,\n  fetchAccountDetail: AccountDetail,\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (fetchAccountDetail: AccountDetail) => void;\n\n/**\n * @private\n */\ntype AccountSubscriptionDetail = {\n  pubKey: string, // PubKey of the account as a base 58 string\n  callback: AccountChangeCallback,\n  subscriptionId: null | number, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ControllerAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountDetail,\n) => void;\n\n/**\n * @private\n */\ntype ControllerAccountSubscriptionDetail = {\n  controllerId: string, // PubKey of the program as a base 58 string\n  callback: ControllerAccountChangeCallback,\n  subscriptionId: null | number, // null when there's no current server subscription id\n};\n\n/**\n * Signature status: Success\n *\n * @typedef {Object} SignaturePass\n */\nexport type SignaturePass = {|\n  Ok: null,\n|};\n\n/**\n * Signature status: TxnErr\n *\n * @typedef {Object} TxnErr\n */\nexport type TxnErr = {|\n  Err: Object,\n|};\n\n/**\n * @ignore\n */\ntype BlockhashAndFeeCalculator = [Blockhash, FeeCalculator]; // This type exists to workaround an esdoc parse error\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  _rpcReq: RpcReq;\n  _rpcWebSock: RpcWebSocketClient;\n  _rpcWebSockConnected: boolean = false;\n\n  _blockhashInfo: {\n    recentPackagehash: Blockhash | null,\n    seconds: number,\n    transactionSignatures: Array<string>,\n  };\n  _disableBlockhashCaching: boolean = false;\n  _accountChangeSubscriptions: {[number]: AccountSubscriptionDetail} = {};\n  _accountChangeSubscriptionCounter: number = 0;\n  _controllerAccountChangeSubscriptions: {\n    [number]: ControllerAccountSubscriptionDetail,\n  } = {};\n  _controllerAccountChangeSubscriptionCounter: number = 0;\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   */\n  constructor(endpoint: string) {\n    let url = urlParse(endpoint);\n\n    this._rpcReq = createRpcReq(url.href);\n    this._blockhashInfo = {\n      recentPackagehash: null,\n      seconds: -1,\n      transactionSignatures: [],\n    };\n\n    url.protocol = url.protocol === 'https:' ? 'wss:' : 'ws:';\n    url.host = '';\n    url.port = String(Number(url.port) + 1);\n    if (url.port === '1') {\n      url.port = url.protocol === 'wss:' ? '8901' : '8900';\n    }\n    this._rpcWebSock = new RpcWebSocketClient(urlFormat(url), {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSock.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSock.on('error', this._wsOnErr.bind(this));\n    this._rpcWebSock.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSock.on(\n      'accountNotification',\n      this._wsOnAccountNotice.bind(this),\n    );\n    this._rpcWebSock.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async fetchAccountBalance(pubKey: PubKey): Promise<number> {\n    const unsafeRes = await this._rpcReq('getDif', [\n      pubKey.toBase58(),\n    ]);\n    const res = FetchBalanceRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async fetchAccountDetail(pubKey: PubKey): Promise<AccountDetail> {\n    const unsafeRes = await this._rpcReq('getAccountInfo', [\n      pubKey.toBase58(),\n    ]);\n    const res = fetchAccountDetailRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n\n    const {result} = res;\n    assert(typeof result !== 'undefined');\n\n    return {\n      executable: result.executable,\n      owner: new PubKey(result.owner),\n      lamports: result.lamports,\n      data: Buffer.from(result.data),\n    };\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature\n   */\n  async confmTxn(signature: TxnSignature): Promise<boolean> {\n    const unsafeRes = await this._rpcReq('confirmTxn', [signature]);\n    const res = ConfmTxnRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async fetchClusterNodes(): Promise<Array<NodeInfo>> {\n    const unsafeRes = await this._rpcReq('getClusterNodes', []);\n\n    // Legacy v0.15 response.  TODO: Remove in August 2019\n    try {\n      const res_015 = GetClusterNodes_015(unsafeRes);\n      if (res_015.error) {\n        console.log('no', res_015.error);\n        throw new Error(res_015.error.message);\n      }\n      return res_015.result.map(node => {\n        node.pubkey = node.id;\n        node.id = undefined;\n        return node;\n      });\n    } catch (e) {\n      // Not legacy format\n    }\n    // End Legacy v0.15 response\n\n    const res = GetClusterNodes(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getEpochVoteAccounts(): Promise<Array<VoteAccountInfo>> {\n    const unsafeRes = await this._rpcReq('getEpochVoteAccounts', []);\n    const res = GetEpochVoteAccounts(unsafeRes);\n    //const res = unsafeRes;\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async fetchRoundLeader(): Promise<string> {\n    const unsafeRes = await this._rpcReq('getRoundLeader', []);\n    const res = FetchRoundLeader(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async fetchSignatureState(\n    signature: TxnSignature,\n  ): Promise<SignaturePass | TxnErr | null> {\n    const unsafeRes = await this._rpcReq('getSignatureState', [signature]);\n    const res = FetchSignatureStateRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async fetchTxnAmount(): Promise<number> {\n    const unsafeRes = await this._rpcReq('getTxnCnt', []);\n    const res = FetchTxnAmountRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster\n   */\n  async getTotalSupply(): Promise<number> {\n    const unsafeRes = await this._rpcReq('getTotalSupply', []);\n    const res = GetTotalSupplyRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   */\n  async fetchRecentBlockhash(): Promise<BlockhashAndFeeCalculator> {\n    const unsafeRes = await this._rpcReq('getLatestBlockhash', []);\n\n    // Legacy v0.15 response.  TODO: Remove in August 2019\n    try {\n      const res_015 = GetRecentBlockhash_015(unsafeRes);\n      if (res_015.error) {\n        throw new Error(res_015.error.message);\n      }\n      const [blockhash, feeCalculator] = res_015.result;\n      feeCalculator.targetSignaturesPerSlot = 42;\n      feeCalculator.targetLamportsPerSignature =\n        feeCalculator.lamportsPerSignature;\n\n      return [blockhash, feeCalculator];\n    } catch (e) {\n      // Not legacy format\n    }\n    // End Legacy v0.15 response\n\n    const res = FetchRecentBlockhash(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Request an allocation of lamports to the specified account\n   */\n  async reqDrone(\n    to: PubKey,\n    amount: number,\n  ): Promise<TxnSignature> {\n    const unsafeRes = await this._rpcReq('requestDif', [\n      to.toBase58(),\n      amount,\n    ]);\n    const res = ReqDroneRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTxn(\n    transaction: Transaction,\n    ...signers: Array<BusAccount>\n  ): Promise<TxnSignature> {\n    for (;;) {\n      // Attempt to use a recent blockhash for up to 30 seconds\n      const seconds = new Date().getSeconds();\n      if (\n        this._blockhashInfo.recentPackagehash != null &&\n        this._blockhashInfo.seconds < seconds + 30\n      ) {\n        transaction.recentPackagehash = this._blockhashInfo.recentPackagehash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        // If the signature of this transaction has not been seen before with the\n        // current recentPackagehash, all done.\n        const signature = transaction.signature.toString();\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          this._blockhashInfo.transactionSignatures.push(signature);\n          if (this._disableBlockhashCaching) {\n            this._blockhashInfo.seconds = -1;\n          }\n          break;\n        }\n      }\n\n      // Fetch a new blockhash\n      let attempts = 0;\n      const startTime = Date.now();\n      for (;;) {\n        const [\n          recentPackagehash,\n          //feeCalculator,\n        ] = await this.fetchRecentBlockhash();\n\n        if (this._blockhashInfo.recentPackagehash != recentPackagehash) {\n          this._blockhashInfo = {\n            recentPackagehash,\n            seconds: new Date().getSeconds(),\n            transactionSignatures: [],\n          };\n          break;\n        }\n        if (attempts === 50) {\n          throw new Error(\n            `Unable to obtain a new blockhash after ${Date.now() -\n              startTime}ms`,\n          );\n        }\n\n        // Sleep for approximately half a slot\n        await sleep((500 * DEFAULT_TICKS_PER_SLOT) / NUM_TICKS_PER_SEC);\n\n        ++attempts;\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendNativeTxn(wireTransaction);\n  }\n\n  /**\n   * @private\n   */\n  async fullnodeExit(): Promise<boolean> {\n    const unsafeRes = await this._rpcReq('fullnodeQuit', []);\n    const res = jsonRpcResult('boolean')(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendNativeTxn(\n    rawTransaction: Buffer,\n  ): Promise<TxnSignature> {\n    const unsafeRes = await this._rpcReq('sendTxn', [\n      [...rawTransaction],\n    ]);\n    const res = SendTxnRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    assert(res.result);\n    return res.result;\n  }\n\n  /**\n   * @private\n   */\n  _wsOnOpen() {\n    this._rpcWebSockConnected = true;\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @private\n   */\n  _wsOnErr(err: Error) {\n    console.log('ws error:', err.message);\n  }\n\n  /**\n   * @private\n   */\n  _wsOnClose(code: number, message: string) {\n    // 1000 means _rpcWebSock.close() was called explicitly\n    if (code !== 1000) {\n      console.log('ws close:', code, message);\n    }\n    this._rpcWebSockConnected = false;\n  }\n\n  /**\n   * @private\n   */\n  async _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._controllerAccountChangeSubscriptions,\n    ).map(Number);\n    if (accountKeys.length === 0 && programKeys.length === 0) {\n      this._rpcWebSock.close();\n      return;\n    }\n\n    if (!this._rpcWebSockConnected) {\n      for (let id of accountKeys) {\n        this._accountChangeSubscriptions[id].subscriptionId = null;\n      }\n      for (let id of programKeys) {\n        this._controllerAccountChangeSubscriptions[id].subscriptionId = null;\n      }\n      this._rpcWebSock.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const {subscriptionId, pubKey} = this._accountChangeSubscriptions[id];\n      if (subscriptionId === null) {\n        try {\n          this._accountChangeSubscriptions[\n            id\n          ].subscriptionId = await this._rpcWebSock.call('accountSubscribe', [\n            pubKey,\n          ]);\n        } catch (err) {\n          console.log(\n            `accountSubscribe error for ${pubKey}: ${err.message}`,\n          );\n        }\n      }\n    }\n    for (let id of programKeys) {\n      const {\n        subscriptionId,\n        controllerId,\n      } = this._controllerAccountChangeSubscriptions[id];\n      if (subscriptionId === null) {\n        try {\n          this._controllerAccountChangeSubscriptions[\n            id\n          ].subscriptionId = await this._rpcWebSock.call('programSubscribe', [\n            controllerId,\n          ]);\n        } catch (err) {\n          console.log(\n            `programSubscribe error for ${controllerId}: ${err.message}`,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnAccountNotice(notification: Object) {\n    const res = AccountNoticeResult(notification);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n\n    const keys = Object.keys(this._accountChangeSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._accountChangeSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        const {result} = res;\n        assert(typeof result !== 'undefined');\n\n        sub.callback({\n          executable: result.executable,\n          owner: new PubKey(result.owner),\n          lamports: result.lamports,\n          data: Buffer.from(result.data),\n        });\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publickey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @return subscription id\n   */\n  onAccountChange(\n    pubKey: PubKey,\n    callback: AccountChangeCallback,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      pubKey: pubKey.toBase58(),\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeListenerOfAccountChange(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const {subscriptionId} = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      if (subscriptionId !== null) {\n        try {\n          await this._rpcWebSock.call('accountUnsubscribe', [subscriptionId]);\n        } catch (err) {\n          console.log('accountUnsubscribe error:', err.message);\n        }\n      }\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = ControllerAccountNoticeResult(notification);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n\n    const keys = Object.keys(this._controllerAccountChangeSubscriptions).map(\n      Number,\n    );\n    for (let id of keys) {\n      const sub = this._controllerAccountChangeSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        const {result} = res;\n        assert(typeof result !== 'undefined');\n\n        sub.callback({\n          accountId: result[0],\n          fetchAccountDetail: {\n            executable: result[1].executable,\n            owner: new PubKey(result[1].owner),\n            lamports: result[1].lamports,\n            data: Buffer.from(result[1].data),\n          },\n        });\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param controllerId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @return subscription id\n   */\n  onControllerAccountChange(\n    controllerId: PubKey,\n    callback: ControllerAccountChangeCallback,\n  ): number {\n    const id = ++this._controllerAccountChangeSubscriptionCounter;\n    this._controllerAccountChangeSubscriptions[id] = {\n      controllerId: controllerId.toBase58(),\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeControllerAccountChangeListener(id: number): Promise<void> {\n    if (this._controllerAccountChangeSubscriptions[id]) {\n      const {subscriptionId} = this._controllerAccountChangeSubscriptions[id];\n      delete this._controllerAccountChangeSubscriptions[id];\n      if (subscriptionId !== null) {\n        try {\n          await this._rpcWebSock.call('programUnsubscribe', [subscriptionId]);\n        } catch (err) {\n          console.log('programUnsubscribe error:', err.message);\n        }\n      }\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n}\n","// @flow\n\nimport invariant from 'assert';\n\nimport {Connection} from '../connection';\nimport {Transaction} from '../transaction-controller';\nimport {sleep} from './sleep';\nimport type {BusAccount} from '../bus-account';\nimport type {TxnSignature} from '../transaction-controller';\nimport {DEFAULT_TICKS_PER_SLOT, NUM_TICKS_PER_SEC} from '../timing';\n\n/**\n * Sign, send and confirm a transaction\n */\nexport async function sendAndconfmTx(\n  connection: Connection,\n  transaction: Transaction,\n  ...signers: Array<BusAccount>\n): Promise<TxnSignature> {\n  let sendRetries = 10;\n  let signature;\n  for (;;) {\n    const start = Date.now();\n    signature = await connection.sendTxn(transaction, ...signers);\n\n    // Wait up to a couple slots for a confirmation\n    let status = null;\n    let statusRetries = 6;\n    for (;;) {\n      status = await connection.fetchSignatureState(signature);\n      if (status) {\n        break;\n      }\n\n      if (--statusRetries <= 0) {\n        break;\n      }\n      // Sleep for approximately half a slot\n      await sleep((500 * DEFAULT_TICKS_PER_SLOT) / NUM_TICKS_PER_SEC);\n    }\n\n    if (status && 'Ok' in status) {\n      break;\n    }\n    if (--sendRetries <= 0) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction '${signature}' was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds (${JSON.stringify(status)})`,\n      );\n    }\n\n    if (status && status.Err && !('AccountInUse' in status.Err)) {\n      throw new Error(\n        `Transaction ${signature} failed (${JSON.stringify(status)})`,\n      );\n    }\n\n    // Retry in 0..100ms to try to avoid another AccountInUse collision\n    await sleep(Math.random() * 100);\n  }\n\n  invariant(signature !== undefined);\n  return signature;\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {Transaction} from './transaction-controller';\nimport {PubKey} from './pubkey';\nimport * as Layout from './resize';\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemController {\n  /**\n   * Public key that identifies the System program\n   */\n  static get controllerId(): PubKey {\n    return new PubKey(\n      '0x000000000000000000000000000000000000000000000000000000000000000',\n    );\n  }\n\n  /**\n   * Generate a Transaction that creates a new account\n   */\n  static createNewAccount(\n    from: PubKey,\n    createNewAccount: PubKey,\n    lamports: number,\n    space: number,\n    controllerId: PubKey,\n  ): Transaction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.pubKey('controllerId'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 0, // Create BusAccount instruction\n        lamports,\n        space,\n        controllerId: controllerId.toBuffer(),\n      },\n      data,\n    );\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: from, isSigner: true, isDebitable: true},\n        {pubkey: createNewAccount, isSigner: false, isDebitable: true},\n      ],\n      controllerId: SystemController.controllerId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that transfers lamports from one account to another\n   */\n  static transfer(from: PubKey, to: PubKey, amount: number): Transaction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('amount'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 2, // Move instruction\n        amount,\n      },\n      data,\n    );\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: from, isSigner: true, isDebitable: true},\n        {pubkey: to, isSigner: false, isDebitable: false},\n      ],\n      controllerId: SystemController.controllerId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that assigns an account to a program\n   */\n  static assign(from: PubKey, controllerId: PubKey): Transaction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.pubKey('controllerId'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 1, // Assign instruction\n        controllerId: controllerId.toBuffer(),\n      },\n      data,\n    );\n\n    return new Transaction().add({\n      keys: [{pubkey: from, isSigner: true, isDebitable: true}],\n      controllerId: SystemController.controllerId,\n      data,\n    });\n  }\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {BusAccount} from './bus-account';\nimport {PubKey} from './pubkey';\nimport {NUM_TICKS_PER_SEC} from './timing';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction-controller';\nimport {sendAndconfmTx} from './util/send-and-confm-tx';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport {SystemController} from './system-controller';\n\n/**\n * Program loader interface\n */\nexport class ControllerLoader {\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static get chunkSize(): number {\n    // Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n    // rest of the Transaction fields\n    //\n    // TODO: replace 300 with a proper constant for the size of the other\n    // Transaction fields\n    return PACKET_DATA_SIZE - 300;\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program BusAccount to load the program into\n   * @param controllerId Public key that identifies the loader\n   * @param data Program octets\n   */\n  static async load(\n    connection: Connection,\n    payer: BusAccount,\n    program: BusAccount,\n    controllerId: PubKey,\n    data: Array<number>,\n  ): Promise<PubKey> {\n    {\n      const transaction = SystemController.createNewAccount(\n        payer.pubKey,\n        program.pubKey,\n        1,\n        data.length,\n        controllerId,\n      );\n      await sendAndconfmTx(connection, transaction, payer);\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = ControllerLoader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.pubKey, isSigner: true, isDebitable: true}],\n        controllerId,\n        data,\n      });\n      transactions.push(\n        sendAndconfmTx(connection, transaction, payer, program),\n      );\n\n      // Delay ~1 tick between write transactions in an attempt to reduce AccountInUse errors\n      // since all the write transactions modify the same program account\n      await sleep(1000 / NUM_TICKS_PER_SEC);\n\n      // Run up to 8 Loads in parallel to prevent too many parallel transactions from\n      // getting rejected with AccountInUse.\n      //\n      // TODO: 8 was selected empirically and should probably be revisited\n      if (transactions.length === 8) {\n        await Promise.all(transactions);\n        transactions = [];\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.pubKey, isSigner: true, isDebitable: true}],\n        controllerId,\n        data,\n      });\n      await sendAndconfmTx(connection, transaction, payer, program);\n    }\n    return program.pubKey;\n  }\n}\n","// @flow\n\nimport {BusAccount} from './bus-account';\nimport {PubKey} from './pubkey';\nimport {ControllerLoader} from './controller-loader';\nimport type {Connection} from './connection';\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfControllerLoader {\n  /**\n   * Public key that identifies the BpfControllerLoader\n   */\n  static get controllerId(): PubKey {\n    return new PubKey('BPFLoader1111111111111111111111111111111111');\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param owner User account to load the program into\n   * @param elfBytes The entire ELF containing the BPF program\n   */\n  static load(\n    connection: Connection,\n    payer: BusAccount,\n    elf: Array<number>,\n  ): Promise<PubKey> {\n    const program = new BusAccount();\n    return ControllerLoader.load(connection, payer, program, BpfControllerLoader.controllerId, elf);\n  }\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {Transaction} from './transaction-controller';\nimport {PubKey} from './pubkey';\nimport {SystemController} from './system-controller';\n\n/**\n * Represents a condition that is met by executing a `sealWithSignature()`\n * transaction\n *\n * @typedef {Object} SignatureCond\n * @property {string} type Must equal the string 'timestamp'\n * @property {PubKey} from Public key from which `sealWithSignature()` will be accepted from\n */\nexport type SignatureCond = {\n  type: 'signature',\n  from: PubKey,\n};\n\n/**\n * Represents a condition that is met by executing a `sealWithDatetime()`\n * transaction\n *\n * @typedef {Object} TimestampCond\n * @property {string} type Must equal the string 'timestamp'\n * @property {PubKey} from Public key from which `sealWithDatetime()` will be accepted from\n * @property {Date} when The timestamp that was observed\n */\nexport type TimestampCond = {\n  type: 'timestamp',\n  from: PubKey,\n  when: Date,\n};\n\n/**\n * Represents a payment to a given public key\n *\n * @typedef {Object} Payment\n * @property {number} amount Number of lamports\n * @property {PubKey} to Public key of the recipient\n */\nexport type Payment = {\n  amount: number,\n  to: PubKey,\n};\n\n/**\n * A condition that can unlock a payment\n *\n * @typedef {SignatureCond|TimestampCond} BudgetCond\n */\nexport type BudgetCond = SignatureCond | TimestampCond;\n\n/**\n * @private\n */\nfunction serializePayment(payment: Payment): Buffer {\n  const toData = payment.to.toBuffer();\n  const data = Buffer.alloc(8 + toData.length);\n  data.writeUInt32LE(payment.amount, 0);\n  toData.copy(data, 8);\n  return data;\n}\n\n/**\n * @private\n */\nfunction serializeTime(when: Date): Buffer {\n  const data = Buffer.alloc(8 + 20);\n  data.writeUInt32LE(20, 0); // size of timestamp as u64\n\n  function iso(date) {\n    function pad(number) {\n      if (number < 10) {\n        return '0' + number;\n      }\n      return number;\n    }\n\n    return (\n      date.getUTCFullYear() +\n      '-' +\n      pad(date.getUTCMonth() + 1) +\n      '-' +\n      pad(date.getUTCDate()) +\n      'T' +\n      pad(date.getUTCHours()) +\n      ':' +\n      pad(date.getUTCMinutes()) +\n      ':' +\n      pad(date.getUTCSeconds()) +\n      'Z'\n    );\n  }\n  data.write(iso(when), 8);\n  return data;\n}\n\n/**\n * @private\n */\nfunction serializeCond(condition: BudgetCond) {\n  switch (condition.type) {\n    case 'timestamp': {\n      const date = serializeTime(condition.when);\n      const from = condition.from.toBuffer();\n\n      const data = Buffer.alloc(4 + date.length + from.length);\n      data.writeUInt32LE(0, 0); // Condition enum = Timestamp\n      date.copy(data, 4);\n      from.copy(data, 4 + date.length);\n      return data;\n    }\n    case 'signature': {\n      const from = condition.from.toBuffer();\n      const data = Buffer.alloc(4 + from.length);\n      data.writeUInt32LE(1, 0); // Condition enum = Signature\n      from.copy(data, 4);\n      return data;\n    }\n    default:\n      throw new Error(`Unknown condition type: ${condition.type}`);\n  }\n}\n\n/**\n * Factory class for transactions to interact with the Budget program\n */\nexport class BudgetController {\n  /**\n   * Public key that identifies the Budget program\n   */\n  static get controllerId(): PubKey {\n    return new PubKey('Budget1111111111111111111111111111111111111');\n  }\n\n  /**\n   * The amount of space this program requires\n   */\n  static get size(): number {\n    return 128;\n  }\n\n  /**\n   * Creates a timestamp condition\n   */\n  static datetimeCond(from: PubKey, when: Date): TimestampCond {\n    return {\n      type: 'timestamp',\n      from,\n      when,\n    };\n  }\n\n  /**\n   * Creates a signature condition\n   */\n  static signatureCond(from: PubKey): SignatureCond {\n    return {\n      type: 'signature',\n      from,\n    };\n  }\n\n  /**\n   * Generates a transaction that transfers lamports once any of the conditions are met\n   */\n  static pay(\n    from: PubKey,\n    program: PubKey,\n    to: PubKey,\n    amount: number,\n    ...conditions: Array<BudgetCond>\n  ): Transaction {\n    const data = Buffer.alloc(1024);\n    let pos = 0;\n    data.writeUInt32LE(0, pos); // NewBudget instruction\n    pos += 4;\n\n    switch (conditions.length) {\n      case 0: {\n        data.writeUInt32LE(0, pos); // BudgetExpr enum = Pay\n        pos += 4;\n\n        {\n          const payment = serializePayment({amount, to});\n          payment.copy(data, pos);\n          pos += payment.length;\n        }\n        const trimmedData = data.slice(0, pos);\n\n        const transaction = SystemController.createNewAccount(\n          from,\n          program,\n          amount,\n          trimmedData.length,\n          this.controllerId,\n        );\n\n        return transaction.add({\n          keys: [\n            {pubkey: to, isSigner: false, isDebitable: false},\n            {pubkey: program, isSigner: false, isDebitable: true},\n          ],\n          controllerId: this.controllerId,\n          data: trimmedData,\n        });\n      }\n      case 1: {\n        data.writeUInt32LE(1, pos); // BudgetExpr enum = After\n        pos += 4;\n        {\n          const condition = conditions[0];\n\n          const conditionData = serializeCond(condition);\n          conditionData.copy(data, pos);\n          pos += conditionData.length;\n\n          data.writeUInt32LE(0, pos); // BudgetExpr enum = Pay\n          pos += 4;\n\n          const paymentData = serializePayment({amount, to});\n          paymentData.copy(data, pos);\n          pos += paymentData.length;\n        }\n        const trimmedData = data.slice(0, pos);\n\n        const transaction = SystemController.createNewAccount(\n          from,\n          program,\n          amount,\n          trimmedData.length,\n          this.controllerId,\n        );\n\n        return transaction.add({\n          keys: [{pubkey: program, isSigner: false, isDebitable: true}],\n          controllerId: this.controllerId,\n          data: trimmedData,\n        });\n      }\n\n      case 2: {\n        data.writeUInt32LE(2, pos); // BudgetExpr enum = Or\n        pos += 4;\n\n        for (let condition of conditions) {\n          const conditionData = serializeCond(condition);\n          conditionData.copy(data, pos);\n          pos += conditionData.length;\n\n          data.writeUInt32LE(0, pos); // BudgetExpr enum = Pay\n          pos += 4;\n\n          const paymentData = serializePayment({amount, to});\n          paymentData.copy(data, pos);\n          pos += paymentData.length;\n        }\n        const trimmedData = data.slice(0, pos);\n\n        const transaction = SystemController.createNewAccount(\n          from,\n          program,\n          amount,\n          trimmedData.length,\n          this.controllerId,\n        );\n\n        return transaction.add({\n          keys: [{pubkey: program, isSigner: false, isDebitable: true}],\n          controllerId: this.controllerId,\n          data: trimmedData,\n        });\n      }\n\n      default:\n        throw new Error(\n          `A maximum of two conditions are support: ${\n            conditions.length\n          } provided`,\n        );\n    }\n  }\n\n  /**\n   * Generates a transaction that transfers lamports once both conditions are met\n   */\n  static payOnAll(\n    from: PubKey,\n    program: PubKey,\n    to: PubKey,\n    amount: number,\n    condition1: BudgetCond,\n    condition2: BudgetCond,\n  ): Transaction {\n    const data = Buffer.alloc(1024);\n    let pos = 0;\n    data.writeUInt32LE(0, pos); // NewBudget instruction\n    pos += 4;\n\n    data.writeUInt32LE(3, pos); // BudgetExpr enum = And\n    pos += 4;\n\n    for (let condition of [condition1, condition2]) {\n      const conditionData = serializeCond(condition);\n      conditionData.copy(data, pos);\n      pos += conditionData.length;\n    }\n\n    data.writeUInt32LE(0, pos); // BudgetExpr enum = Pay\n    pos += 4;\n\n    const paymentData = serializePayment({amount, to});\n    paymentData.copy(data, pos);\n    pos += paymentData.length;\n\n    const trimmedData = data.slice(0, pos);\n\n    const transaction = SystemController.createNewAccount(\n      from,\n      program,\n      amount,\n      trimmedData.length,\n      this.controllerId,\n    );\n\n    return transaction.add({\n      keys: [{pubkey: program, isSigner: false, isDebitable: true}],\n      controllerId: this.controllerId,\n      data: trimmedData,\n    });\n  }\n\n  /**\n   * Generates a transaction that applies a timestamp, which could enable a\n   * pending payment to proceed.\n   */\n  static sealWithDatetime(\n    from: PubKey,\n    program: PubKey,\n    to: PubKey,\n    when: Date,\n  ): Transaction {\n    const whenData = serializeTime(when);\n    const data = Buffer.alloc(4 + whenData.length);\n\n    data.writeUInt32LE(1, 0); // ApplyTimestamp instruction\n    whenData.copy(data, 4);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: from, isSigner: true, isDebitable: true},\n        {pubkey: program, isSigner: false, isDebitable: true},\n        {pubkey: to, isSigner: false, isDebitable: false},\n      ],\n      controllerId: this.controllerId,\n      data,\n    });\n  }\n\n  /**\n   * Generates a transaction that applies a signature, which could enable a\n   * pending payment to proceed.\n   */\n  static sealWithSignature(\n    from: PubKey,\n    program: PubKey,\n    to: PubKey,\n  ): Transaction {\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 2, // ApplySignature instruction\n      },\n      data,\n    );\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: from, isSigner: true, isDebitable: true},\n        {pubkey: program, isSigner: false, isDebitable: true},\n        {pubkey: to, isSigner: false, isDebitable: false},\n      ],\n      controllerId: this.controllerId,\n      data,\n    });\n  }\n}\n","// @flow\n\nimport {BusAccount} from './bus-account';\nimport {PubKey} from './pubkey';\nimport {ControllerLoader} from './controller-loader';\nimport type {Connection} from './connection';\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class NativeControllerLoader {\n  /**\n   * Public key that identifies the NativeControllerLoader\n   */\n  static get controllerId(): PubKey {\n    return new PubKey('NativeLoader1111111111111111111111111111111');\n  }\n\n  /**\n   * Loads a native program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param programName Name of the native program\n   */\n  static load(\n    connection: Connection,\n    payer: BusAccount,\n    programName: string,\n  ): Promise<PubKey> {\n    const bytes = [...Buffer.from(programName)];\n    const program = new BusAccount();\n    return ControllerLoader.load(\n      connection,\n      payer,\n      program,\n      NativeControllerLoader.controllerId,\n      bytes,\n    );\n  }\n}\n","/**\n * @flow\n */\n\nimport assert from 'assert';\nimport BN from 'bn.js';\nimport * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './resize';\nimport {BusAccount} from './bus-account';\nimport {PubKey} from './pubkey';\nimport {SystemController} from './system-controller';\nimport {Transaction, TxOperation} from './transaction-controller';\nimport type {TxnSignature} from './transaction-controller';\nimport {sendAndconfmTx} from './util/send-and-confm-tx';\nimport type {Connection} from './connection';\n\n/**\n * Some amount of tokens\n */\nexport class TokenCount extends BN {\n  /**\n   * Convert to Buffer representation\n   */\n  toBuffer(): Buffer {\n    const a = super.toArray().reverse();\n    const b = Buffer.from(a);\n    if (b.length === 8) {\n      return b;\n    }\n    assert(b.length < 8, 'TokenCount too large');\n\n    const zeroPad = Buffer.alloc(8);\n    b.copy(zeroPad);\n    return zeroPad;\n  }\n\n  /**\n   * Construct a TokenCount from Buffer representation\n   */\n  static fromBuffer(buffer: Buffer): TokenCount {\n    assert(buffer.length === 8, `Invalid buffer length: ${buffer.length}`);\n    return new BN(\n      [...buffer]\n        .reverse()\n        .map(i => `00${i.toString(16)}`.slice(-2))\n        .join(''),\n      16,\n    );\n  }\n}\n\n/**\n * Information about a token\n */\ntype TokenDetail = {|\n  /**\n   * Total supply of tokens\n   */\n  supply: TokenCount,\n\n  /**\n   * Number of base 10 digits to the right of the decimal place\n   */\n  decimals: number,\n\n  /**\n   * Descriptive name of this token\n   */\n  name: string,\n\n  /**\n   * Symbol for this token\n   */\n  symbol: string,\n|};\n\n/**\n * @private\n */\nconst TokenDetailLayout = BufferLayout.struct([\n  Layout.uint64('supply'),\n  BufferLayout.u8('decimals'),\n  Layout.rustString('name'),\n  Layout.rustString('symbol'),\n]);\n\n/**\n * Information about a token account\n */\ntype TokenAccountDetail = {|\n  /**\n   * The kind of token this account holds\n   */\n  token: PubKey,\n\n  /**\n   * Owner of this account\n   */\n  owner: PubKey,\n\n  /**\n   * Amount of tokens this account holds\n   */\n  amount: TokenCount,\n\n  /**\n   * The source account for the tokens.\n   *\n   * If `source` is null, the source is this account.\n   * If `source` is not null, the `amount` of tokens in this account represent\n   * an allowance of tokens that may be transferred from the source account\n   */\n  source: null | PubKey,\n\n  /**\n   * New amount of tokens this delegate account was authorized to spend\n   * If `source` is null, originalAmount is zero\n   */\n  originalAmount: TokenCount,\n|};\n\n/**\n * @private\n */\nconst TokenAccountDetailLayout = BufferLayout.struct([\n  Layout.pubKey('token'),\n  Layout.pubKey('owner'),\n  Layout.uint64('amount'),\n  BufferLayout.u8('sourceOption'),\n  Layout.pubKey('source'),\n  Layout.uint64('originalAmount'),\n]);\n\ntype TokenAndPubKey = [Token, PubKey]; // This type exists to workaround an esdoc parse error\n\n/**\n * The built-in token program\n */\nexport const SYSTEM_TOKEN_CONTROLLER_ID = new PubKey(\n  'Token11111111111111111111111111111111111111',\n);\n\n/**\n * An ERC20-like Token\n */\nexport class Token {\n  /**\n   * @private\n   */\n  connection: Connection;\n\n  /**\n   * The public key identifying this token\n   */\n  token: PubKey;\n\n  /**\n   * Program Identifier for the Token program\n   */\n  controllerId: PubKey;\n\n  /**\n   * Create a Token object attached to the specific token\n   *\n   * @param connection The connection to use\n   * @param token Public key of the token\n   * @param controllerId Optional token controllerId, uses the system controllerId by default\n   */\n  constructor(\n    connection: Connection,\n    token: PubKey,\n    controllerId: PubKey = SYSTEM_TOKEN_CONTROLLER_ID,\n  ) {\n    Object.assign(this, {connection, token, controllerId});\n  }\n\n  /**\n   * Create a new Token\n   *\n   * @param connection The connection to use\n   * @param owner User account that will own the returned Token BusAccount\n   * @param supply Total supply of the new token\n   * @param name Descriptive name of this token\n   * @param symbol Symbol for this token\n   * @param decimals Location of the decimal place\n   * @param controllerId Optional token controllerId, uses the system controllerId by default\n   * @return Token object for the newly minted token, Public key of the Token BusAccount holding the total supply of new tokens\n   */\n  static async createNewToken(\n    connection: Connection,\n    owner: BusAccount,\n    supply: TokenCount,\n    name: string,\n    symbol: string,\n    decimals: number,\n    controllerId: PubKey = SYSTEM_TOKEN_CONTROLLER_ID,\n  ): Promise<TokenAndPubKey> {\n    const tokenAccount = new BusAccount();\n    const token = new Token(connection, tokenAccount.pubKey, controllerId);\n    const initialAccountPublicKey = await token.createNewAccount(owner, null);\n\n    let transaction;\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.uint64('supply'),\n      BufferLayout.u8('decimals'),\n      Layout.rustString('name'),\n      Layout.rustString('symbol'),\n    ]);\n\n    let data = Buffer.alloc(1024);\n    {\n      const encodeLength = dataLayout.encode(\n        {\n          instruction: 0, // NewToken instruction\n          supply: supply.toBuffer(),\n          decimals,\n          name,\n          symbol,\n        },\n        data,\n      );\n      data = data.slice(0, encodeLength);\n    }\n\n    // Allocate memory for the tokenAccount account\n    transaction = SystemController.createNewAccount(\n      owner.pubKey,\n      tokenAccount.pubKey,\n      1,\n      1 + data.length,\n      controllerId,\n    );\n    await sendAndconfmTx(connection, transaction, owner);\n\n    transaction = new Transaction().add({\n      keys: [\n        {pubkey: tokenAccount.pubKey, isSigner: true, isDebitable: false},\n        {pubkey: initialAccountPublicKey, isSigner: false, isDebitable: true},\n      ],\n      controllerId,\n      data,\n    });\n    await sendAndconfmTx(\n      connection,\n      transaction,\n      owner,\n      tokenAccount,\n    );\n\n    return [token, initialAccountPublicKey];\n  }\n\n  /**\n   * Create a new and empty token account.\n   *\n   * This account may then be used as a `transfer()` or `approve()` destination\n   *\n   * @param owner User account that will own the new token account\n   * @param source If not null, create a delegate account that when authorized\n   *               may transfer tokens from this `source` account\n   * @return Public key of the new empty token account\n   */\n  async createNewAccount(\n    owner: BusAccount,\n    source: null | PubKey = null,\n  ): Promise<PubKey> {\n    const tokenAccount = new BusAccount();\n    let transaction;\n\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 1, // NewTokenAccount instruction\n      },\n      data,\n    );\n\n    // Allocate memory for the token\n    transaction = SystemController.createNewAccount(\n      owner.pubKey,\n      tokenAccount.pubKey,\n      1,\n      1 + TokenAccountDetailLayout.span,\n      this.controllerId,\n    );\n    await sendAndconfmTx(this.connection, transaction, owner);\n\n    // Initialize the token account\n    const keys = [\n      {pubkey: tokenAccount.pubKey, isSigner: true, isDebitable: true},\n      {pubkey: owner.pubKey, isSigner: false, isDebitable: false},\n      {pubkey: this.token, isSigner: false, isDebitable: false},\n    ];\n    if (source) {\n      keys.push({pubkey: source, isSigner: false, isDebitable: false});\n    }\n    transaction = new Transaction().add({\n      keys,\n      controllerId: this.controllerId,\n      data,\n    });\n    await sendAndconfmTx(\n      this.connection,\n      transaction,\n      owner,\n      tokenAccount,\n    );\n\n    return tokenAccount.pubKey;\n  }\n\n  /**\n   * Retrieve token information\n   */\n  async fetchTokenDetail(): Promise<TokenDetail> {\n    const fetchAccountDetail = await this.connection.fetchAccountDetail(this.token);\n    if (!fetchAccountDetail.owner.equals(this.controllerId)) {\n      throw new Error(\n        `Invalid token owner: ${JSON.stringify(fetchAccountDetail.owner)}`,\n      );\n    }\n\n    const data = Buffer.from(fetchAccountDetail.data);\n\n    if (data.readUInt8(0) !== 1) {\n      throw new Error(`Invalid token data`);\n    }\n    const fetchTokenDetail = TokenDetailLayout.decode(data, 1);\n    fetchTokenDetail.supply = TokenCount.fromBuffer(fetchTokenDetail.supply);\n    return fetchTokenDetail;\n  }\n\n  /**\n   * Retrieve account information\n   *\n   * @param account Public key of the token account\n   */\n  async fetchAccountDetail(account: PubKey): Promise<TokenAccountDetail> {\n    const fetchAccountDetail = await this.connection.fetchAccountDetail(account);\n    if (!fetchAccountDetail.owner.equals(this.controllerId)) {\n      throw new Error(`Invalid token account owner`);\n    }\n\n    const data = Buffer.from(fetchAccountDetail.data);\n    if (data.readUInt8(0) !== 2) {\n      throw new Error(`Invalid token account data`);\n    }\n    const tokenAccountInfo = TokenAccountDetailLayout.decode(data, 1);\n\n    tokenAccountInfo.token = new PubKey(tokenAccountInfo.token);\n    tokenAccountInfo.owner = new PubKey(tokenAccountInfo.owner);\n    tokenAccountInfo.amount = TokenCount.fromBuffer(tokenAccountInfo.amount);\n    if (tokenAccountInfo.sourceOption === 0) {\n      tokenAccountInfo.source = null;\n      tokenAccountInfo.originalAmount = new TokenCount();\n    } else {\n      tokenAccountInfo.source = new PubKey(tokenAccountInfo.source);\n      tokenAccountInfo.originalAmount = TokenCount.fromBuffer(\n        tokenAccountInfo.originalAmount,\n      );\n    }\n\n    if (!tokenAccountInfo.token.equals(this.token)) {\n      throw new Error(\n        `Invalid token account token: ${JSON.stringify(\n          tokenAccountInfo.token,\n        )} !== ${JSON.stringify(this.token)}`,\n      );\n    }\n    return tokenAccountInfo;\n  }\n\n  /**\n   * Transfer tokens to another account\n   *\n   * @param owner Owner of the source token account\n   * @param source Source token account\n   * @param destination Destination token account\n   * @param amount Number of tokens to transfer\n   */\n  async transfer(\n    owner: BusAccount,\n    source: PubKey,\n    destination: PubKey,\n    amount: number | TokenCount,\n  ): Promise<?TxnSignature> {\n    return await sendAndconfmTx(\n      this.connection,\n      new Transaction().add(\n        await this.transferOperation(\n          owner.pubKey,\n          source,\n          destination,\n          amount,\n        ),\n      ),\n      owner,\n    );\n  }\n\n  /**\n   * Grant a third-party permission to transfer up the specified number of tokens from an account\n   *\n   * @param owner Owner of the source token account\n   * @param account Public key of the token account\n   * @param delegate Token account authorized to perform a transfer tokens from the source account\n   * @param amount Maximum number of tokens the delegate may transfer\n   */\n  async approve(\n    owner: BusAccount,\n    account: PubKey,\n    delegate: PubKey,\n    amount: number | TokenCount,\n  ): Promise<void> {\n    await sendAndconfmTx(\n      this.connection,\n      new Transaction().add(\n        this.approveOperation(owner.pubKey, account, delegate, amount),\n      ),\n      owner,\n    );\n  }\n\n  /**\n   * Remove approval for the transfer of any remaining tokens\n   *\n   * @param owner Owner of the source token account\n   * @param account Public key of the token account\n   * @param delegate Token account to revoke authorization from\n   */\n  revoke(\n    owner: BusAccount,\n    account: PubKey,\n    delegate: PubKey,\n  ): Promise<void> {\n    return this.approve(owner, account, delegate, 0);\n  }\n\n  /**\n   * Assign a new owner to the account\n   *\n   * @param owner Owner of the token account\n   * @param account Public key of the token account\n   * @param newOwner New owner of the token account\n   */\n  async setOwner(\n    owner: BusAccount,\n    account: PubKey,\n    newOwner: PubKey,\n  ): Promise<void> {\n    await sendAndconfmTx(\n      this.connection,\n      new Transaction().add(\n        this.setOwnerOperation(owner.pubKey, account, newOwner),\n      ),\n      owner,\n    );\n  }\n\n  /**\n   * Construct a Transfer instruction\n   *\n   * @param owner Owner of the source token account\n   * @param source Source token account\n   * @param destination Destination token account\n   * @param amount Number of tokens to transfer\n   */\n  async transferOperation(\n    owner: PubKey,\n    source: PubKey,\n    destination: PubKey,\n    amount: number | TokenCount,\n  ): Promise<TxOperation> {\n    const fetchAccountDetail = await this.fetchAccountDetail(source);\n    if (!owner.equals(fetchAccountDetail.owner)) {\n      throw new Error('BusAccount owner mismatch');\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.uint64('amount'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 2, // Transfer instruction\n        amount: new TokenCount(amount).toBuffer(),\n      },\n      data,\n    );\n\n    const keys = [\n      {pubkey: owner, isSigner: true, isDebitable: false},\n      {pubkey: source, isSigner: false, isDebitable: true},\n      {pubkey: destination, isSigner: false, isDebitable: true},\n    ];\n    if (fetchAccountDetail.source) {\n      keys.push({\n        pubkey: fetchAccountDetail.source,\n        isSigner: false,\n        isDebitable: true,\n      });\n    }\n    return new TxOperation({\n      keys,\n      controllerId: this.controllerId,\n      data,\n    });\n  }\n\n  /**\n   * Construct an Approve instruction\n   *\n   * @param owner Owner of the source token account\n   * @param account Public key of the token account\n   * @param delegate Token account authorized to perform a transfer tokens from the source account\n   * @param amount Maximum number of tokens the delegate may transfer\n   */\n  approveOperation(\n    owner: PubKey,\n    account: PubKey,\n    delegate: PubKey,\n    amount: number | TokenCount,\n  ): TxOperation {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.uint64('amount'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 3, // Approve instruction\n        amount: new TokenCount(amount).toBuffer(),\n      },\n      data,\n    );\n\n    return new TxOperation({\n      keys: [\n        {pubkey: owner, isSigner: true, isDebitable: false},\n        {pubkey: account, isSigner: false, isDebitable: true},\n        {pubkey: delegate, isSigner: false, isDebitable: true},\n      ],\n      controllerId: this.controllerId,\n      data,\n    });\n  }\n\n  /**\n   * Construct an Revoke instruction\n   *\n   * @param owner Owner of the source token account\n   * @param account Public key of the token account\n   * @param delegate Token account authorized to perform a transfer tokens from the source account\n   */\n  revokeOperation(\n    owner: PubKey,\n    account: PubKey,\n    delegate: PubKey,\n  ): TxOperation {\n    return this.approveOperation(owner, account, delegate, 0);\n  }\n\n  /**\n   * Construct a SetOwner instruction\n   *\n   * @param owner Owner of the token account\n   * @param account Public key of the token account\n   * @param newOwner New owner of the token account\n   */\n  setOwnerOperation(\n    owner: PubKey,\n    account: PubKey,\n    newOwner: PubKey,\n  ): TxOperation {\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 4, // SetOwner instruction\n      },\n      data,\n    );\n\n    return new TxOperation({\n      keys: [\n        {pubkey: owner, isSigner: true, isDebitable: false},\n        {pubkey: account, isSigner: false, isDebitable: true},\n        {pubkey: newOwner, isSigner: false, isDebitable: true},\n      ],\n      controllerId: this.controllerId,\n      data,\n    });\n  }\n}\n","// @flow\n\nimport {Connection} from '../connection';\nimport {sleep} from './sleep';\nimport type {TxnSignature} from '../transaction-controller';\nimport {DEFAULT_TICKS_PER_SLOT, NUM_TICKS_PER_SEC} from '../timing';\n\n/**\n * Sign, send and confirm a raw transaction\n */\nexport async function sendAndConfmNativeTxn(\n  connection: Connection,\n  rawTransaction: Buffer,\n): Promise<TxnSignature> {\n  const start = Date.now();\n  let signature = await connection.sendNativeTxn(rawTransaction);\n\n  // Wait up to a couple slots for a confirmation\n  let status = null;\n  let statusRetries = 6;\n  for (;;) {\n    status = await connection.fetchSignatureState(signature);\n    if (status) {\n      break;\n    }\n\n    // Sleep for approximately half a slot\n    await sleep((500 * DEFAULT_TICKS_PER_SLOT) / NUM_TICKS_PER_SEC);\n\n    if (--statusRetries <= 0) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Raw Transaction '${signature}' was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds (${JSON.stringify(status)})`,\n      );\n    }\n  }\n\n  if (status && 'Ok' in status) {\n    return signature;\n  }\n\n  throw new Error(\n    `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n  );\n}\n","//@flow\n\nimport {testnetDefaultChannel} from '../../package.json';\n\n/**\n * @private\n */\nconst endpoint = {\n  edge: 'https://api.edge.testnet.solana.com',\n  beta: 'https://api.beta.testnet.solana.com',\n  stable: 'https://api.testnet.solana.com',\n};\n\n/**\n * Retrieves the RPC endpoint URL for the specified testnet release\n * channel\n */\nexport function testnetChannelEndpoint(channel?: string): string {\n  if (!channel) {\n    return endpoint[testnetDefaultChannel];\n  }\n\n  if (endpoint[channel]) {\n    return endpoint[channel];\n  }\n  throw new Error(`Unknown channel: ${channel}`);\n}\n"," /// @flow\nexport {BusAccount} from './bus-account';\nexport {BpfControllerLoader} from './bpfcontroller-loader';\nexport {BudgetController} from './budget-controller';\nexport {Connection} from './connection';\nexport {ControllerLoader} from './controller-loader';\nexport {NativeControllerLoader} from './nativecontroller-loader';\nexport {PubKey} from './pubkey';\nexport {SystemController} from './system-controller';\nexport {Token, TokenCount} from './token-controller';\nexport {Transaction, TxOperation} from './transaction-controller';\nexport {sendAndconfmTx} from './util/send-and-confm-tx';\nexport {\n  sendAndConfmNativeTxn,\n} from './util/send-and-confm-original-tx';\nexport {testnetChannelEndpoint} from './util/testnet';\n"],"names":["PubKey","value","startsWith","_bn","BN","substring","bs58","decode","byteLength","Error","pubKey","eq","encode","toBuffer","b","toArrayLike","Buffer","length","zeroPad","alloc","copy","toBase58","o","BusAccount","privateKey","_keypair","nacl","sign","keyPair","fromSecretKey","publicKey","secretKey","NUM_TICKS_PER_SEC","DEFAULT_TICKS_PER_SLOT","property","BufferLayout","uint64","rustString","rsl","_decode","bind","_encode","buffer","offset","data","chars","toString","str","from","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","push","PACKET_DATA_SIZE","TxOperation","opts","Object","assign","Transaction","signatures","signature","items","forEach","item","operations","concat","recentPackagehash","keys","map","numRequiredSignatures","numCreditOnlySignedAccounts","numCreditOnlyUnsignedAccounts","programIds","instruction","keySignerPair","keyStr","pubkey","includes","isSigner","isDebitable","controllerId","keyCount","shortvec","keyIndicesCount","dataCount","programIdIndex","indexOf","keyIndices","keyObj","dataLength","invariant","keyIndex","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","slice","signDataLayout","Layout","transaction","key","signData","signPartial","partialSigners","accountOrPublicKey","_fetchSignData","index","detached","signer","findIndex","sigpair","equals","signatureCount","transactionLength","wireTransaction","PUBKEY_LENGTH","SIGNATURE_LENGTH","isCreditDebit","i","numKeys","byteArray","accountCount","accounts","account","programIndex","accountIndexCount","accountIndex","sigPubkeyPair","instructionData","j","some","sleep","ms","Promise","resolve","setTimeout","createRpcReq","url","server","jayson","request","callback","options","method","body","headers","fetch","res","text","args","reject","err","response","FetchBalanceRpcResult","struct","jsonrpc","literal","id","error","result","jsonRpcResult","resultDescription","jsonRpcVersion","union","AccountDetailResult","executable","owner","lamports","fetchAccountDetailRpcResult","AccountNoticeResult","subscription","ControllerAccountDetailResult","ControllerAccountNoticeResult","ConfmTxnRpcResult","FetchRoundLeader","GetClusterNodes","list","gossip","tpu","rpc","GetClusterNodes_015","GetEpochVoteAccounts","votePubkey","nodePubkey","stake","commission","FetchSignatureStateRpcResult","Ok","Err","FetchTxnAmountRpcResult","GetTotalSupplyRpcResult","FetchRecentBlockhash","lamportsPerSignature","maxLamportsPerSignature","minLamportsPerSignature","targetLamportsPerSignature","targetSignaturesPerSlot","GetRecentBlockhash_015","ReqDroneRpcResult","SendTxnRpcResult","Connection","endpoint","urlParse","_rpcReq","href","_blockhashInfo","seconds","transactionSignatures","protocol","host","port","String","Number","_rpcWebSock","RpcWebSocketClient","urlFormat","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnErr","_wsOnClose","_wsOnAccountNotice","_wsOnProgramAccountNotification","unsafeRes","message","assert","res_015","console","log","node","undefined","blockhash","feeCalculator","to","amount","signers","Date","getSeconds","_disableBlockhashCaching","attempts","startTime","now","fetchRecentBlockhash","serialize","sendNativeTxn","rawTransaction","_rpcWebSockConnected","_updateSubscriptions","code","accountKeys","_accountChangeSubscriptions","programKeys","_controllerAccountChangeSubscriptions","close","subscriptionId","connect","call","notification","sub","_accountChangeSubscriptionCounter","accountId","fetchAccountDetail","_controllerAccountChangeSubscriptionCounter","sendAndconfmTx","connection","sendRetries","start","sendTxn","status","statusRetries","fetchSignatureState","duration","toFixed","JSON","stringify","Math","random","SystemController","createNewAccount","space","dataLayout","span","add","ControllerLoader","payer","program","chunkSize","array","transactions","all","BpfControllerLoader","elf","load","serializePayment","payment","toData","writeUInt32LE","serializeTime","when","iso","date","pad","number","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","write","serializeCond","condition","type","BudgetController","pos","conditions","trimmedData","conditionData","paymentData","condition1","condition2","whenData","NativeControllerLoader","programName","TokenCount","a","reverse","join","TokenDetailLayout","TokenAccountDetailLayout","SYSTEM_TOKEN_CONTROLLER_ID","Token","token","source","tokenAccount","readUInt8","fetchTokenDetail","supply","fromBuffer","tokenAccountInfo","sourceOption","originalAmount","destination","transferOperation","delegate","approveOperation","approve","newOwner","setOwnerOperation","name","symbol","decimals","initialAccountPublicKey","sendAndConfmNativeTxn","edge","beta","stable","testnetChannelEndpoint","channel","testnetDefaultChannel"],"mappings":"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"}