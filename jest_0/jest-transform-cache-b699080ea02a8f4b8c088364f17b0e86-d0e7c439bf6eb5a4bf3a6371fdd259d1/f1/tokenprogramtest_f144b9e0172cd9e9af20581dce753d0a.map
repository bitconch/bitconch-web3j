{"version":3,"sources":["token-program.test.js"],"names":["jest","setTimeout","mockGetSignatureStatus","result","Ok","mockRpc","push","url","method","error","mockSendTransaction","testToken","initialOwner","initialOwnerTokenAccount","test","connection","Connection","_disableBlockhashCaching","mockRpcEnabled","Token","createNewToken","TokenCount","params","token","toBase58","owner","SYSTEM_TOKEN_CONTROLLER_ID","toBuffer","difs","reputations","data","executable","fetchTokenDetail","expect","supply","toNumber","toBe","decimals","name","symbol","pubKey","fetchAccountDetail","equals","amount","source","originalAmount","destOwner","createNewAccount","dest","transfer","destAccountInfo","delegateOwner","delegate","approve","delegateAccountInfo","Error","revoke","console","log","account1","account1Delegate","account2","rejects","toThrow","newOwner","account","setOwner"],"mappings":"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","sourcesContent":["// @flow\n\nimport {Connection, PubKey, Token, TokenCount} from '../src';\nimport {SYSTEM_TOKEN_CONTROLLER_ID} from '../src/token-controller';\nimport {mockRpc, mockRpcEnabled} from './__mocks__/node-fetch';\nimport {url} from './url';\nimport {newAccountWithDif} from './new-account-with-dif';\nimport {mockGetRecentBlockhash} from './mockrpc/get-recent-blockhash';\nimport {sleep} from '../src/util/sleep';\n\n// The default of 5 seconds is too slow for live testing sometimes\njest.setTimeout(60000);\n\nfunction mockGetSignatureStatus(result: Object = {Ok: null}) {\n  mockRpc.push([\n    url,\n    {\n      method: 'getSignatureState',\n    },\n    {\n      error: null,\n      result,\n    },\n  ]);\n}\nfunction mockSendTransaction() {\n  mockRpc.push([\n    url,\n    {\n      method: 'sendTxn',\n    },\n    {\n      error: null,\n      result:\n        '3WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk',\n    },\n  ]);\n}\n\n// A token created by the first test and used by all subsequent tests\nlet testToken: Token;\n\n// Initial owner of the token supply\nlet initialOwner;\nlet initialOwnerTokenAccount: PubKey;\n\ntest('create new token', async () => {\n  const connection = new Connection(url);\n  connection._disableBlockhashCaching = mockRpcEnabled;\n\n  initialOwner = await newAccountWithDif(connection, 1024);\n\n  {\n    // mock SystemController.createNewAccount transaction for Token.createNewToken()\n    mockGetRecentBlockhash();\n    mockSendTransaction();\n    mockGetSignatureStatus();\n\n    // mock Token.createNewAccount() transaction\n    mockSendTransaction();\n    mockGetSignatureStatus(null);\n    mockGetSignatureStatus();\n\n    // mock SystemController.createNewAccount transaction for Token.createNewToken()\n    mockSendTransaction();\n    mockGetSignatureStatus();\n\n    // mock Token.createNewToken() transaction\n    mockSendTransaction();\n    mockGetSignatureStatus(null);\n    mockGetSignatureStatus();\n  }\n\n  [testToken, initialOwnerTokenAccount] = await Token.createNewToken(\n    connection,\n    initialOwner,\n    new TokenCount(10000),\n    'Test token',\n    'TEST',\n    2,\n  );\n\n  {\n    // mock Token.fetchTokenDetail()'s fetchAccountDetail\n    mockRpc.push([\n      url,\n      {\n        method: 'getAccountInfo',\n        params: [testToken.token.toBase58()],\n      },\n      {\n        error: null,\n        result: {\n          owner: [...SYSTEM_TOKEN_CONTROLLER_ID.toBuffer()],\n          difs: 1,\n          reputations: 1,\n          data: [\n            1,\n            16,\n            39,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            2,\n            10,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            84,\n            101,\n            115,\n            116,\n            32,\n            116,\n            111,\n            107,\n            101,\n            110,\n            4,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            84,\n            69,\n            83,\n            84,\n          ],\n          executable: false,\n        },\n      },\n    ]);\n  }\n\n  const fetchTokenDetail = await testToken.fetchTokenDetail();\n\n  expect(fetchTokenDetail.supply.toNumber()).toBe(10000);\n  expect(fetchTokenDetail.decimals).toBe(2);\n  expect(fetchTokenDetail.name).toBe('Test token');\n  expect(fetchTokenDetail.symbol).toBe('TEST');\n\n  {\n    // mock Token.fetchAccountDetail()'s fetchAccountDetail\n    mockRpc.push([\n      url,\n      {\n        method: 'getAccountInfo',\n        params: [initialOwnerTokenAccount.toBase58()],\n      },\n      {\n        error: null,\n        result: {\n          owner: [...SYSTEM_TOKEN_CONTROLLER_ID.toBuffer()],\n          difs: 1,\n          reputations: 1,\n          data: [\n            2,\n            ...testToken.token.toBuffer(),\n            ...initialOwner.pubKey.toBuffer(),\n            16,\n            39,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n          ],\n          executable: false,\n        },\n      },\n    ]);\n  }\n\n  const fetchAccountDetail = await testToken.fetchAccountDetail(initialOwnerTokenAccount);\n\n  expect(fetchAccountDetail.token.equals(testToken.token)).toBe(true);\n  expect(fetchAccountDetail.owner.equals(initialOwner.pubKey)).toBe(true);\n  expect(fetchAccountDetail.amount.toNumber()).toBe(10000);\n  expect(fetchAccountDetail.source).toBe(null);\n  expect(fetchAccountDetail.originalAmount.toNumber()).toBe(0);\n});\n\ntest('create new token account', async () => {\n  const connection = new Connection(url);\n  connection._disableBlockhashCaching = mockRpcEnabled;\n  const destOwner = await newAccountWithDif(connection);\n\n  {\n    // mock SystemController.createNewAccount transaction for Token.createNewAccount()\n    mockSendTransaction();\n    mockGetSignatureStatus();\n\n    // mock Token.createNewAccount() transaction\n    mockSendTransaction();\n    mockGetSignatureStatus();\n  }\n\n  const dest = await testToken.createNewAccount(destOwner);\n  {\n    // mock Token.fetchAccountDetail()'s fetchAccountDetail\n    mockRpc.push([\n      url,\n      {\n        method: 'getAccountInfo',\n        params: [dest.toBase58()],\n      },\n      {\n        error: null,\n        result: {\n          owner: [...SYSTEM_TOKEN_CONTROLLER_ID.toBuffer()],\n          difs: 1,\n          reputations: 1,\n          data: [\n            2,\n            ...testToken.token.toBuffer(),\n            ...destOwner.pubKey.toBuffer(),\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n          ],\n          executable: false,\n        },\n      },\n    ]);\n  }\n\n  const fetchAccountDetail = await testToken.fetchAccountDetail(dest);\n\n  expect(fetchAccountDetail.token.equals(testToken.token)).toBe(true);\n  expect(fetchAccountDetail.owner.equals(destOwner.pubKey)).toBe(true);\n  expect(fetchAccountDetail.amount.toNumber()).toBe(0);\n  expect(fetchAccountDetail.source).toBe(null);\n});\n\ntest('transfer', async () => {\n  const connection = new Connection(url);\n  connection._disableBlockhashCaching = mockRpcEnabled;\n  const destOwner = await newAccountWithDif(connection);\n\n  {\n    // mock SystemController.createNewAccount transaction for Token.createNewAccount()\n    mockSendTransaction();\n    mockGetSignatureStatus();\n\n    // mock Token.createNewAccount() transaction\n    mockSendTransaction();\n    mockGetSignatureStatus();\n  }\n\n  const dest = await testToken.createNewAccount(destOwner);\n\n  {\n    // mock Token.transfer()'s fetchAccountDetail\n    mockRpc.push([\n      url,\n      {\n        method: 'getAccountInfo',\n        params: [initialOwnerTokenAccount.toBase58()],\n      },\n      {\n        error: null,\n        result: {\n          owner: [...SYSTEM_TOKEN_CONTROLLER_ID.toBuffer()],\n          difs: 1,\n          reputations: 1,\n          data: [\n            2,\n            ...testToken.token.toBuffer(),\n            ...initialOwner.pubKey.toBuffer(),\n            123,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n          ],\n          executable: false,\n        },\n      },\n    ]);\n\n    // mock Token.transfer() transaction\n    mockSendTransaction();\n    mockGetSignatureStatus();\n  }\n\n  await testToken.transfer(initialOwner, initialOwnerTokenAccount, dest, 123);\n\n  {\n    // mock Token.fetchAccountDetail()'s fetchAccountDetail\n    mockRpc.push([\n      url,\n      {\n        method: 'getAccountInfo',\n        params: [dest.toBase58()],\n      },\n      {\n        error: null,\n        result: {\n          owner: [...SYSTEM_TOKEN_CONTROLLER_ID.toBuffer()],\n          difs: 1,\n          reputations: 1,\n          data: [\n            2,\n            ...testToken.token.toBuffer(),\n            ...dest.toBuffer(),\n            123,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n          ],\n          executable: false,\n        },\n      },\n    ]);\n  }\n\n  await sleep(500);\n\n  const destAccountInfo = await testToken.fetchAccountDetail(dest);\n  expect(destAccountInfo.amount.toNumber()).toBe(123);\n});\n\ntest('approve/revoke', async () => {\n  const connection = new Connection(url);\n  connection._disableBlockhashCaching = mockRpcEnabled;\n  const delegateOwner = await newAccountWithDif(connection);\n\n  {\n    // mock SystemController.createNewAccount transaction for Token.createNewAccount()\n    mockSendTransaction();\n    mockGetSignatureStatus();\n\n    // mock Token.createNewAccount() transaction\n    mockSendTransaction();\n    mockGetSignatureStatus();\n  }\n  const delegate = await testToken.createNewAccount(\n    delegateOwner,\n    initialOwnerTokenAccount,\n  );\n\n  {\n    // mock Token.approve() transaction\n    mockSendTransaction();\n    mockGetSignatureStatus();\n  }\n\n  await testToken.approve(\n    initialOwner,\n    initialOwnerTokenAccount,\n    delegate,\n    456,\n  );\n\n  {\n    // mock Token.fetchAccountDetail()'s fetchAccountDetail\n    mockRpc.push([\n      url,\n      {\n        method: 'getAccountInfo',\n        params: [delegate.toBase58()],\n      },\n      {\n        error: null,\n        result: {\n          owner: [...SYSTEM_TOKEN_CONTROLLER_ID.toBuffer()],\n          difs: 1,\n          reputations: 1,\n          data: [\n            2,\n            ...testToken.token.toBuffer(),\n            ...delegate.toBuffer(),\n            200,\n            1,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1,\n            ...initialOwnerTokenAccount.toBuffer(),\n            200,\n            1,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n          ],\n          executable: false,\n        },\n      },\n    ]);\n  }\n\n  let delegateAccountInfo = await testToken.fetchAccountDetail(delegate);\n\n  expect(delegateAccountInfo.amount.toNumber()).toBe(456);\n  expect(delegateAccountInfo.originalAmount.toNumber()).toBe(456);\n  if (delegateAccountInfo.source === null) {\n    throw new Error('source should not be null');\n  } else {\n    expect(delegateAccountInfo.source.equals(initialOwnerTokenAccount)).toBe(\n      true,\n    );\n  }\n\n  {\n    // mock Token.revoke() transaction\n    mockSendTransaction();\n    mockGetSignatureStatus();\n  }\n\n  await testToken.revoke(initialOwner, initialOwnerTokenAccount, delegate);\n\n  {\n    // mock Token.fetchAccountDetail()'s fetchAccountDetail\n    mockRpc.push([\n      url,\n      {\n        method: 'getAccountInfo',\n        params: [delegate.toBase58()],\n      },\n      {\n        error: null,\n        result: {\n          owner: [...SYSTEM_TOKEN_CONTROLLER_ID.toBuffer()],\n          difs: 1,\n          reputations: 1,\n          data: [\n            2,\n            ...testToken.token.toBuffer(),\n            ...delegate.toBuffer(),\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1,\n            ...initialOwnerTokenAccount.toBuffer(),\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n          ],\n          executable: false,\n        },\n      },\n    ]);\n  }\n\n  delegateAccountInfo = await testToken.fetchAccountDetail(delegate);\n  expect(delegateAccountInfo.amount.toNumber()).toBe(0);\n  expect(delegateAccountInfo.originalAmount.toNumber()).toBe(0);\n  if (delegateAccountInfo.source === null) {\n    throw new Error('source should not be null');\n  } else {\n    expect(delegateAccountInfo.source.equals(initialOwnerTokenAccount)).toBe(\n      true,\n    );\n  }\n});\n\ntest('invalid approve', async () => {\n  if (mockRpcEnabled) {\n    console.log('non-live test skipped');\n    return;\n  }\n\n  const connection = new Connection(url);\n  const owner = await newAccountWithDif(connection);\n\n  const account1 = await testToken.createNewAccount(owner);\n  const account1Delegate = await testToken.createNewAccount(owner, account1);\n  const account2 = await testToken.createNewAccount(owner);\n\n  // account2 is not a delegate account of account1\n  await expect(\n    testToken.approve(owner, account1, account2, 123),\n  ).rejects.toThrow();\n\n  // account1Delegate is not a delegate account of account2\n  await expect(\n    testToken.approve(owner, account2, account1Delegate, 123),\n  ).rejects.toThrow();\n});\n\ntest('fail on approve overspend', async () => {\n  if (mockRpcEnabled) {\n    console.log('non-live test skipped');\n    return;\n  }\n\n  const connection = new Connection(url);\n  const owner = await newAccountWithDif(connection);\n\n  const account1 = await testToken.createNewAccount(owner);\n  const account1Delegate = await testToken.createNewAccount(owner, account1);\n  const account2 = await testToken.createNewAccount(owner);\n\n  await testToken.transfer(\n    initialOwner,\n    initialOwnerTokenAccount,\n    account1,\n    10,\n  );\n\n  await testToken.approve(owner, account1, account1Delegate, 2);\n\n  let delegateAccountInfo = await testToken.fetchAccountDetail(account1Delegate);\n  expect(delegateAccountInfo.amount.toNumber()).toBe(2);\n  expect(delegateAccountInfo.originalAmount.toNumber()).toBe(2);\n\n  await testToken.transfer(owner, account1Delegate, account2, 1);\n\n  delegateAccountInfo = await testToken.fetchAccountDetail(account1Delegate);\n  expect(delegateAccountInfo.amount.toNumber()).toBe(1);\n  expect(delegateAccountInfo.originalAmount.toNumber()).toBe(2);\n\n  await testToken.transfer(owner, account1Delegate, account2, 1);\n\n  delegateAccountInfo = await testToken.fetchAccountDetail(account1Delegate);\n  expect(delegateAccountInfo.amount.toNumber()).toBe(0);\n  expect(delegateAccountInfo.originalAmount.toNumber()).toBe(2);\n\n  await expect(\n    testToken.transfer(owner, account1Delegate, account2, 1),\n  ).rejects.toThrow();\n});\n\ntest('set owner', async () => {\n  if (mockRpcEnabled) {\n    console.log('non-live test skipped');\n    return;\n  }\n\n  const connection = new Connection(url);\n  const owner = await newAccountWithDif(connection);\n  const newOwner = await newAccountWithDif(connection);\n\n  const account = await testToken.createNewAccount(owner);\n\n  await testToken.setOwner(owner, account, newOwner.pubKey);\n  await expect(\n    testToken.setOwner(owner, account, newOwner.pubKey),\n  ).rejects.toThrow();\n\n  await testToken.setOwner(newOwner, account, owner.pubKey);\n});\n"]}