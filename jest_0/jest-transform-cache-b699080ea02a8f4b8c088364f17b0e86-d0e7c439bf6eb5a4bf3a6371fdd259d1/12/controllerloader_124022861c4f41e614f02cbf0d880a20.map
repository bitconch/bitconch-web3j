{"version":3,"sources":["controller-loader.js"],"names":["ControllerLoader","connection","payer","controller","controllerId","data","transaction","SystemController","createNewAccount","pubKey","length","dataLayout","BufferLayout","struct","u32","seq","u8","offset","chunkSize","array","transactions","bytes","slice","Buffer","alloc","encode","instruction","Transaction","add","keys","pubkey","isSigner","isDebitable","push","NUM_TICKS_PER_SEC","Promise","all","span","PACKET_DATA_SIZE"],"mappings":"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","sourcesContent":["// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {BusAccount} from './bus-account';\nimport {PubKey} from './pubkey';\nimport {NUM_TICKS_PER_SEC} from './timing';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction-controller';\nimport {sendAndconfmTx} from './util/send-and-confm-tx';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport {SystemController} from './system-controller';\n\n/**\n * Controller loader interface\n */\nexport class ControllerLoader {\n  /**\n   * Amount of controller data placed in each load Transaction\n   */\n  static get chunkSize(): number {\n    // Keep controller chunks under PACKET_DATA_SIZE, leaving enough room for the\n    // rest of the Transaction fields\n    //\n    // TODO: replace 300 with a proper constant for the size of the other\n    // Transaction fields\n    return PACKET_DATA_SIZE - 300;\n  }\n\n  /**\n   * Loads a generic controller\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the controller\n   * @param controller BusAccount to load the controller into\n   * @param controllerId Public key that identifies the loader\n   * @param data controller octets\n   */\n  static async load(\n    connection: Connection,\n    payer: BusAccount,\n    controller: BusAccount,\n    controllerId: PubKey,\n    data: Array<number>,\n  ): Promise<PubKey> {\n    {\n      const transaction = SystemController.createNewAccount(\n        payer.pubKey,\n        controller.pubKey,\n        1,\n        1,\n        data.length,\n        controllerId,\n      );\n      await sendAndconfmTx(connection, transaction, payer);\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = ControllerLoader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: controller.pubKey, isSigner: true, isDebitable: true}],\n        controllerId,\n        data,\n      });\n      transactions.push(\n        sendAndconfmTx(connection, transaction, payer, controller),\n      );\n\n      // Delay ~1 tick between write transactions in an attempt to reduce AccountInUse errors\n      // since all the write transactions modify the same controller account\n      await sleep(1000 / NUM_TICKS_PER_SEC);\n\n      // Run up to 8 Loads in parallel to prevent too many parallel transactions from\n      // getting rejected with AccountInUse.\n      //\n      // TODO: 8 was selected empirically and should probably be revisited\n      if (transactions.length === 8) {\n        await Promise.all(transactions);\n        transactions = [];\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with controller data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: controller.pubKey, isSigner: true, isDebitable: true}],\n        controllerId,\n        data,\n      });\n      await sendAndconfmTx(connection, transaction, payer, controller);\n    }\n    return controller.pubKey;\n  }\n}\n"]}