08f8d9f8e83466bffae4ebc00e0181c1
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Transaction = exports.TxOperation = exports.PACKET_DATA_SIZE = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _assert = _interopRequireDefault(require("assert"));

var BufferLayout = _interopRequireWildcard(require("buffer-layout"));

var _tweetnacl = _interopRequireDefault(require("tweetnacl"));

var _bs = _interopRequireDefault(require("bs58"));

var Layout = _interopRequireWildcard(require("./resize"));

var _pubkey = require("./pubkey");

var _busAccount = require("./bus-account");

var shortvec = _interopRequireWildcard(require("./util/shortvec-encoding"));

/**
 * Maximum over-the-wire size of a Transaction
 *
 * 1280 is IPv6 minimum MTU
 * 40 bytes is the size of the IPv6 header
 * 8 bytes is the size of the fragment header
 */
var PACKET_DATA_SIZE = 1280 - 40 - 8;
/**
 * List of TxOperation object fields that may be initialized at construction
 *
 * @typedef {Object} TxInstructionControlFields
 * @property {?Array<PubKey>} keys
 * @property {?PubKey} controllerId
 * @property {?Buffer} data
 */

exports.PACKET_DATA_SIZE = PACKET_DATA_SIZE;

/**
 * Transaction Instruction class
 */
var TxOperation =
/**
 * Public keys to include in this transaction
 * Boolean represents whether this pubkey needs to sign the transaction
 */

/**
 * Program Id to execute
 */

/**
 * Program input
 */
function TxOperation(opts) {
  (0, _classCallCheck2["default"])(this, TxOperation);
  (0, _defineProperty2["default"])(this, "keys", []);
  (0, _defineProperty2["default"])(this, "controllerId", void 0);
  (0, _defineProperty2["default"])(this, "data", Buffer.alloc(0));
  opts && Object.assign(this, opts);
};
/**
 * @private
 */


exports.TxOperation = TxOperation;

/**
 * Transaction class
 */
var Transaction =
/*#__PURE__*/
function () {
  (0, _createClass2["default"])(Transaction, [{
    key: "signature",

    /**
     * Signatures for the transaction.  Typically created by invoking the
     * `sign()` method
     */

    /**
     * The first (payer) Transaction signature
     */
    get: function get() {
      if (this.signatures.length > 0) {
        return this.signatures[0].signature;
      }

      return null;
    }
    /**
     * The operations to atomically execute
     */

  }]);

  /**
   * Construct an empty Transaction
   */
  function Transaction(opts) {
    (0, _classCallCheck2["default"])(this, Transaction);
    (0, _defineProperty2["default"])(this, "signatures", []);
    (0, _defineProperty2["default"])(this, "operations", []);
    (0, _defineProperty2["default"])(this, "recentPackagehash", void 0);
    opts && Object.assign(this, opts);
  }
  /**
   * Add one or more operations to this Transaction
   */


  (0, _createClass2["default"])(Transaction, [{
    key: "add",
    value: function add() {
      var _this = this;

      for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {
        items[_key] = arguments[_key];
      }

      if (items.length === 0) {
        throw new Error('No operations');
      }

      items.forEach(function (item) {
        if (item instanceof Transaction) {
          _this.operations = _this.operations.concat(item.operations);
        } else if (item instanceof TxOperation) {
          _this.operations.push(item);
        } else {
          _this.operations.push(new TxOperation(item));
        }
      });
      return this;
    }
    /**
     * @private
     */

  }, {
    key: "_fetchSignData",
    value: function _fetchSignData() {
      var recentPackagehash = this.recentPackagehash;

      if (!recentPackagehash) {
        throw new Error('Transaction recentPackagehash required');
      }

      if (this.operations.length < 1) {
        throw new Error('No operations provided');
      }

      var keys = this.signatures.map(function (_ref) {
        var pubKey = _ref.pubKey;
        return pubKey.toString();
      });
      var numRequiredSignatures = 0;
      var numCreditOnlySignedAccounts = 0;
      var numCreditOnlyUnsignedAccounts = 0;
      var programIds = [];
      this.operations.forEach(function (instruction) {
        instruction.keys.forEach(function (keySignerPair) {
          var keyStr = keySignerPair.pubkey.toString();

          if (!keys.includes(keyStr)) {
            if (keySignerPair.isSigner) {
              numRequiredSignatures += 1;

              if (!keySignerPair.isDebitable) {
                numCreditOnlySignedAccounts += 1;
              }
            } else {
              if (!keySignerPair.isDebitable) {
                numCreditOnlyUnsignedAccounts += 1;
              }
            }

            keys.push(keyStr);
          }
        });
        var controllerId = instruction.controllerId.toString();

        if (!programIds.includes(controllerId)) {
          programIds.push(controllerId);
        }
      });
      programIds.forEach(function (controllerId) {
        if (!keys.includes(controllerId)) {
          keys.push(controllerId);
          numCreditOnlyUnsignedAccounts += 1;
        }
      });

      if (numRequiredSignatures > this.signatures.length) {
        throw new Error("Insufficent signatures: expected ".concat(numRequiredSignatures, " but got ").concat(this.signatures.length));
      }

      var keyCount = [];
      shortvec.encodeLength(keyCount, keys.length);
      var operations = this.operations.map(function (instruction) {
        var data = instruction.data,
            controllerId = instruction.controllerId;
        var keyIndicesCount = [];
        shortvec.encodeLength(keyIndicesCount, instruction.keys.length);
        var dataCount = [];
        shortvec.encodeLength(dataCount, instruction.data.length);
        return {
          programIdIndex: keys.indexOf(controllerId.toString()),
          keyIndicesCount: Buffer.from(keyIndicesCount),
          keyIndices: Buffer.from(instruction.keys.map(function (keyObj) {
            return keys.indexOf(keyObj.pubkey.toString());
          })),
          dataLength: Buffer.from(dataCount),
          data: data
        };
      });
      operations.forEach(function (instruction) {
        (0, _assert["default"])(instruction.programIdIndex >= 0);
        instruction.keyIndices.forEach(function (keyIndex) {
          return (0, _assert["default"])(keyIndex >= 0);
        });
      });
      var instructionCount = [];
      shortvec.encodeLength(instructionCount, operations.length);
      var instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);
      Buffer.from(instructionCount).copy(instructionBuffer);
      var instructionBufferLength = instructionCount.length;
      operations.forEach(function (instruction) {
        var instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);
        var length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);
        instructionBufferLength += length;
      });
      instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);
      var signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numCreditOnlySignedAccounts'), BufferLayout.blob(1, 'numCreditOnlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(Layout.pubKey('key'), keys.length, 'keys'), Layout.pubKey('recentPackagehash')]);
      var transaction = {
        numRequiredSignatures: Buffer.from([this.signatures.length]),
        numCreditOnlySignedAccounts: Buffer.from([numCreditOnlySignedAccounts]),
        numCreditOnlyUnsignedAccounts: Buffer.from([numCreditOnlyUnsignedAccounts]),
        keyCount: Buffer.from(keyCount),
        keys: keys.map(function (key) {
          return new _pubkey.PubKey(key).toBuffer();
        }),
        recentPackagehash: Buffer.from(_bs["default"].decode(recentPackagehash))
      };
      var signData = Buffer.alloc(2048);
      var length = signDataLayout.encode(transaction, signData);
      instructionBuffer.copy(signData, length);
      signData = signData.slice(0, length + instructionBuffer.length);
      return signData;
    }
    /**
     * Sign the Transaction with the specified accounts.  Multiple signatures may
     * be applied to a Transaction. The first signature is considered "primary"
     * and is used when testing for Transaction confirmation.
     *
     * Transaction fields should not be modified after the first call to `sign`,
     * as doing so may invalidate the signature and cause the Transaction to be
     * rejected.
     *
     * The Transaction must be assigned a valid `recentPackagehash` before invoking this method
     */

  }, {
    key: "sign",
    value: function sign() {
      this.signPartial.apply(this, arguments);
    }
    /**
     * Partially sign a Transaction with the specified accounts.  The `BusAccount`
     * inputs will be used to sign the Transaction immediately, while any
     * `PubKey` inputs will be referenced in the signed Transaction but need to
     * be filled in later by calling `addSigner()` with the matching `BusAccount`.
     *
     * All the caveats from the `sign` method apply to `signPartial`
     */

  }, {
    key: "signPartial",
    value: function signPartial() {
      for (var _len2 = arguments.length, partialSigners = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        partialSigners[_key2] = arguments[_key2];
      }

      if (partialSigners.length === 0) {
        throw new Error('No signers');
      }

      var signatures = partialSigners.map(function (accountOrPublicKey) {
        var pubKey = accountOrPublicKey instanceof _busAccount.BusAccount ? accountOrPublicKey.pubKey : accountOrPublicKey;
        return {
          signature: null,
          pubKey: pubKey
        };
      });
      this.signatures = signatures;

      var signData = this._fetchSignData();

      partialSigners.forEach(function (accountOrPublicKey, index) {
        if (accountOrPublicKey instanceof _pubkey.PubKey) {
          return;
        }

        var signature = _tweetnacl["default"].sign.detached(signData, accountOrPublicKey.privateKey);

        (0, _assert["default"])(signature.length === 64);
        signatures[index].signature = Buffer.from(signature);
      });
    }
    /**
     * Fill in a signature for a partially signed Transaction.  The `signer` must
     * be the corresponding `BusAccount` for a `PubKey` that was previously provided to
     * `signPartial`
     */

  }, {
    key: "addSigner",
    value: function addSigner(signer) {
      var index = this.signatures.findIndex(function (sigpair) {
        return signer.pubKey.equals(sigpair.pubKey);
      });

      if (index < 0) {
        throw new Error("Unknown signer: ".concat(signer.pubKey.toString()));
      }

      var signData = this._fetchSignData();

      var signature = _tweetnacl["default"].sign.detached(signData, signer.privateKey);

      (0, _assert["default"])(signature.length === 64);
      this.signatures[index].signature = Buffer.from(signature);
    }
    /**
     * Serialize the Transaction in the wire format.
     *
     * The Transaction must have a valid `signature` before invoking this method
     */

  }, {
    key: "serialize",
    value: function serialize() {
      var signatures = this.signatures;

      if (!signatures) {
        throw new Error('Transaction has not been signed');
      }

      var signData = this._fetchSignData();

      var signatureCount = [];
      shortvec.encodeLength(signatureCount, signatures.length);
      var transactionLength = signatureCount.length + signatures.length * 64 + signData.length;
      var wireTransaction = Buffer.alloc(transactionLength);
      (0, _assert["default"])(signatures.length < 256);
      Buffer.from(signatureCount).copy(wireTransaction, 0);
      signatures.forEach(function (_ref2, index) {
        var signature = _ref2.signature;
        (0, _assert["default"])(signature !== null, "null signature");
        (0, _assert["default"])(signature.length === 64, "signature has invalid length");
        Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);
      });
      signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);
      (0, _assert["default"])(wireTransaction.length <= PACKET_DATA_SIZE, "Transaction too large: ".concat(wireTransaction.length, " > ").concat(PACKET_DATA_SIZE));
      return wireTransaction;
    }
    /**
     * Deprecated method
     * @private
     */

  }, {
    key: "keys",
    get: function get() {
      (0, _assert["default"])(this.operations.length === 1);
      return this.operations[0].keys.map(function (keyObj) {
        return keyObj.pubkey;
      });
    }
    /**
     * Deprecated method
     * @private
     */

  }, {
    key: "controllerId",
    get: function get() {
      (0, _assert["default"])(this.operations.length === 1);
      return this.operations[0].controllerId;
    }
    /**
     * Deprecated method
     * @private
     */

  }, {
    key: "data",
    get: function get() {
      (0, _assert["default"])(this.operations.length === 1);
      return this.operations[0].data;
    }
    /**
     * Parse a wire transaction into a Transaction object.
     */

  }], [{
    key: "from",
    value: function from(buffer) {
      var PUBKEY_LENGTH = 32;
      var SIGNATURE_LENGTH = 64;

      function isCreditDebit(i, numRequiredSignatures, numCreditOnlySignedAccounts, numCreditOnlyUnsignedAccounts, numKeys) {
        return i < numRequiredSignatures - numCreditOnlySignedAccounts || i >= numRequiredSignatures && i < numKeys - numCreditOnlyUnsignedAccounts;
      }

      var transaction = new Transaction(); // Slice up wire data

      var byteArray = (0, _toConsumableArray2["default"])(buffer);
      var signatureCount = shortvec.decodeLength(byteArray);
      var signatures = [];

      for (var i = 0; i < signatureCount; i++) {
        var signature = byteArray.slice(0, SIGNATURE_LENGTH);
        byteArray = byteArray.slice(SIGNATURE_LENGTH);
        signatures.push(signature);
      }

      var numRequiredSignatures = byteArray.shift(); // byteArray = byteArray.slice(1); // Skip numRequiredSignatures byte

      var numCreditOnlySignedAccounts = byteArray.shift(); // byteArray = byteArray.slice(1); // Skip numCreditOnlySignedAccounts byte

      var numCreditOnlyUnsignedAccounts = byteArray.shift(); // byteArray = byteArray.slice(1); // Skip numCreditOnlyUnsignedAccounts byte

      var accountCount = shortvec.decodeLength(byteArray);
      var accounts = [];

      for (var _i = 0; _i < accountCount; _i++) {
        var account = byteArray.slice(0, PUBKEY_LENGTH);
        byteArray = byteArray.slice(PUBKEY_LENGTH);
        accounts.push(account);
      }

      var recentPackagehash = byteArray.slice(0, PUBKEY_LENGTH);
      byteArray = byteArray.slice(PUBKEY_LENGTH);
      var instructionCount = shortvec.decodeLength(byteArray);
      var operations = [];

      for (var _i2 = 0; _i2 < instructionCount; _i2++) {
        var instruction = {};
        instruction.programIndex = byteArray.shift();
        var accountIndexCount = shortvec.decodeLength(byteArray);
        instruction.accountIndex = byteArray.slice(0, accountIndexCount);
        byteArray = byteArray.slice(accountIndexCount);
        var dataLength = shortvec.decodeLength(byteArray);
        instruction.data = byteArray.slice(0, dataLength);
        byteArray = byteArray.slice(dataLength);
        operations.push(instruction);
      } // Populate Transaction object


      transaction.recentPackagehash = new _pubkey.PubKey(recentPackagehash).toBase58();

      for (var _i3 = 0; _i3 < signatureCount; _i3++) {
        var sigPubkeyPair = {
          signature: Buffer.from(signatures[_i3]),
          pubKey: new _pubkey.PubKey(accounts[_i3])
        };
        transaction.signatures.push(sigPubkeyPair);
      }

      for (var _i4 = 0; _i4 < instructionCount; _i4++) {
        var instructionData = {
          keys: [],
          controllerId: new _pubkey.PubKey(accounts[operations[_i4].programIndex]),
          data: Buffer.from(operations[_i4].data)
        };

        var _loop = function _loop(j) {
          var pubkey = new _pubkey.PubKey(accounts[operations[_i4].accountIndex[j]]);
          instructionData.keys.push({
            pubkey: pubkey,
            isSigner: transaction.signatures.some(function (keyObj) {
              return keyObj.pubKey.toString() === pubkey.toString();
            }),
            isDebitable: isCreditDebit(j, numRequiredSignatures, numCreditOnlySignedAccounts, numCreditOnlyUnsignedAccounts, accounts.length)
          });
        };

        for (var j = 0; j < operations[_i4].accountIndex.length; j++) {
          _loop(j);
        }

        var _instruction = new TxOperation(instructionData);

        transaction.operations.push(_instruction);
      }

      return transaction;
    }
  }]);
  return Transaction;
}();

exports.Transaction = Transaction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,