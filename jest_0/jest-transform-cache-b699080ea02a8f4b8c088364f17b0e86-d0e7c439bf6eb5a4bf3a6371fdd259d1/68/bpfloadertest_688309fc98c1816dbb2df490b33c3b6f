4995cbf3c5d80d51c4fe01e80e9da5bf
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _fs = _interopRequireDefault(require("mz/fs"));

var _src = require("../src");

var _nodeFetch = require("./__mocks__/node-fetch");

var _url = require("./url");

var _newAccountWithDif = require("./new-account-with-dif");

if (!_nodeFetch.mockRpcEnabled) {
  // The default of 5 seconds is too slow for live testing sometimes
  jest.setTimeout(120000);
}

test('load BPF C controller',
/*#__PURE__*/
(0, _asyncToGenerator2["default"])(
/*#__PURE__*/
_regenerator["default"].mark(function _callee() {
  var connection, from, data, controllerId, transaction;
  return _regenerator["default"].wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!_nodeFetch.mockRpcEnabled) {
            _context.next = 3;
            break;
          }

          console.log('non-live test skipped');
          return _context.abrupt("return");

        case 3:
          connection = new _src.Connection(_url.url);
          _context.next = 6;
          return (0, _newAccountWithDif.newAccountWithDif)(connection, 1024);

        case 6:
          from = _context.sent;
          _context.next = 9;
          return _fs["default"].readFile('test/fixtures/noop-c/noop.so');

        case 9:
          data = _context.sent;
          _context.next = 12;
          return _src.BpfControllerLoader.load(connection, from, data);

        case 12:
          controllerId = _context.sent;
          transaction = new _src.Transaction().add({
            keys: [{
              pubkey: from.pubKey,
              isSigner: true,
              isDebitable: true
            }],
            controllerId: controllerId
          });
          _context.next = 16;
          return (0, _src.sendAndconfmTx)(connection, transaction, from);

        case 16:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
})));
test('load BPF Rust controller',
/*#__PURE__*/
(0, _asyncToGenerator2["default"])(
/*#__PURE__*/
_regenerator["default"].mark(function _callee2() {
  var connection, from, data, controllerId, transaction;
  return _regenerator["default"].wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          if (!_nodeFetch.mockRpcEnabled) {
            _context2.next = 3;
            break;
          }

          console.log('non-live test skipped');
          return _context2.abrupt("return");

        case 3:
          connection = new _src.Connection(_url.url);
          _context2.next = 6;
          return (0, _newAccountWithDif.newAccountWithDif)(connection, 100000);

        case 6:
          from = _context2.sent;
          _context2.next = 9;
          return _fs["default"].readFile('test/fixtures/noop-rust/solana_bpf_rust_noop.so');

        case 9:
          data = _context2.sent;
          _context2.next = 12;
          return _src.BpfControllerLoader.load(connection, from, data);

        case 12:
          controllerId = _context2.sent;
          transaction = new _src.Transaction().add({
            keys: [{
              pubkey: from.pubKey,
              isSigner: true,
              isDebitable: true
            }],
            controllerId: controllerId
          });
          _context2.next = 16;
          return (0, _src.sendAndconfmTx)(connection, transaction, from);

        case 16:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2);
})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJwZi1sb2FkZXIudGVzdC5qcyJdLCJuYW1lcyI6WyJtb2NrUnBjRW5hYmxlZCIsImplc3QiLCJzZXRUaW1lb3V0IiwidGVzdCIsImNvbnNvbGUiLCJsb2ciLCJjb25uZWN0aW9uIiwiQ29ubmVjdGlvbiIsInVybCIsImZyb20iLCJmcyIsInJlYWRGaWxlIiwiZGF0YSIsIkJwZkNvbnRyb2xsZXJMb2FkZXIiLCJsb2FkIiwiY29udHJvbGxlcklkIiwidHJhbnNhY3Rpb24iLCJUcmFuc2FjdGlvbiIsImFkZCIsImtleXMiLCJwdWJrZXkiLCJwdWJLZXkiLCJpc1NpZ25lciIsImlzRGViaXRhYmxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUVBOztBQUVBOztBQU1BOztBQUNBOztBQUNBOztBQUVBLElBQUksQ0FBQ0EseUJBQUwsRUFBcUI7QUFDbkI7QUFDQUMsRUFBQUEsSUFBSSxDQUFDQyxVQUFMLENBQWdCLE1BQWhCO0FBQ0Q7O0FBRURDLElBQUksQ0FBQyx1QkFBRDtBQUFBO0FBQUE7QUFBQTtBQUFBLDZCQUEwQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxlQUN4QkgseUJBRHdCO0FBQUE7QUFBQTtBQUFBOztBQUUxQkksVUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksdUJBQVo7QUFGMEI7O0FBQUE7QUFNdEJDLFVBQUFBLFVBTnNCLEdBTVQsSUFBSUMsZUFBSixDQUFlQyxRQUFmLENBTlM7QUFBQTtBQUFBLGlCQU9ULDBDQUFrQkYsVUFBbEIsRUFBOEIsSUFBOUIsQ0FQUzs7QUFBQTtBQU90QkcsVUFBQUEsSUFQc0I7QUFBQTtBQUFBLGlCQVFUQyxlQUFHQyxRQUFILENBQVksOEJBQVosQ0FSUzs7QUFBQTtBQVF0QkMsVUFBQUEsSUFSc0I7QUFBQTtBQUFBLGlCQVNEQyx5QkFBb0JDLElBQXBCLENBQXlCUixVQUF6QixFQUFxQ0csSUFBckMsRUFBMkNHLElBQTNDLENBVEM7O0FBQUE7QUFTdEJHLFVBQUFBLFlBVHNCO0FBVXRCQyxVQUFBQSxXQVZzQixHQVVSLElBQUlDLGdCQUFKLEdBQWtCQyxHQUFsQixDQUFzQjtBQUN4Q0MsWUFBQUEsSUFBSSxFQUFFLENBQUM7QUFBQ0MsY0FBQUEsTUFBTSxFQUFFWCxJQUFJLENBQUNZLE1BQWQ7QUFBc0JDLGNBQUFBLFFBQVEsRUFBRSxJQUFoQztBQUFzQ0MsY0FBQUEsV0FBVyxFQUFFO0FBQW5ELGFBQUQsQ0FEa0M7QUFFeENSLFlBQUFBLFlBQVksRUFBWkE7QUFGd0MsV0FBdEIsQ0FWUTtBQUFBO0FBQUEsaUJBY3RCLHlCQUFlVCxVQUFmLEVBQTJCVSxXQUEzQixFQUF3Q1AsSUFBeEMsQ0Fkc0I7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsQ0FBMUIsR0FBSjtBQWlCQU4sSUFBSSxDQUFDLDBCQUFEO0FBQUE7QUFBQTtBQUFBO0FBQUEsNkJBQTZCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGVBQzNCSCx5QkFEMkI7QUFBQTtBQUFBO0FBQUE7O0FBRTdCSSxVQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSx1QkFBWjtBQUY2Qjs7QUFBQTtBQU16QkMsVUFBQUEsVUFOeUIsR0FNWixJQUFJQyxlQUFKLENBQWVDLFFBQWYsQ0FOWTtBQUFBO0FBQUEsaUJBT1osMENBQWtCRixVQUFsQixFQUE4QixNQUE5QixDQVBZOztBQUFBO0FBT3pCRyxVQUFBQSxJQVB5QjtBQUFBO0FBQUEsaUJBUVpDLGVBQUdDLFFBQUgsQ0FDakIsaURBRGlCLENBUlk7O0FBQUE7QUFRekJDLFVBQUFBLElBUnlCO0FBQUE7QUFBQSxpQkFXSkMseUJBQW9CQyxJQUFwQixDQUF5QlIsVUFBekIsRUFBcUNHLElBQXJDLEVBQTJDRyxJQUEzQyxDQVhJOztBQUFBO0FBV3pCRyxVQUFBQSxZQVh5QjtBQVl6QkMsVUFBQUEsV0FaeUIsR0FZWCxJQUFJQyxnQkFBSixHQUFrQkMsR0FBbEIsQ0FBc0I7QUFDeENDLFlBQUFBLElBQUksRUFBRSxDQUFDO0FBQUNDLGNBQUFBLE1BQU0sRUFBRVgsSUFBSSxDQUFDWSxNQUFkO0FBQXNCQyxjQUFBQSxRQUFRLEVBQUUsSUFBaEM7QUFBc0NDLGNBQUFBLFdBQVcsRUFBRTtBQUFuRCxhQUFELENBRGtDO0FBRXhDUixZQUFBQSxZQUFZLEVBQVpBO0FBRndDLFdBQXRCLENBWlc7QUFBQTtBQUFBLGlCQWdCekIseUJBQWVULFVBQWYsRUFBMkJVLFdBQTNCLEVBQXdDUCxJQUF4QyxDQWhCeUI7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsQ0FBN0IsR0FBSiIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCBmcyBmcm9tICdtei9mcyc7XG5cbmltcG9ydCB7XG4gIENvbm5lY3Rpb24sXG4gIEJwZkNvbnRyb2xsZXJMb2FkZXIsXG4gIFRyYW5zYWN0aW9uLFxuICBzZW5kQW5kY29uZm1UeCxcbn0gZnJvbSAnLi4vc3JjJztcbmltcG9ydCB7bW9ja1JwY0VuYWJsZWR9IGZyb20gJy4vX19tb2Nrc19fL25vZGUtZmV0Y2gnO1xuaW1wb3J0IHt1cmx9IGZyb20gJy4vdXJsJztcbmltcG9ydCB7bmV3QWNjb3VudFdpdGhEaWZ9IGZyb20gJy4vbmV3LWFjY291bnQtd2l0aC1kaWYnO1xuXG5pZiAoIW1vY2tScGNFbmFibGVkKSB7XG4gIC8vIFRoZSBkZWZhdWx0IG9mIDUgc2Vjb25kcyBpcyB0b28gc2xvdyBmb3IgbGl2ZSB0ZXN0aW5nIHNvbWV0aW1lc1xuICBqZXN0LnNldFRpbWVvdXQoMTIwMDAwKTtcbn1cblxudGVzdCgnbG9hZCBCUEYgQyBjb250cm9sbGVyJywgYXN5bmMgKCkgPT4ge1xuICBpZiAobW9ja1JwY0VuYWJsZWQpIHtcbiAgICBjb25zb2xlLmxvZygnbm9uLWxpdmUgdGVzdCBza2lwcGVkJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgY29ubmVjdGlvbiA9IG5ldyBDb25uZWN0aW9uKHVybCk7XG4gIGNvbnN0IGZyb20gPSBhd2FpdCBuZXdBY2NvdW50V2l0aERpZihjb25uZWN0aW9uLCAxMDI0KTtcbiAgY29uc3QgZGF0YSA9IGF3YWl0IGZzLnJlYWRGaWxlKCd0ZXN0L2ZpeHR1cmVzL25vb3AtYy9ub29wLnNvJyk7XG4gIGNvbnN0IGNvbnRyb2xsZXJJZCA9IGF3YWl0IEJwZkNvbnRyb2xsZXJMb2FkZXIubG9hZChjb25uZWN0aW9uLCBmcm9tLCBkYXRhKTtcbiAgY29uc3QgdHJhbnNhY3Rpb24gPSBuZXcgVHJhbnNhY3Rpb24oKS5hZGQoe1xuICAgIGtleXM6IFt7cHVia2V5OiBmcm9tLnB1YktleSwgaXNTaWduZXI6IHRydWUsIGlzRGViaXRhYmxlOiB0cnVlfV0sXG4gICAgY29udHJvbGxlcklkLFxuICB9KTtcbiAgYXdhaXQgc2VuZEFuZGNvbmZtVHgoY29ubmVjdGlvbiwgdHJhbnNhY3Rpb24sIGZyb20pO1xufSk7XG5cbnRlc3QoJ2xvYWQgQlBGIFJ1c3QgY29udHJvbGxlcicsIGFzeW5jICgpID0+IHtcbiAgaWYgKG1vY2tScGNFbmFibGVkKSB7XG4gICAgY29uc29sZS5sb2coJ25vbi1saXZlIHRlc3Qgc2tpcHBlZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGNvbm5lY3Rpb24gPSBuZXcgQ29ubmVjdGlvbih1cmwpO1xuICBjb25zdCBmcm9tID0gYXdhaXQgbmV3QWNjb3VudFdpdGhEaWYoY29ubmVjdGlvbiwgMTAwMDAwKTtcbiAgY29uc3QgZGF0YSA9IGF3YWl0IGZzLnJlYWRGaWxlKFxuICAgICd0ZXN0L2ZpeHR1cmVzL25vb3AtcnVzdC9zb2xhbmFfYnBmX3J1c3Rfbm9vcC5zbycsXG4gICk7XG4gIGNvbnN0IGNvbnRyb2xsZXJJZCA9IGF3YWl0IEJwZkNvbnRyb2xsZXJMb2FkZXIubG9hZChjb25uZWN0aW9uLCBmcm9tLCBkYXRhKTtcbiAgY29uc3QgdHJhbnNhY3Rpb24gPSBuZXcgVHJhbnNhY3Rpb24oKS5hZGQoe1xuICAgIGtleXM6IFt7cHVia2V5OiBmcm9tLnB1YktleSwgaXNTaWduZXI6IHRydWUsIGlzRGViaXRhYmxlOiB0cnVlfV0sXG4gICAgY29udHJvbGxlcklkLFxuICB9KTtcbiAgYXdhaXQgc2VuZEFuZGNvbmZtVHgoY29ubmVjdGlvbiwgdHJhbnNhY3Rpb24sIGZyb20pO1xufSk7XG4iXX0=