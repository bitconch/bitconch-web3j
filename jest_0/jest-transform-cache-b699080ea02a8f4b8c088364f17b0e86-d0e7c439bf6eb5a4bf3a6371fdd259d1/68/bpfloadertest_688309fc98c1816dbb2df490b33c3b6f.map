{"version":3,"sources":["bpf-loader.test.js"],"names":["mockRpcEnabled","jest","setTimeout","test","console","log","connection","Connection","url","from","fs","readFile","data","BpfControllerLoader","load","controllerId","transaction","Transaction","add","keys","pubkey","pubKey","isSigner","isDebitable"],"mappings":";;;;;;;;AAEA;;AAEA;;AAMA;;AACA;;AACA;;AAEA,IAAI,CAACA,yBAAL,EAAqB;AACnB;AACAC,EAAAA,IAAI,CAACC,UAAL,CAAgB,MAAhB;AACD;;AAEDC,IAAI,CAAC,uBAAD;AAAA;AAAA;AAAA;AAAA,6BAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACxBH,yBADwB;AAAA;AAAA;AAAA;;AAE1BI,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AAF0B;;AAAA;AAMtBC,UAAAA,UANsB,GAMT,IAAIC,eAAJ,CAAeC,QAAf,CANS;AAAA;AAAA,iBAOT,0CAAkBF,UAAlB,EAA8B,IAA9B,CAPS;;AAAA;AAOtBG,UAAAA,IAPsB;AAAA;AAAA,iBAQTC,eAAGC,QAAH,CAAY,8BAAZ,CARS;;AAAA;AAQtBC,UAAAA,IARsB;AAAA;AAAA,iBASDC,yBAAoBC,IAApB,CAAyBR,UAAzB,EAAqCG,IAArC,EAA2CG,IAA3C,CATC;;AAAA;AAStBG,UAAAA,YATsB;AAUtBC,UAAAA,WAVsB,GAUR,IAAIC,gBAAJ,GAAkBC,GAAlB,CAAsB;AACxCC,YAAAA,IAAI,EAAE,CAAC;AAACC,cAAAA,MAAM,EAAEX,IAAI,CAACY,MAAd;AAAsBC,cAAAA,QAAQ,EAAE,IAAhC;AAAsCC,cAAAA,WAAW,EAAE;AAAnD,aAAD,CADkC;AAExCR,YAAAA,YAAY,EAAZA;AAFwC,WAAtB,CAVQ;AAAA;AAAA,iBActB,yBAAeT,UAAf,EAA2BU,WAA3B,EAAwCP,IAAxC,CAdsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1B,GAAJ;AAiBAN,IAAI,CAAC,0BAAD;AAAA;AAAA;AAAA;AAAA,6BAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAC3BH,yBAD2B;AAAA;AAAA;AAAA;;AAE7BI,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AAF6B;;AAAA;AAMzBC,UAAAA,UANyB,GAMZ,IAAIC,eAAJ,CAAeC,QAAf,CANY;AAAA;AAAA,iBAOZ,0CAAkBF,UAAlB,EAA8B,MAA9B,CAPY;;AAAA;AAOzBG,UAAAA,IAPyB;AAAA;AAAA,iBAQZC,eAAGC,QAAH,CACjB,iDADiB,CARY;;AAAA;AAQzBC,UAAAA,IARyB;AAAA;AAAA,iBAWJC,yBAAoBC,IAApB,CAAyBR,UAAzB,EAAqCG,IAArC,EAA2CG,IAA3C,CAXI;;AAAA;AAWzBG,UAAAA,YAXyB;AAYzBC,UAAAA,WAZyB,GAYX,IAAIC,gBAAJ,GAAkBC,GAAlB,CAAsB;AACxCC,YAAAA,IAAI,EAAE,CAAC;AAACC,cAAAA,MAAM,EAAEX,IAAI,CAACY,MAAd;AAAsBC,cAAAA,QAAQ,EAAE,IAAhC;AAAsCC,cAAAA,WAAW,EAAE;AAAnD,aAAD,CADkC;AAExCR,YAAAA,YAAY,EAAZA;AAFwC,WAAtB,CAZW;AAAA;AAAA,iBAgBzB,yBAAeT,UAAf,EAA2BU,WAA3B,EAAwCP,IAAxC,CAhByB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA7B,GAAJ","sourcesContent":["// @flow\n\nimport fs from 'mz/fs';\n\nimport {\n  Connection,\n  BpfControllerLoader,\n  Transaction,\n  sendAndconfmTx,\n} from '../src';\nimport {mockRpcEnabled} from './__mocks__/node-fetch';\nimport {url} from './url';\nimport {newAccountWithDif} from './new-account-with-dif';\n\nif (!mockRpcEnabled) {\n  // The default of 5 seconds is too slow for live testing sometimes\n  jest.setTimeout(120000);\n}\n\ntest('load BPF C controller', async () => {\n  if (mockRpcEnabled) {\n    console.log('non-live test skipped');\n    return;\n  }\n\n  const connection = new Connection(url);\n  const from = await newAccountWithDif(connection, 1024);\n  const data = await fs.readFile('test/fixtures/noop-c/noop.so');\n  const controllerId = await BpfControllerLoader.load(connection, from, data);\n  const transaction = new Transaction().add({\n    keys: [{pubkey: from.pubKey, isSigner: true, isDebitable: true}],\n    controllerId,\n  });\n  await sendAndconfmTx(connection, transaction, from);\n});\n\ntest('load BPF Rust controller', async () => {\n  if (mockRpcEnabled) {\n    console.log('non-live test skipped');\n    return;\n  }\n\n  const connection = new Connection(url);\n  const from = await newAccountWithDif(connection, 100000);\n  const data = await fs.readFile(\n    'test/fixtures/noop-rust/solana_bpf_rust_noop.so',\n  );\n  const controllerId = await BpfControllerLoader.load(connection, from, data);\n  const transaction = new Transaction().add({\n    keys: [{pubkey: from.pubKey, isSigner: true, isDebitable: true}],\n    controllerId,\n  });\n  await sendAndconfmTx(connection, transaction, from);\n});\n"]}