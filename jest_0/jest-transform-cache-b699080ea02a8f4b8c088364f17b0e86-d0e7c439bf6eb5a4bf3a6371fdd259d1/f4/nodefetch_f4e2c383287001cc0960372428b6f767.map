{"version":3,"sources":["node-fetch.js"],"names":["mockRpc","mockRpcEnabled","process","env","TEST_LIVE","mockNotice","mock","jest","fn","fetchUrl","fetchOptions","console","log","expect","length","toBeGreaterThanOrEqual","shift","mockUrl","mockRequest","mockResponse","toBe","toMatchObject","method","headers","body","toBeDefined","JSON","parse","Object","assign","jsonrpc","response","id","error","message","result","text","Promise","resolve","stringify"],"mappings":";;;;;;;;;;;AAEA;;AAgBO,IAAMA,OAA6C,GAAG,EAAtD,C,CAEP;AACA;;;AACO,IAAMC,cAAc,GAAG,CAACC,OAAO,CAACC,GAAR,CAAYC,SAApC;;AAEP,IAAIC,UAAU,GAAG,IAAjB,C,CAEA;AACA;;AACA,IAAMC,IAA0B,GAAGC,IAAI,CAACC,EAAL,CAAQ,UAACC,QAAD,EAAWC,YAAX,EAA4B;AACrE,MAAI,CAACT,cAAL,EAAqB;AACnB,QAAII,UAAJ,EAAgB;AACdM,MAAAA,OAAO,CAACC,GAAR,mEAC6DH,QAD7D;AAGAJ,MAAAA,UAAU,GAAG,KAAb;AACD;;AACD,WAAO,2BAAMI,QAAN,EAAgBC,YAAhB,CAAP;AACD;;AAEDG,EAAAA,MAAM,CAACb,OAAO,CAACc,MAAT,CAAN,CAAuBC,sBAAvB,CAA8C,CAA9C;;AAXqE,uBAYxBf,OAAO,CAACgB,KAAR,EAZwB;AAAA;AAAA,MAY9DC,OAZ8D;AAAA,MAYrDC,WAZqD;AAAA,MAYxCC,YAZwC;;AAcrEN,EAAAA,MAAM,CAACJ,QAAD,CAAN,CAAiBW,IAAjB,CAAsBH,OAAtB;AACAJ,EAAAA,MAAM,CAACH,YAAD,CAAN,CAAqBW,aAArB,CAAmC;AACjCC,IAAAA,MAAM,EAAE,MADyB;AAEjCC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAFwB,GAAnC;AAMAV,EAAAA,MAAM,CAACH,YAAY,CAACc,IAAd,CAAN,CAA0BC,WAA1B;AAEA,MAAMD,IAAI,GAAGE,IAAI,CAACC,KAAL,CAAWjB,YAAY,CAACc,IAAxB,CAAb;AACAX,EAAAA,MAAM,CAACW,IAAD,CAAN,CAAaH,aAAb,CACEO,MAAM,CAACC,MAAP,CACE,EADF,EAEE;AACEC,IAAAA,OAAO,EAAE,KADX;AAEER,IAAAA,MAAM,EAAE;AAFV,GAFF,EAMEJ,WANF,CADF;AAWA,MAAMa,QAAQ,GAAGH,MAAM,CAACC,MAAP,CACf,EADe,EAEf;AACEC,IAAAA,OAAO,EAAE,KADX;AAEEE,IAAAA,EAAE,EAAER,IAAI,CAACQ,EAFX;AAGEC,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAE;AADJ,KAHT;AAMEC,IAAAA,MAAM,EAAE;AANV,GAFe,EAUfhB,YAVe,CAAjB;AAYA,SAAO;AACLiB,IAAAA,IAAI,EAAE,gBAAM;AACV,aAAOC,OAAO,CAACC,OAAR,CAAgBZ,IAAI,CAACa,SAAL,CAAeR,QAAf,CAAhB,CAAP;AACD;AAHI,GAAP;AAKD,CApDkC,CAAnC;eAsDezB,I","sourcesContent":["// @flow\n\nimport fetch from 'node-fetch';\n\ntype RpcReq = {\n  method: string,\n  params?: Array<any>,\n};\n\ntype RpcResponseError = {\n  message: string,\n};\ntype RpcResponseResult = any;\ntype RpcResponse = {\n  error: ?RpcResponseError,\n  result: ?RpcResponseResult,\n};\n\nexport const mockRpc: Array<[string, RpcReq, RpcResponse]> = [];\n\n// Define TEST_LIVE in the environment to test against the real full node\n// identified by `url` instead of using the mock\nexport const mockRpcEnabled = !process.env.TEST_LIVE;\n\nlet mockNotice = true;\n\n// Suppress lint: 'JestMockFn' is not defined\n// eslint-disable-next-line no-undef\nconst mock: JestMockFn<any, any> = jest.fn((fetchUrl, fetchOptions) => {\n  if (!mockRpcEnabled) {\n    if (mockNotice) {\n      console.log(\n        `Note: node-fetch mock is disabled, testing live against ${fetchUrl}`,\n      );\n      mockNotice = false;\n    }\n    return fetch(fetchUrl, fetchOptions);\n  }\n\n  expect(mockRpc.length).toBeGreaterThanOrEqual(1);\n  const [mockUrl, mockRequest, mockResponse] = mockRpc.shift();\n\n  expect(fetchUrl).toBe(mockUrl);\n  expect(fetchOptions).toMatchObject({\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  expect(fetchOptions.body).toBeDefined();\n\n  const body = JSON.parse(fetchOptions.body);\n  expect(body).toMatchObject(\n    Object.assign(\n      {},\n      {\n        jsonrpc: '2.0',\n        method: 'invalid',\n      },\n      mockRequest,\n    ),\n  );\n\n  const response = Object.assign(\n    {},\n    {\n      jsonrpc: '2.0',\n      id: body.id,\n      error: {\n        message: 'invalid error message',\n      },\n      result: 'invalid response',\n    },\n    mockResponse,\n  );\n  return {\n    text: () => {\n      return Promise.resolve(JSON.stringify(response));\n    },\n  };\n});\n\nexport default mock;\n"]}