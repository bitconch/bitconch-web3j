{"version":3,"sources":["connection.js"],"names":["createRpcReq","url","server","request","callback","options","method","body","headers","res","text","args","Promise","resolve","reject","err","response","FetchBalanceRpcResult","jsonrpc","struct","literal","id","error","result","jsonRpcResult","resultDescription","jsonRpcVersion","union","AccountDetailResult","executable","owner","difs","data","fetchAccountDetailRpcResult","AccountNoticeResult","subscription","ControllerAccountDetailResult","ControllerAccountNoticeResult","ConfmTxnRpcResult","FetchRoundLeader","GetClusterNodes","list","pubkey","gossip","tpu","rpc","GetClusterNodes_015","GetEpochVoteAccounts","votePubkey","nodePubkey","stake","commission","FetchSignatureStateRpcResult","Ok","Err","FetchTxnAmountRpcResult","GetTotalSupplyRpcResult","FetchRecentBlockhash","difsPerSignature","maxDifsPerSignature","minDifsPerSignature","targetDifsPerSignature","targetSignaturesPerSlot","GetRecentBlockhash_015","ReqDroneRpcResult","SendTxnRpcResult","Connection","endpoint","_rpcReq","href","_blockhashInfo","recentPackagehash","seconds","transactionSignatures","protocol","host","port","String","Number","_rpcWebSock","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","bind","_wsOnErr","_wsOnClose","_wsOnAccountNotice","_wsOnProgramAccountNotification","pubKey","toBase58","unsafeRes","Error","message","PubKey","Buffer","from","signature","res_015","console","log","map","node","undefined","blockhash","feeCalculator","to","amount","transaction","signers","Date","getSeconds","sign","toString","includes","push","_disableBlockhashCaching","attempts","startTime","now","fetchRecentBlockhash","DEFAULT_TICKS_PER_SLOT","NUM_TICKS_PER_SEC","wireTransaction","serialize","sendNativeTxn","rawTransaction","_rpcWebSockConnected","_updateSubscriptions","code","accountKeys","Object","keys","_accountChangeSubscriptions","programKeys","_controllerAccountChangeSubscriptions","length","close","subscriptionId","connect","call","controllerId","notification","sub","_accountChangeSubscriptionCounter","accountId","fetchAccountDetail","_controllerAccountChangeSubscriptionCounter"],"mappings":"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","sourcesContent":["// @flow\n\nimport assert from 'assert';\nimport {parse as urlParse, format as urlFormat} from 'url';\nimport fetch from 'node-fetch';\nimport jayson from 'jayson/lib/client/browser';\nimport {struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\n\nimport {DEFAULT_TICKS_PER_SLOT, NUM_TICKS_PER_SEC} from './timing';\nimport {PubKey} from './pubkey';\nimport {Transaction} from './transaction-controller';\nimport {sleep} from './util/sleep';\nimport type {Blockhash} from './bus-blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {BusAccount} from './bus-account';\nimport type {TxnSignature} from './transaction-controller';\n\ntype RpcReq = (methodName: string, args: Array<any>) => any;\n\n/**\n * Information describing a cluster node\n *\n * @typedef {Object} NodeInfo\n * @property {string} pubkey Identity public key of the node\n * @property {string} gossip Gossip network address for the node\n * @property {string} tpu TPU network address for the node (null if not available)\n * @property {string|null} rpc JSON RPC network address for the node (null if not available)\n */\ntype NodeInfo = {\n  pubkey: string,\n  gossip: string,\n  tpu: string | null,\n  rpc: string | null,\n};\n\n/**\n * Information describing a vote account\n *\n * @typedef {Object} VoteAccountInfo\n * @property {string} votePubkey Public key of the vote account\n * @property {string} nodePubkey Identity public key of the node voting with this account\n * @property {string} stake The stake, in difs, delegated to this vote account\n * @property {string} commission A 32-bit integer used as a fraction (commission/0xFFFFFFFF) for rewards payout\n */\ntype VoteAccountInfo = {\n  votePubkey: string,\n  nodePubkey: string,\n  stake: number,\n  commission: number,\n};\n\nfunction createRpcReq(url): RpcReq {\n  const server = jayson(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    try {\n      const res = await fetch(url, options);\n      const text = await res.text();\n      callback(null, text);\n    } catch (err) {\n      callback(err);\n    }\n  });\n\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      server.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"fetchAccountBalance\" message\n */\nconst FetchBalanceRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: 'number?',\n});\n\n/**\n * @private\n */\nfunction jsonRpcResult(resultDescription: any) {\n  const jsonRpcVersion = struct.literal('2.0');\n  return struct.union([\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'any',\n    }),\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'null?',\n      result: resultDescription,\n    }),\n  ]);\n}\n\n/**\n * @private\n */\nconst AccountDetailResult = struct({\n  executable: 'boolean',\n  owner: 'array',\n  difs: 'number',\n  data: 'array',\n});\n\n/**\n * Expected JSON RPC response for the \"fetchAccountDetail\" message\n */\nconst fetchAccountDetailRpcResult = jsonRpcResult(AccountDetailResult);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNoticeResult = struct({\n  subscription: 'number',\n  result: AccountDetailResult,\n});\n\n/**\n * @private\n */\nconst ControllerAccountDetailResult = struct(['string', AccountDetailResult]);\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ControllerAccountNoticeResult = struct({\n  subscription: 'number',\n  result: ControllerAccountDetailResult,\n});\n\n/**\n * Expected JSON RPC response for the \"confmTxn\" message\n */\nconst ConfmTxnRpcResult = jsonRpcResult('boolean');\n\n/**\n * Expected JSON RPC response for the \"fetchRoundLeader\" message\n */\nconst FetchRoundLeader = jsonRpcResult('string');\n\n/**\n * Expected JSON RPC response for the \"fetchClusterNodes\" message\n */\nconst GetClusterNodes = jsonRpcResult(\n  struct.list([\n    struct({\n      pubkey: 'string',\n      gossip: 'string',\n      tpu: struct.union(['null', 'string']),\n      rpc: struct.union(['null', 'string']),\n    }),\n  ]),\n);\n/**\n * @ignore\n */\nconst GetClusterNodes_015 = jsonRpcResult(\n  struct.list([\n    struct({\n      id: 'string',\n      gossip: 'string',\n      tpu: struct.union(['null', 'string']),\n      rpc: struct.union(['null', 'string']),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochVoteAccounts\" message\n */\nconst GetEpochVoteAccounts = jsonRpcResult(\n  struct.list([\n    struct({\n      votePubkey: 'string',\n      nodePubkey: 'string',\n      stake: 'number',\n      commission: 'number',\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"fetchSignatureState\" message\n */\nconst FetchSignatureStateRpcResult = jsonRpcResult(\n  struct.union([\n    'null',\n    struct.union([struct({Ok: 'null'}), struct({Err: 'object'})]),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"fetchTxnAmount\" message\n */\nconst FetchTxnAmountRpcResult = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getTotalSupply\" message\n */\nconst GetTotalSupplyRpcResult = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"fetchRecentBlockhash\" message\n */\nconst FetchRecentBlockhash = jsonRpcResult([\n  'string',\n  struct({\n    difsPerSignature: 'number',\n    maxDifsPerSignature: 'number',\n    minDifsPerSignature: 'number',\n    targetDifsPerSignature: 'number',\n    targetSignaturesPerSlot: 'number',\n  }),\n]);\n/**\n * @ignore\n */\nconst GetRecentBlockhash_015 = jsonRpcResult([\n  'string',\n  struct({\n    difsPerSignature: 'number',\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"reqDrone\" message\n */\nconst ReqDroneRpcResult = jsonRpcResult('string');\n\n/**\n * Expected JSON RPC response for the \"sendTxn\" message\n */\nconst SendTxnRpcResult = jsonRpcResult('string');\n\n/**\n * Information describing an account\n *\n * @typedef {Object} AccountDetail\n * @property {number} difs Number of difs assigned to the account\n * @property {PubKey} owner Identifier of the program that owns the account\n * @property {?Buffer} data Optional data assigned to the account\n * @property {boolean} executable `true` if this account's data contains a loaded program\n */\ntype AccountDetail = {\n  executable: boolean,\n  owner: PubKey,\n  difs: number,\n  data: Buffer,\n};\n\n/**\n * BusAccount information identified by pubkey\n *\n * @typedef {Object} KeyedAccountDetail\n * @property {PubKey} accountId\n * @property {AccountDetail} fetchAccountDetail\n */\ntype KeyedAccountDetail = {\n  accountId: PubKey,\n  fetchAccountDetail: AccountDetail,\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (fetchAccountDetail: AccountDetail) => void;\n\n/**\n * @private\n */\ntype AccountSubscriptionDetail = {\n  pubKey: string, // PubKey of the account as a base 58 string\n  callback: AccountChangeCallback,\n  subscriptionId: null | number, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ControllerAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountDetail,\n) => void;\n\n/**\n * @private\n */\ntype ControllerAccountSubscriptionDetail = {\n  controllerId: string, // PubKey of the program as a base 58 string\n  callback: ControllerAccountChangeCallback,\n  subscriptionId: null | number, // null when there's no current server subscription id\n};\n\n/**\n * Signature status: Success\n *\n * @typedef {Object} SignaturePass\n */\nexport type SignaturePass = {|\n  Ok: null,\n|};\n\n/**\n * Signature status: TxnErr\n *\n * @typedef {Object} TxnErr\n */\nexport type TxnErr = {|\n  Err: Object,\n|};\n\n/**\n * @ignore\n */\ntype BlockhashAndFeeCalculator = [Blockhash, FeeCalculator]; // This type exists to workaround an esdoc parse error\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  _rpcReq: RpcReq;\n  _rpcWebSock: RpcWebSocketClient;\n  _rpcWebSockConnected: boolean = false;\n\n  _blockhashInfo: {\n    recentPackagehash: Blockhash | null,\n    seconds: number,\n    transactionSignatures: Array<string>,\n  };\n  _disableBlockhashCaching: boolean = false;\n  _accountChangeSubscriptions: {[number]: AccountSubscriptionDetail} = {};\n  _accountChangeSubscriptionCounter: number = 0;\n  _controllerAccountChangeSubscriptions: {\n    [number]: ControllerAccountSubscriptionDetail,\n  } = {};\n  _controllerAccountChangeSubscriptionCounter: number = 0;\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   */\n  constructor(endpoint: string) {\n    let url = urlParse(endpoint);\n\n    this._rpcReq = createRpcReq(url.href);\n    this._blockhashInfo = {\n      recentPackagehash: null,\n      seconds: -1,\n      transactionSignatures: [],\n    };\n\n    url.protocol = url.protocol === 'https:' ? 'wss:' : 'ws:';\n    url.host = '';\n    url.port = String(Number(url.port) + 1);\n    if (url.port === '1') {\n      url.port = url.protocol === 'wss:' ? '8901' : '8900';\n    }\n    this._rpcWebSock = new RpcWebSocketClient(urlFormat(url), {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSock.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSock.on('error', this._wsOnErr.bind(this));\n    this._rpcWebSock.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSock.on(\n      'accountNotification',\n      this._wsOnAccountNotice.bind(this),\n    );\n    this._rpcWebSock.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async fetchAccountBalance(pubKey: PubKey): Promise<number> {\n    const unsafeRes = await this._rpcReq('getDif', [\n      pubKey.toBase58(),\n    ]);\n    const res = FetchBalanceRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async fetchAccountDetail(pubKey: PubKey): Promise<AccountDetail> {\n    const unsafeRes = await this._rpcReq('getAccountInfo', [\n      pubKey.toBase58(),\n    ]);\n    const res = fetchAccountDetailRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n\n    const {result} = res;\n    assert(typeof result !== 'undefined');\n\n    return {\n      executable: result.executable,\n      owner: new PubKey(result.owner),\n      difs: result.difs,\n      data: Buffer.from(result.data),\n    };\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature\n   */\n  async confmTxn(signature: TxnSignature): Promise<boolean> {\n    const unsafeRes = await this._rpcReq('confirmTxn', [signature]);\n    const res = ConfmTxnRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async fetchClusterNodes(): Promise<Array<NodeInfo>> {\n    const unsafeRes = await this._rpcReq('getClusterNodes', []);\n\n    // Legacy v0.15 response.  TODO: Remove in August 2019\n    try {\n      const res_015 = GetClusterNodes_015(unsafeRes);\n      if (res_015.error) {\n        console.log('no', res_015.error);\n        throw new Error(res_015.error.message);\n      }\n      return res_015.result.map(node => {\n        node.pubkey = node.id;\n        node.id = undefined;\n        return node;\n      });\n    } catch (e) {\n      // Not legacy format\n    }\n    // End Legacy v0.15 response\n\n    const res = GetClusterNodes(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getEpochVoteAccounts(): Promise<Array<VoteAccountInfo>> {\n    const unsafeRes = await this._rpcReq('getEpochVoteAccounts', []);\n    const res = GetEpochVoteAccounts(unsafeRes);\n    //const res = unsafeRes;\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async fetchRoundLeader(): Promise<string> {\n    const unsafeRes = await this._rpcReq('getRoundLeader', []);\n    const res = FetchRoundLeader(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async fetchSignatureState(\n    signature: TxnSignature,\n  ): Promise<SignaturePass | TxnErr | null> {\n    const unsafeRes = await this._rpcReq('getSignatureState', [signature]);\n    const res = FetchSignatureStateRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async fetchTxnAmount(): Promise<number> {\n    const unsafeRes = await this._rpcReq('getTxnCnt', []);\n    const res = FetchTxnAmountRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster\n   */\n  async getTotalSupply(): Promise<number> {\n    const unsafeRes = await this._rpcReq('getTotalSupply', []);\n    const res = GetTotalSupplyRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   */\n  async fetchRecentBlockhash(): Promise<BlockhashAndFeeCalculator> {\n    const unsafeRes = await this._rpcReq('getLatestBlockhash', []);\n\n    // Legacy v0.15 response.  TODO: Remove in August 2019\n    try {\n      const res_015 = GetRecentBlockhash_015(unsafeRes);\n      if (res_015.error) {\n        throw new Error(res_015.error.message);\n      }\n      const [blockhash, feeCalculator] = res_015.result;\n      feeCalculator.targetSignaturesPerSlot = 42;\n      feeCalculator.targetDifsPerSignature =\n        feeCalculator.difsPerSignature;\n\n      return [blockhash, feeCalculator];\n    } catch (e) {\n      // Not legacy format\n    }\n    // End Legacy v0.15 response\n\n    const res = FetchRecentBlockhash(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Request an allocation of difs to the specified account\n   */\n  async reqDrone(\n    to: PubKey,\n    amount: number,\n  ): Promise<TxnSignature> {\n    const unsafeRes = await this._rpcReq('requestDif', [\n      to.toBase58(),\n      amount,\n    ]);\n    const res = ReqDroneRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTxn(\n    transaction: Transaction,\n    ...signers: Array<BusAccount>\n  ): Promise<TxnSignature> {\n    for (;;) {\n      // Attempt to use a recent blockhash for up to 30 seconds\n      const seconds = new Date().getSeconds();\n      if (\n        this._blockhashInfo.recentPackagehash != null &&\n        this._blockhashInfo.seconds < seconds + 30\n      ) {\n        transaction.recentPackagehash = this._blockhashInfo.recentPackagehash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        // If the signature of this transaction has not been seen before with the\n        // current recentPackagehash, all done.\n        const signature = transaction.signature.toString();\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          this._blockhashInfo.transactionSignatures.push(signature);\n          if (this._disableBlockhashCaching) {\n            this._blockhashInfo.seconds = -1;\n          }\n          break;\n        }\n      }\n\n      // Fetch a new blockhash\n      let attempts = 0;\n      const startTime = Date.now();\n      for (;;) {\n        const [\n          recentPackagehash,\n          //feeCalculator,\n        ] = await this.fetchRecentBlockhash();\n\n        if (this._blockhashInfo.recentPackagehash != recentPackagehash) {\n          this._blockhashInfo = {\n            recentPackagehash,\n            seconds: new Date().getSeconds(),\n            transactionSignatures: [],\n          };\n          break;\n        }\n        if (attempts === 50) {\n          throw new Error(\n            `Unable to obtain a new blockhash after ${Date.now() -\n              startTime}ms`,\n          );\n        }\n\n        // Sleep for approximately half a slot\n        await sleep((500 * DEFAULT_TICKS_PER_SLOT) / NUM_TICKS_PER_SEC);\n\n        ++attempts;\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendNativeTxn(wireTransaction);\n  }\n\n  /**\n   * @private\n   */\n  async fullnodeExit(): Promise<boolean> {\n    const unsafeRes = await this._rpcReq('fullnodeQuit', []);\n    const res = jsonRpcResult('boolean')(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendNativeTxn(\n    rawTransaction: Buffer,\n  ): Promise<TxnSignature> {\n    const unsafeRes = await this._rpcReq('sendTxn', [\n      [...rawTransaction],\n    ]);\n    const res = SendTxnRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    assert(res.result);\n    return res.result;\n  }\n\n  /**\n   * @private\n   */\n  _wsOnOpen() {\n    this._rpcWebSockConnected = true;\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @private\n   */\n  _wsOnErr(err: Error) {\n    console.log('ws error:', err.message);\n  }\n\n  /**\n   * @private\n   */\n  _wsOnClose(code: number, message: string) {\n    // 1000 means _rpcWebSock.close() was called explicitly\n    if (code !== 1000) {\n      console.log('ws close:', code, message);\n    }\n    this._rpcWebSockConnected = false;\n  }\n\n  /**\n   * @private\n   */\n  async _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._controllerAccountChangeSubscriptions,\n    ).map(Number);\n    if (accountKeys.length === 0 && programKeys.length === 0) {\n      this._rpcWebSock.close();\n      return;\n    }\n\n    if (!this._rpcWebSockConnected) {\n      for (let id of accountKeys) {\n        this._accountChangeSubscriptions[id].subscriptionId = null;\n      }\n      for (let id of programKeys) {\n        this._controllerAccountChangeSubscriptions[id].subscriptionId = null;\n      }\n      this._rpcWebSock.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const {subscriptionId, pubKey} = this._accountChangeSubscriptions[id];\n      if (subscriptionId === null) {\n        try {\n          this._accountChangeSubscriptions[\n            id\n          ].subscriptionId = await this._rpcWebSock.call('accountSubscribe', [\n            pubKey,\n          ]);\n        } catch (err) {\n          console.log(\n            `accountSubscribe error for ${pubKey}: ${err.message}`,\n          );\n        }\n      }\n    }\n    for (let id of programKeys) {\n      const {\n        subscriptionId,\n        controllerId,\n      } = this._controllerAccountChangeSubscriptions[id];\n      if (subscriptionId === null) {\n        try {\n          this._controllerAccountChangeSubscriptions[\n            id\n          ].subscriptionId = await this._rpcWebSock.call('programSubscribe', [\n            controllerId,\n          ]);\n        } catch (err) {\n          console.log(\n            `programSubscribe error for ${controllerId}: ${err.message}`,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnAccountNotice(notification: Object) {\n    const res = AccountNoticeResult(notification);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n\n    const keys = Object.keys(this._accountChangeSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._accountChangeSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        const {result} = res;\n        assert(typeof result !== 'undefined');\n\n        sub.callback({\n          executable: result.executable,\n          owner: new PubKey(result.owner),\n          difs: result.difs,\n          data: Buffer.from(result.data),\n        });\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publickey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @return subscription id\n   */\n  onAccountChange(\n    pubKey: PubKey,\n    callback: AccountChangeCallback,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      pubKey: pubKey.toBase58(),\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeListenerOfAccountChange(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const {subscriptionId} = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      if (subscriptionId !== null) {\n        try {\n          await this._rpcWebSock.call('accountUnsubscribe', [subscriptionId]);\n        } catch (err) {\n          console.log('accountUnsubscribe error:', err.message);\n        }\n      }\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = ControllerAccountNoticeResult(notification);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n\n    const keys = Object.keys(this._controllerAccountChangeSubscriptions).map(\n      Number,\n    );\n    for (let id of keys) {\n      const sub = this._controllerAccountChangeSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        const {result} = res;\n        assert(typeof result !== 'undefined');\n\n        sub.callback({\n          accountId: result[0],\n          fetchAccountDetail: {\n            executable: result[1].executable,\n            owner: new PubKey(result[1].owner),\n            difs: result[1].difs,\n            data: Buffer.from(result[1].data),\n          },\n        });\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param controllerId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @return subscription id\n   */\n  onControllerAccountChange(\n    controllerId: PubKey,\n    callback: ControllerAccountChangeCallback,\n  ): number {\n    const id = ++this._controllerAccountChangeSubscriptionCounter;\n    this._controllerAccountChangeSubscriptions[id] = {\n      controllerId: controllerId.toBase58(),\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeControllerAccountChangeListener(id: number): Promise<void> {\n    if (this._controllerAccountChangeSubscriptions[id]) {\n      const {subscriptionId} = this._controllerAccountChangeSubscriptions[id];\n      delete this._controllerAccountChangeSubscriptions[id];\n      if (subscriptionId !== null) {\n        try {\n          await this._rpcWebSock.call('programUnsubscribe', [subscriptionId]);\n        } catch (err) {\n          console.log('programUnsubscribe error:', err.message);\n        }\n      }\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n}\n"]}