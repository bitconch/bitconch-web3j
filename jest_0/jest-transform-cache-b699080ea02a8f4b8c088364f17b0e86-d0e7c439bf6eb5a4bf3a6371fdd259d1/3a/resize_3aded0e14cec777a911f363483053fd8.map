{"version":3,"sources":["resize.js"],"names":["pubKey","property","BufferLayout","blob","uint64","rustString","rsl","struct","u32","offset","_decode","decode","bind","_encode","encode","buffer","data","chars","toString","str","Buffer","from"],"mappings":";;;;;;;;;AAEA;;AAEA;;;AAGO,IAAMA,MAAM,GAAG,SAATA,MAAS,GAAyC;AAAA,MAAxCC,QAAwC,uEAArB,QAAqB;AAC7D,SAAOC,YAAY,CAACC,IAAb,CAAkB,EAAlB,EAAsBF,QAAtB,CAAP;AACD,CAFM;AAIP;;;;;;;AAGO,IAAMG,MAAM,GAAG,SAATA,MAAS,GAAyC;AAAA,MAAxCH,QAAwC,uEAArB,QAAqB;AAC7D,SAAOC,YAAY,CAACC,IAAb,CAAkB,CAAlB,EAAqBF,QAArB,CAAP;AACD,CAFM;AAIP;;;;;;;AAGO,IAAMI,UAAU,GAAG,SAAbA,UAAa,GAAiC;AAAA,MAAhCJ,QAAgC,uEAAb,QAAa;AACzD,MAAMK,GAAG,GAAGJ,YAAY,CAACK,MAAb,CACV,CACEL,YAAY,CAACM,GAAb,CAAiB,QAAjB,CADF,EAEEN,YAAY,CAACM,GAAb,CAAiB,eAAjB,CAFF,EAGEN,YAAY,CAACC,IAAb,CAAkBD,YAAY,CAACO,MAAb,CAAoBP,YAAY,CAACM,GAAb,EAApB,EAAwC,CAAC,CAAzC,CAAlB,EAA+D,OAA/D,CAHF,CADU,EAMVP,QANU,CAAZ;;AAQA,MAAMS,OAAO,GAAGJ,GAAG,CAACK,MAAJ,CAAWC,IAAX,CAAgBN,GAAhB,CAAhB;;AACA,MAAMO,OAAO,GAAGP,GAAG,CAACQ,MAAJ,CAAWF,IAAX,CAAgBN,GAAhB,CAAhB;;AAEAA,EAAAA,GAAG,CAACK,MAAJ,GAAa,UAACI,MAAD,EAASN,MAAT,EAAoB;AAC/B,QAAMO,IAAI,GAAGN,OAAO,CAACK,MAAD,EAASN,MAAT,CAApB;;AACA,WAAOO,IAAI,CAACC,KAAL,CAAWC,QAAX,CAAoB,MAApB,CAAP;AACD,GAHD;;AAKAZ,EAAAA,GAAG,CAACQ,MAAJ,GAAa,UAACK,GAAD,EAAMJ,MAAN,EAAcN,MAAd,EAAyB;AACpC,QAAMO,IAAI,GAAG;AACXC,MAAAA,KAAK,EAAEG,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiB,MAAjB;AADI,KAAb;AAGA,WAAON,OAAO,CAACG,IAAD,EAAOD,MAAP,EAAeN,MAAf,CAAd;AACD,GALD;;AAOA,SAAOH,GAAP;AACD,CAzBM","sourcesContent":["// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const pubKey = (property: string = 'pubKey'): Object => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): Object => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer, offset) => {\n    const data = _decode(buffer, offset);\n    return data.chars.toString('utf8');\n  };\n\n  rsl.encode = (str, buffer, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  return rsl;\n};\n"]}