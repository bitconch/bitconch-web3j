15646351636f90cfa9228d74a0cf876a
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _tweetnacl = _interopRequireDefault(require("tweetnacl"));

var _busAccount = require("../src/bus-account");

var _pubkey = require("../src/pubkey");

var _transactionController = require("../src/transaction-controller");

var _systemController = require("../src/system-controller");

test('signPartial', function () {
  var account1 = new _busAccount.BusAccount();
  var account2 = new _busAccount.BusAccount();
  var recentPackagehash = account1.pubKey.toBase58(); // Fake recentPackagehash

  var transfer = _systemController.SystemController.transfer(account1.pubKey, account2.pubKey, 123);

  var transaction = new _transactionController.Transaction({
    recentPackagehash: recentPackagehash
  }).add(transfer);
  transaction.sign(account1, account2);
  var partialTransaction = new _transactionController.Transaction({
    recentPackagehash: recentPackagehash
  }).add(transfer);
  partialTransaction.signPartial(account1, account2.pubKey);
  expect(partialTransaction.signatures[1].signature).toBeNull();
  partialTransaction.addSigner(account2);
  expect(partialTransaction).toEqual(transaction);
});
test('transfer signatures', function () {
  var account1 = new _busAccount.BusAccount();
  var account2 = new _busAccount.BusAccount();
  var recentPackagehash = account1.pubKey.toBase58(); // Fake recentPackagehash

  var transfer1 = _systemController.SystemController.transfer(account1.pubKey, account2.pubKey, 123);

  var transfer2 = _systemController.SystemController.transfer(account2.pubKey, account1.pubKey, 123);

  var orgTransaction = new _transactionController.Transaction({
    recentPackagehash: recentPackagehash
  }).add(transfer1, transfer2);
  orgTransaction.sign(account1, account2);
  var newTransaction = new _transactionController.Transaction({
    recentPackagehash: orgTransaction.recentPackagehash,
    signatures: orgTransaction.signatures
  }).add(transfer1, transfer2);
  expect(newTransaction).toEqual(orgTransaction);
});
test('dedup signatures', function () {
  var account1 = new _busAccount.BusAccount();
  var account2 = new _busAccount.BusAccount();
  var recentPackagehash = account1.pubKey.toBase58(); // Fake recentPackagehash

  var transfer1 = _systemController.SystemController.transfer(account1.pubKey, account2.pubKey, 123);

  var transfer2 = _systemController.SystemController.transfer(account1.pubKey, account2.pubKey, 123);

  var orgTransaction = new _transactionController.Transaction({
    recentPackagehash: recentPackagehash
  }).add(transfer1, transfer2);
  orgTransaction.sign(account1);
});
test('parse wire format and serialize', function () {
  var keypair = _tweetnacl["default"].sign.keyPair.fromSeed(Uint8Array.from(Array(32).fill(8)));

  var sender = new _busAccount.BusAccount(Buffer.from(keypair.secretKey)); // Arbitrary known account

  var recentPackagehash = 'EETubP5AKHgjPAhzPAFcb8BAY1hMH639CWCFTqi3hq1k'; // Arbitrary known recentPackagehash

  var recipient = new _pubkey.PubKey('J3dxNj7nDRRqRRXuEMynDG57DkZK4jYRuv3Garmb1i99'); // Arbitrary known public key

  var transfer = _systemController.SystemController.transfer(sender.pubKey, recipient, 49);

  var expectedTransaction = new _transactionController.Transaction({
    recentPackagehash: recentPackagehash
  }).add(transfer);
  expectedTransaction.sign(sender);
  var wireTransaction = Buffer.from([1, 47, 50, 66, 17, 219, 90, 187, 49, 40, 77, 8, 58, 129, 51, 76, 13, 206, 126, 157, 189, 188, 53, 174, 42, 80, 4, 4, 212, 55, 67, 171, 34, 224, 81, 68, 230, 120, 117, 204, 241, 167, 152, 74, 141, 132, 73, 166, 217, 173, 27, 75, 62, 171, 160, 100, 159, 116, 164, 45, 185, 64, 0, 72, 4, 1, 0, 2, 3, 19, 152, 246, 44, 109, 26, 69, 124, 81, 186, 106, 75, 95, 61, 189, 47, 105, 252, 169, 50, 22, 33, 141, 200, 153, 126, 65, 107, 209, 125, 147, 202, 253, 67, 159, 204, 182, 103, 39, 242, 137, 197, 198, 222, 59, 196, 168, 254, 93, 213, 215, 119, 112, 188, 143, 241, 92, 62, 238, 220, 177, 74, 243, 252, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196, 154, 231, 118, 3, 120, 32, 84, 241, 122, 157, 236, 234, 67, 180, 68, 235, 160, 237, 177, 44, 111, 29, 49, 198, 224, 228, 168, 75, 240, 82, 235, 1, 2, 2, 0, 1, 12, 2, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0]);

  var tx = _transactionController.Transaction.from(wireTransaction);

  expect(tx).toEqual(expectedTransaction);
  expect(wireTransaction).toEqual(expectedTransaction.serialize());
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,