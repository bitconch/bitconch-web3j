{"version":3,"sources":["connection.test.js"],"names":["mockRpcEnabled","jest","setTimeout","errorMessage","errorResponse","error","message","result","undefined","test","account","BusAccount","connection","Connection","url","mockRpc","push","method","params","pubKey","toBase58","expect","fetchAccountDetail","rejects","toThrow","console","log","fullnodeExit","toBe","fetchAccountBalance","balance","toBeGreaterThanOrEqual","fetchRoundLeader","slotLeader","pubkey","gossip","tpu","rpc","fetchClusterNodes","clusterNodes","toHaveLength","toBeNull","length","toBeGreaterThan","getEpochVoteAccounts","voteAccounts","badTransactionSignature","confmTxn","fetchSignatureState","fetchTxnAmount","count","getTotalSupply","fetchRecentBlockhash","recentPackagehash","feeCalculator","difsPerSignature","reqDrone","owner","difs","data","executable","toEqual","SystemController","controllerId","accountFrom","accountTo","transaction","transfer","sendTxn","signature","i","toBeLessThan","Ok","resolves","toBeLessThanOrEqual","add","programAccount","mockCallback","fn","subscriptionId","onAccountChange","ControllerLoader","load","BpfControllerLoader","mock","calls","Error","DEFAULT_TICKS_PER_SLOT","NUM_TICKS_PER_SEC","removeListenerOfAccountChange","notified","onControllerAccountChange","keyedAccountInfo","accountId","toString","removeControllerAccountChangeListener"],"mappings":"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","sourcesContent":["// @flow\nimport {BusAccount, Connection, BpfControllerLoader, ControllerLoader, SystemController} from '../src';\nimport {DEFAULT_TICKS_PER_SLOT, NUM_TICKS_PER_SEC} from '../src/timing';\nimport {mockRpc, mockRpcEnabled} from './__mocks__/node-fetch';\nimport {mockGetRecentBlockhash} from './mockrpc/get-recent-blockhash';\nimport {url} from './url';\nimport {sleep} from '../src/util/sleep';\n\nif (!mockRpcEnabled) {\n  // The default of 5 seconds is too slow for live testing sometimes\n  jest.setTimeout(30000);\n}\n\nconst errorMessage = 'Invalid request';\nconst errorResponse = {\n  error: {\n    message: errorMessage,\n  },\n  result: undefined,\n};\n\ntest('get account info - error', () => {\n  const account = new BusAccount();\n  const connection = new Connection(url);\n\n  mockRpc.push([\n    url,\n    {\n      method: 'getAccountInfo',\n      params: [account.pubKey.toBase58()],\n    },\n    errorResponse,\n  ]);\n\n  expect(connection.fetchAccountDetail(account.pubKey)).rejects.toThrow(\n    errorMessage,\n  );\n});\n\ntest('fullnodeQuit', async () => {\n  if (!mockRpcEnabled) {\n    console.log('fullnodeExit skipped on live node');\n    return;\n  }\n  const connection = new Connection(url);\n\n  mockRpc.push([\n    url,\n    {\n      method: 'fullnodeQuit',\n    },\n    {\n      error: null,\n      result: false,\n    },\n  ]);\n\n  const result = await connection.fullnodeExit();\n  expect(result).toBe(false);\n});\n\ntest('get balance', async () => {\n  const account = new BusAccount();\n  const connection = new Connection(url);\n\n  mockRpc.push([\n    url,\n    {\n      method: 'getDif',\n      params: [account.pubKey.toBase58()],\n    },\n    {\n      error: null,\n      result: 0,\n    },\n  ]);\n\n  const balance = await connection.fetchAccountBalance(account.pubKey);\n  expect(balance).toBeGreaterThanOrEqual(0);\n});\n\ntest('get slot leader', async () => {\n  const connection = new Connection(url);\n\n  mockRpc.push([\n    url,\n    {\n      method: 'getRoundLeader',\n    },\n    {\n      error: null,\n      result: '11111111111111111111111111111111',\n    },\n  ]);\n\n  const slotLeader = await connection.fetchRoundLeader();\n  if (mockRpcEnabled) {\n    expect(slotLeader).toBe('11111111111111111111111111111111');\n  } else {\n    // No idea what the correct slotLeader value should be on a live cluster, so\n    // just check the type\n    expect(typeof slotLeader).toBe('string');\n  }\n});\n\ntest('get cluster nodes', async () => {\n  const connection = new Connection(url);\n\n  mockRpc.push([\n    url,\n    {\n      method: 'getClusterNodes',\n    },\n    {\n      error: null,\n      result: [\n        {\n          pubkey: '11111111111111111111111111111111',\n          gossip: '127.0.0.0:1234',\n          tpu: '127.0.0.0:1235',\n          rpc: null,\n        },\n      ],\n    },\n  ]);\n\n  const clusterNodes = await connection.fetchClusterNodes();\n  if (mockRpcEnabled) {\n    expect(clusterNodes).toHaveLength(1);\n    expect(clusterNodes[0].pubkey).toBe('11111111111111111111111111111111');\n    expect(typeof clusterNodes[0].gossip).toBe('string');\n    expect(typeof clusterNodes[0].tpu).toBe('string');\n    expect(clusterNodes[0].rpc).toBeNull();\n  } else {\n    // There should be at least one node (the node that we're talking to)\n    expect(clusterNodes.length).toBeGreaterThan(0);\n  }\n});\n\ntest('getEpochVoteAccounts', async () => {\n  if (mockRpcEnabled) {\n    console.log('non-live test skipped');\n    return;\n  }\n\n  const connection = new Connection(url);\n  const voteAccounts = await connection.getEpochVoteAccounts();\n  expect(voteAccounts.length).toBeGreaterThan(0);\n});\n\ntest('confirm transaction - error', () => {\n  const connection = new Connection(url);\n\n  const badTransactionSignature = 'bad transaction signature';\n\n  mockRpc.push([\n    url,\n    {\n      method: 'confirmTxn',\n      params: [badTransactionSignature],\n    },\n    errorResponse,\n  ]);\n\n  expect(\n    connection.confmTxn(badTransactionSignature),\n  ).rejects.toThrow(errorMessage);\n\n  mockRpc.push([\n    url,\n    {\n      method: 'getSignatureState',\n      params: [badTransactionSignature],\n    },\n    errorResponse,\n  ]);\n\n  expect(\n    connection.fetchSignatureState(badTransactionSignature),\n  ).rejects.toThrow(errorMessage);\n});\n\ntest('get transaction count', async () => {\n  const connection = new Connection(url);\n\n  mockRpc.push([\n    url,\n    {\n      method: 'getTxnCnt',\n      params: [],\n    },\n    {\n      error: null,\n      result: 1000000,\n    },\n  ]);\n\n  const count = await connection.fetchTxnAmount();\n  expect(count).toBeGreaterThanOrEqual(0);\n});\n\ntest('get total supply', async () => {\n  const connection = new Connection(url);\n\n  mockRpc.push([\n    url,\n    {\n      method: 'getTotalSupply',\n      params: [],\n    },\n    {\n      error: null,\n      result: 1000000,\n    },\n  ]);\n\n  const count = await connection.getTotalSupply();\n  expect(count).toBeGreaterThanOrEqual(0);\n});\n\ntest('get recent blockhash', async () => {\n  const connection = new Connection(url);\n\n  mockGetRecentBlockhash();\n\n  const [\n    recentPackagehash,\n    feeCalculator,\n  ] = await connection.fetchRecentBlockhash();\n  expect(recentPackagehash.length).toBeGreaterThanOrEqual(43);\n  expect(feeCalculator.difsPerSignature).toBeGreaterThanOrEqual(0);\n});\n\ntest('request airdrop', async () => {\n  const account = new BusAccount();\n  const connection = new Connection(url);\n\n  mockRpc.push([\n    url,\n    {\n      method: 'requestDif',\n      params: [account.pubKey.toBase58(), 40],\n    },\n    {\n      error: null,\n      result:\n        '1WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk',\n    },\n  ]);\n  mockRpc.push([\n    url,\n    {\n      method: 'requestDif',\n      params: [account.pubKey.toBase58(), 2],\n    },\n    {\n      error: null,\n      result:\n        '2WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk',\n    },\n  ]);\n  mockRpc.push([\n    url,\n    {\n      method: 'getDif',\n      params: [account.pubKey.toBase58()],\n    },\n    {\n      error: null,\n      result: 42,\n    },\n  ]);\n\n  await connection.reqDrone(account.pubKey, 40);\n  await connection.reqDrone(account.pubKey, 2);\n\n  const balance = await connection.fetchAccountBalance(account.pubKey);\n  expect(balance).toBe(42);\n\n  mockRpc.push([\n    url,\n    {\n      method: 'getAccountInfo',\n      params: [account.pubKey.toBase58()],\n    },\n    {\n      error: null,\n      result: {\n        owner: [\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n        ],\n        difs: 42,\n        data: [],\n        executable: false,\n      },\n    },\n  ]);\n\n  const fetchAccountDetail = await connection.fetchAccountDetail(account.pubKey);\n  expect(fetchAccountDetail.difs).toBe(42);\n  expect(fetchAccountDetail.data).toHaveLength(0);\n  expect(fetchAccountDetail.owner).toEqual(SystemController.controllerId);\n});\n\ntest('transaction', async () => {\n  const accountFrom = new BusAccount();\n  const accountTo = new BusAccount();\n  const connection = new Connection(url);\n\n  mockRpc.push([\n    url,\n    {\n      method: 'requestDif',\n      params: [accountFrom.pubKey.toBase58(), 100010],\n    },\n    {\n      error: null,\n      result:\n        '0WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk',\n    },\n  ]);\n  mockRpc.push([\n    url,\n    {\n      method: 'getDif',\n      params: [accountFrom.pubKey.toBase58()],\n    },\n    {\n      error: null,\n      result: 100010,\n    },\n  ]);\n  await connection.reqDrone(accountFrom.pubKey, 100010);\n  expect(await connection.fetchAccountBalance(accountFrom.pubKey)).toBe(100010);\n\n  mockRpc.push([\n    url,\n    {\n      method: 'requestDif',\n      params: [accountTo.pubKey.toBase58(), 21],\n    },\n    {\n      error: null,\n      result:\n        '8WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk',\n    },\n  ]);\n  mockRpc.push([\n    url,\n    {\n      method: 'getDif',\n      params: [accountTo.pubKey.toBase58()],\n    },\n    {\n      error: null,\n      result: 21,\n    },\n  ]);\n  await connection.reqDrone(accountTo.pubKey, 21);\n  expect(await connection.fetchAccountBalance(accountTo.pubKey)).toBe(21);\n\n  mockGetRecentBlockhash();\n  mockRpc.push([\n    url,\n    {\n      method: 'sendTxn',\n    },\n    {\n      error: null,\n      result:\n        '3WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk',\n    },\n  ]);\n\n  const transaction = SystemController.transfer(\n    accountFrom.pubKey,\n    accountTo.pubKey,\n    10,\n  );\n  const signature = await connection.sendTxn(transaction, accountFrom);\n\n  mockRpc.push([\n    url,\n    {\n      method: 'confirmTxn',\n      params: [\n        '3WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk',\n      ],\n    },\n    {\n      error: null,\n      result: true,\n    },\n  ]);\n\n  let i = 0;\n  for (;;) {\n    if (await connection.confmTxn(signature)) {\n      break;\n    }\n    console.log('not confirmed', signature);\n    expect(mockRpcEnabled).toBe(false);\n    expect(++i).toBeLessThan(10);\n    await sleep(500);\n  }\n\n  mockRpc.push([\n    url,\n    {\n      method: 'getSignatureState',\n      params: [\n        '3WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk',\n      ],\n    },\n    {\n      error: null,\n      result: {Ok: null},\n    },\n  ]);\n  await expect(connection.fetchSignatureState(signature)).resolves.toEqual({\n    Ok: null,\n  });\n\n  mockRpc.push([\n    url,\n    {\n      method: 'getDif',\n      params: [accountFrom.pubKey.toBase58()],\n    },\n    {\n      error: null,\n      result: 2,\n    },\n  ]);\n\n  // accountFrom may have less than 100000 due to transaction fees\n  const balance = await connection.fetchAccountBalance(accountFrom.pubKey);\n  expect(balance).toBeGreaterThan(0);\n  expect(balance).toBeLessThanOrEqual(100000);\n\n  mockRpc.push([\n    url,\n    {\n      method: 'getDif',\n      params: [accountTo.pubKey.toBase58()],\n    },\n    {\n      error: null,\n      result: 31,\n    },\n  ]);\n  expect(await connection.fetchAccountBalance(accountTo.pubKey)).toBe(31);\n});\n\ntest('multi-instruction transaction', async () => {\n  if (mockRpcEnabled) {\n    console.log('non-live test skipped');\n    return;\n  }\n\n  const accountFrom = new BusAccount();\n  const accountTo = new BusAccount();\n  const connection = new Connection(url);\n\n  await connection.reqDrone(accountFrom.pubKey, 100000);\n  expect(await connection.fetchAccountBalance(accountFrom.pubKey)).toBe(100000);\n\n  await connection.reqDrone(accountTo.pubKey, 21);\n  expect(await connection.fetchAccountBalance(accountTo.pubKey)).toBe(21);\n\n  // 1. Move(accountFrom, accountTo)\n  // 2. Move(accountTo, accountFrom)\n  const transaction = SystemController.transfer(\n    accountFrom.pubKey,\n    accountTo.pubKey,\n    100,\n  ).add(\n    SystemController.transfer(accountTo.pubKey, accountFrom.pubKey, 100),\n  );\n  const signature = await connection.sendTxn(\n    transaction,\n    accountFrom,\n    accountTo,\n  );\n  let i = 0;\n  for (;;) {\n    if (await connection.confmTxn(signature)) {\n      break;\n    }\n\n    expect(mockRpcEnabled).toBe(false);\n    expect(++i).toBeLessThan(10);\n    await sleep(500);\n  }\n  await expect(connection.fetchSignatureState(signature)).resolves.toEqual({\n    Ok: null,\n  });\n\n  // accountFrom may have less than 100000 due to transaction fees\n  expect(await connection.fetchAccountBalance(accountFrom.pubKey)).toBeGreaterThan(0);\n  expect(\n    await connection.fetchAccountBalance(accountFrom.pubKey),\n  ).toBeLessThanOrEqual(100000);\n\n  expect(await connection.fetchAccountBalance(accountTo.pubKey)).toBe(21);\n});\n\ntest('account change notification', async () => {\n  if (mockRpcEnabled) {\n    console.log('non-live test skipped');\n    return;\n  }\n\n  const connection = new Connection(url);\n  const owner = new BusAccount();\n  const programAccount = new BusAccount();\n\n  const mockCallback = jest.fn();\n\n  const subscriptionId = connection.onAccountChange(\n    programAccount.pubKey,\n    mockCallback,\n  );\n\n  await connection.reqDrone(owner.pubKey, 100000);\n  await ControllerLoader.load(connection, owner, programAccount, BpfControllerLoader.controllerId, [\n    1,\n    2,\n    3,\n  ]);\n\n  // Wait for mockCallback to receive a call\n  let i = 0;\n  for (;;) {\n    if (mockCallback.mock.calls.length > 0) {\n      break;\n    }\n\n    if (++i === 30) {\n      throw new Error('BusAccount change notification not observed');\n    }\n    // Sleep for a 1/4 of a slot, notifications only occur after a block is\n    // processed\n    await sleep((250 * DEFAULT_TICKS_PER_SLOT) / NUM_TICKS_PER_SEC);\n  }\n\n  await connection.removeListenerOfAccountChange(subscriptionId);\n\n  expect(mockCallback.mock.calls[0][0].difs).toBe(1);\n  expect(mockCallback.mock.calls[0][0].owner).toEqual(BpfControllerLoader.controllerId);\n});\n\ntest('program account change notification', async () => {\n  if (mockRpcEnabled) {\n    console.log('non-live test skipped');\n    return;\n  }\n\n  const connection = new Connection(url);\n  const owner = new BusAccount();\n  const programAccount = new BusAccount();\n\n  // const mockCallback = jest.fn();\n\n  let notified = false;\n  const subscriptionId = connection.onControllerAccountChange(\n    BpfControllerLoader.controllerId,\n    keyedAccountInfo => {\n      if (keyedAccountInfo.accountId !== programAccount.pubKey.toString()) {\n        //console.log('Ignoring another account', keyedAccountInfo);\n        return;\n      }\n      expect(keyedAccountInfo.fetchAccountDetail.difs).toBe(1);\n      expect(keyedAccountInfo.fetchAccountDetail.owner).toEqual(BpfControllerLoader.controllerId);\n      notified = true;\n    },\n  );\n\n  await connection.reqDrone(owner.pubKey, 100000);\n  await ControllerLoader.load(connection, owner, programAccount, BpfControllerLoader.controllerId, [\n    1,\n    2,\n    3,\n  ]);\n\n  // Wait for mockCallback to receive a call\n  let i = 0;\n  while (!notified) {\n    //for (;;) {\n    if (++i === 30) {\n      throw new Error('Program change notification not observed');\n    }\n    // Sleep for a 1/4 of a slot, notifications only occur after a block is\n    // processed\n    await sleep((250 * DEFAULT_TICKS_PER_SLOT) / NUM_TICKS_PER_SEC);\n  }\n\n  await connection.removeControllerAccountChangeListener(subscriptionId);\n});\n"]}