a89fd8d4f88b003ef204c1074b966c09
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Token = exports.SYSTEM_TOKEN_CONTROLLER_ID = exports.TokenCount = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assert = _interopRequireDefault(require("assert"));

var _bn = _interopRequireDefault(require("bn.js"));

var BufferLayout = _interopRequireWildcard(require("buffer-layout"));

var Layout = _interopRequireWildcard(require("./resize"));

var _busAccount = require("./bus-account");

var _pubkey = require("./pubkey");

var _systemController = require("./system-controller");

var _transactionController = require("./transaction-controller");

var _sendAndConfmTx = require("./util/send-and-confm-tx");

/**
 * Some amount of tokens
 */
var TokenCount =
/*#__PURE__*/
function (_BN) {
  (0, _inherits2["default"])(TokenCount, _BN);

  function TokenCount() {
    (0, _classCallCheck2["default"])(this, TokenCount);
    return (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(TokenCount).apply(this, arguments));
  }

  (0, _createClass2["default"])(TokenCount, [{
    key: "toBuffer",

    /**
     * Convert to Buffer representation
     */
    value: function toBuffer() {
      var a = (0, _get2["default"])((0, _getPrototypeOf2["default"])(TokenCount.prototype), "toArray", this).call(this).reverse();
      var b = Buffer.from(a);

      if (b.length === 8) {
        return b;
      }

      (0, _assert["default"])(b.length < 8, 'TokenCount too large');
      var zeroPad = Buffer.alloc(8);
      b.copy(zeroPad);
      return zeroPad;
    }
    /**
     * Construct a TokenCount from Buffer representation
     */

  }], [{
    key: "fromBuffer",
    value: function fromBuffer(buffer) {
      (0, _assert["default"])(buffer.length === 8, "Invalid buffer length: ".concat(buffer.length));
      return new _bn["default"]((0, _toConsumableArray2["default"])(buffer).reverse().map(function (i) {
        return "00".concat(i.toString(16)).slice(-2);
      }).join(''), 16);
    }
  }]);
  return TokenCount;
}(_bn["default"]);
/**
 * Information about a token
 */


exports.TokenCount = TokenCount;

/**
 * @private
 */
var TokenDetailLayout = BufferLayout.struct([Layout.uint64('supply'), BufferLayout.u8('decimals'), Layout.rustString('name'), Layout.rustString('symbol')]);
/**
 * Information about a token account
 */

/**
 * @private
 */
var TokenAccountDetailLayout = BufferLayout.struct([Layout.pubKey('token'), Layout.pubKey('owner'), Layout.uint64('amount'), BufferLayout.u8('sourceOption'), Layout.pubKey('source'), Layout.uint64('originalAmount')]);
// This type exists to workaround an esdoc parse error

/**
 * The built-in token controller
 */
var SYSTEM_TOKEN_CONTROLLER_ID = new _pubkey.PubKey('Token11111111111111111111111111111111111111');
/**
 * An ERC20-like Token
 */

exports.SYSTEM_TOKEN_CONTROLLER_ID = SYSTEM_TOKEN_CONTROLLER_ID;

var Token =
/*#__PURE__*/
function () {
  /**
   * @private
   */

  /**
   * The public key identifying this token
   */

  /**
   * Controller Identifier for the Token controller
   */

  /**
   * Create a Token object attached to the specific token
   *
   * @param connection The connection to use
   * @param token Public key of the token
   * @param controllerId Optional token controllerId, uses the system controllerId by default
   */
  function Token(connection, token) {
    var controllerId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : SYSTEM_TOKEN_CONTROLLER_ID;
    (0, _classCallCheck2["default"])(this, Token);
    (0, _defineProperty2["default"])(this, "connection", void 0);
    (0, _defineProperty2["default"])(this, "token", void 0);
    (0, _defineProperty2["default"])(this, "controllerId", void 0);
    Object.assign(this, {
      connection: connection,
      token: token,
      controllerId: controllerId
    });
  }
  /**
   * Create a new Token
   *
   * @param connection The connection to use
   * @param owner User account that will own the returned Token BusAccount
   * @param supply Total supply of the new token
   * @param name Descriptive name of this token
   * @param symbol Symbol for this token
   * @param decimals Location of the decimal place
   * @param controllerId Optional token controllerId, uses the system controllerId by default
   * @return Token object for the newly minted token, Public key of the Token BusAccount holding the total supply of new tokens
   */


  (0, _createClass2["default"])(Token, [{
    key: "createNewAccount",

    /**
     * Create a new and empty token account.
     *
     * This account may then be used as a `transfer()` or `approve()` destination
     *
     * @param owner User account that will own the new token account
     * @param source If not null, create a delegate account that when authorized
     *               may transfer tokens from this `source` account
     * @return Public key of the new empty token account
     */
    value: function () {
      var _createNewAccount = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(owner) {
        var source,
            tokenAccount,
            transaction,
            dataLayout,
            data,
            keys,
            _args = arguments;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                source = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;
                tokenAccount = new _busAccount.BusAccount();
                dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);
                data = Buffer.alloc(dataLayout.span);
                dataLayout.encode({
                  instruction: 1 // NewTokenAccount instruction

                }, data); // Allocate memory for the token

                transaction = _systemController.SystemController.createNewAccount(owner.pubKey, tokenAccount.pubKey, 1, 1, 2 + TokenAccountDetailLayout.span, this.controllerId);
                _context.next = 8;
                return (0, _sendAndConfmTx.sendAndconfmTx)(this.connection, transaction, owner);

              case 8:
                // Initialize the token account
                keys = [{
                  pubkey: tokenAccount.pubKey,
                  isSigner: true,
                  isDebitable: true
                }, {
                  pubkey: owner.pubKey,
                  isSigner: false,
                  isDebitable: false
                }, {
                  pubkey: this.token,
                  isSigner: false,
                  isDebitable: false
                }];

                if (source) {
                  keys.push({
                    pubkey: source,
                    isSigner: false,
                    isDebitable: false
                  });
                }

                transaction = new _transactionController.Transaction().add({
                  keys: keys,
                  controllerId: this.controllerId,
                  data: data
                });
                _context.next = 13;
                return (0, _sendAndConfmTx.sendAndconfmTx)(this.connection, transaction, owner, tokenAccount);

              case 13:
                return _context.abrupt("return", tokenAccount.pubKey);

              case 14:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function createNewAccount(_x) {
        return _createNewAccount.apply(this, arguments);
      }

      return createNewAccount;
    }()
    /**
     * Retrieve token information
     */

  }, {
    key: "fetchTokenDetail",
    value: function () {
      var _fetchTokenDetail = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee2() {
        var fetchAccountDetail, data, fetchTokenDetail;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.connection.fetchAccountDetail(this.token);

              case 2:
                fetchAccountDetail = _context2.sent;

                if (fetchAccountDetail.owner.equals(this.controllerId)) {
                  _context2.next = 5;
                  break;
                }

                throw new Error("Invalid token owner: ".concat(JSON.stringify(fetchAccountDetail.owner)));

              case 5:
                data = Buffer.from(fetchAccountDetail.data);

                if (!(data.readUInt8(0) !== 1)) {
                  _context2.next = 8;
                  break;
                }

                throw new Error("Invalid token data");

              case 8:
                fetchTokenDetail = TokenDetailLayout.decode(data, 1);
                fetchTokenDetail.supply = TokenCount.fromBuffer(fetchTokenDetail.supply);
                return _context2.abrupt("return", fetchTokenDetail);

              case 11:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function fetchTokenDetail() {
        return _fetchTokenDetail.apply(this, arguments);
      }

      return fetchTokenDetail;
    }()
    /**
     * Retrieve account information
     *
     * @param account Public key of the token account
     */

  }, {
    key: "fetchAccountDetail",
    value: function () {
      var _fetchAccountDetail = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee3(account) {
        var fetchAccountDetail, data, tokenAccountInfo;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.connection.fetchAccountDetail(account);

              case 2:
                fetchAccountDetail = _context3.sent;

                if (fetchAccountDetail.owner.equals(this.controllerId)) {
                  _context3.next = 5;
                  break;
                }

                throw new Error("Invalid token account owner");

              case 5:
                data = Buffer.from(fetchAccountDetail.data);

                if (!(data.readUInt8(0) !== 2)) {
                  _context3.next = 8;
                  break;
                }

                throw new Error("Invalid token account data");

              case 8:
                tokenAccountInfo = TokenAccountDetailLayout.decode(data, 1);
                tokenAccountInfo.token = new _pubkey.PubKey(tokenAccountInfo.token);
                tokenAccountInfo.owner = new _pubkey.PubKey(tokenAccountInfo.owner);
                tokenAccountInfo.amount = TokenCount.fromBuffer(tokenAccountInfo.amount);

                if (tokenAccountInfo.sourceOption === 0) {
                  tokenAccountInfo.source = null;
                  tokenAccountInfo.originalAmount = new TokenCount();
                } else {
                  tokenAccountInfo.source = new _pubkey.PubKey(tokenAccountInfo.source);
                  tokenAccountInfo.originalAmount = TokenCount.fromBuffer(tokenAccountInfo.originalAmount);
                }

                if (tokenAccountInfo.token.equals(this.token)) {
                  _context3.next = 15;
                  break;
                }

                throw new Error("Invalid token account token: ".concat(JSON.stringify(tokenAccountInfo.token), " !== ").concat(JSON.stringify(this.token)));

              case 15:
                return _context3.abrupt("return", tokenAccountInfo);

              case 16:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function fetchAccountDetail(_x2) {
        return _fetchAccountDetail.apply(this, arguments);
      }

      return fetchAccountDetail;
    }()
    /**
     * Transfer tokens to another account
     *
     * @param owner Owner of the source token account
     * @param source Source token account
     * @param destination Destination token account
     * @param amount Number of tokens to transfer
     */

  }, {
    key: "transfer",
    value: function () {
      var _transfer = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee4(owner, source, destination, amount) {
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.t0 = _sendAndConfmTx.sendAndconfmTx;
                _context4.t1 = this.connection;
                _context4.t2 = new _transactionController.Transaction();
                _context4.next = 5;
                return this.transferOperation(owner.pubKey, source, destination, amount);

              case 5:
                _context4.t3 = _context4.sent;
                _context4.t4 = _context4.t2.add.call(_context4.t2, _context4.t3);
                _context4.t5 = owner;
                _context4.next = 10;
                return (0, _context4.t0)(_context4.t1, _context4.t4, _context4.t5);

              case 10:
                return _context4.abrupt("return", _context4.sent);

              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function transfer(_x3, _x4, _x5, _x6) {
        return _transfer.apply(this, arguments);
      }

      return transfer;
    }()
    /**
     * Grant a third-party permission to transfer up the specified number of tokens from an account
     *
     * @param owner Owner of the source token account
     * @param account Public key of the token account
     * @param delegate Token account authorized to perform a transfer tokens from the source account
     * @param amount Maximum number of tokens the delegate may transfer
     */

  }, {
    key: "approve",
    value: function () {
      var _approve = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee5(owner, account, delegate, amount) {
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return (0, _sendAndConfmTx.sendAndconfmTx)(this.connection, new _transactionController.Transaction().add(this.approveOperation(owner.pubKey, account, delegate, amount)), owner);

              case 2:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function approve(_x7, _x8, _x9, _x10) {
        return _approve.apply(this, arguments);
      }

      return approve;
    }()
    /**
     * Remove approval for the transfer of any remaining tokens
     *
     * @param owner Owner of the source token account
     * @param account Public key of the token account
     * @param delegate Token account to revoke authorization from
     */

  }, {
    key: "revoke",
    value: function revoke(owner, account, delegate) {
      return this.approve(owner, account, delegate, 0);
    }
    /**
     * Assign a new owner to the account
     *
     * @param owner Owner of the token account
     * @param account Public key of the token account
     * @param newOwner New owner of the token account
     */

  }, {
    key: "setOwner",
    value: function () {
      var _setOwner = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee6(owner, account, newOwner) {
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return (0, _sendAndConfmTx.sendAndconfmTx)(this.connection, new _transactionController.Transaction().add(this.setOwnerOperation(owner.pubKey, account, newOwner)), owner);

              case 2:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function setOwner(_x11, _x12, _x13) {
        return _setOwner.apply(this, arguments);
      }

      return setOwner;
    }()
    /**
     * Construct a Transfer instruction
     *
     * @param owner Owner of the source token account
     * @param source Source token account
     * @param destination Destination token account
     * @param amount Number of tokens to transfer
     */

  }, {
    key: "transferOperation",
    value: function () {
      var _transferOperation = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee7(owner, source, destination, amount) {
        var fetchAccountDetail, dataLayout, data, keys;
        return _regenerator["default"].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this.fetchAccountDetail(source);

              case 2:
                fetchAccountDetail = _context7.sent;

                if (owner.equals(fetchAccountDetail.owner)) {
                  _context7.next = 5;
                  break;
                }

                throw new Error('BusAccount owner mismatch');

              case 5:
                dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), Layout.uint64('amount')]);
                data = Buffer.alloc(dataLayout.span);
                dataLayout.encode({
                  instruction: 2,
                  // Transfer instruction
                  amount: new TokenCount(amount).toBuffer()
                }, data);
                keys = [{
                  pubkey: owner,
                  isSigner: true,
                  isDebitable: false
                }, {
                  pubkey: source,
                  isSigner: false,
                  isDebitable: true
                }, {
                  pubkey: destination,
                  isSigner: false,
                  isDebitable: true
                }];

                if (fetchAccountDetail.source) {
                  keys.push({
                    pubkey: fetchAccountDetail.source,
                    isSigner: false,
                    isDebitable: true
                  });
                }

                return _context7.abrupt("return", new _transactionController.TxOperation({
                  keys: keys,
                  controllerId: this.controllerId,
                  data: data
                }));

              case 11:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function transferOperation(_x14, _x15, _x16, _x17) {
        return _transferOperation.apply(this, arguments);
      }

      return transferOperation;
    }()
    /**
     * Construct an Approve instruction
     *
     * @param owner Owner of the source token account
     * @param account Public key of the token account
     * @param delegate Token account authorized to perform a transfer tokens from the source account
     * @param amount Maximum number of tokens the delegate may transfer
     */

  }, {
    key: "approveOperation",
    value: function approveOperation(owner, account, delegate, amount) {
      var dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), Layout.uint64('amount')]);
      var data = Buffer.alloc(dataLayout.span);
      dataLayout.encode({
        instruction: 3,
        // Approve instruction
        amount: new TokenCount(amount).toBuffer()
      }, data);
      return new _transactionController.TxOperation({
        keys: [{
          pubkey: owner,
          isSigner: true,
          isDebitable: false
        }, {
          pubkey: account,
          isSigner: false,
          isDebitable: true
        }, {
          pubkey: delegate,
          isSigner: false,
          isDebitable: true
        }],
        controllerId: this.controllerId,
        data: data
      });
    }
    /**
     * Construct an Revoke instruction
     *
     * @param owner Owner of the source token account
     * @param account Public key of the token account
     * @param delegate Token account authorized to perform a transfer tokens from the source account
     */

  }, {
    key: "revokeOperation",
    value: function revokeOperation(owner, account, delegate) {
      return this.approveOperation(owner, account, delegate, 0);
    }
    /**
     * Construct a SetOwner instruction
     *
     * @param owner Owner of the token account
     * @param account Public key of the token account
     * @param newOwner New owner of the token account
     */

  }, {
    key: "setOwnerOperation",
    value: function setOwnerOperation(owner, account, newOwner) {
      var dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);
      var data = Buffer.alloc(dataLayout.span);
      dataLayout.encode({
        instruction: 4 // SetOwner instruction

      }, data);
      return new _transactionController.TxOperation({
        keys: [{
          pubkey: owner,
          isSigner: true,
          isDebitable: false
        }, {
          pubkey: account,
          isSigner: false,
          isDebitable: true
        }, {
          pubkey: newOwner,
          isSigner: false,
          isDebitable: true
        }],
        controllerId: this.controllerId,
        data: data
      });
    }
  }], [{
    key: "createNewToken",
    value: function () {
      var _createNewToken = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee8(connection, owner, supply, name, symbol, decimals) {
        var controllerId,
            tokenAccount,
            token,
            initialAccountPublicKey,
            transaction,
            dataLayout,
            data,
            encodeLength,
            _args8 = arguments;
        return _regenerator["default"].wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                controllerId = _args8.length > 6 && _args8[6] !== undefined ? _args8[6] : SYSTEM_TOKEN_CONTROLLER_ID;
                tokenAccount = new _busAccount.BusAccount();
                token = new Token(connection, tokenAccount.pubKey, controllerId);
                _context8.next = 5;
                return token.createNewAccount(owner, null);

              case 5:
                initialAccountPublicKey = _context8.sent;
                dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), Layout.uint64('supply'), BufferLayout.u8('decimals'), Layout.rustString('name'), Layout.rustString('symbol')]);
                data = Buffer.alloc(1024);
                encodeLength = dataLayout.encode({
                  instruction: 0,
                  // NewToken instruction
                  supply: supply.toBuffer(),
                  decimals: decimals,
                  name: name,
                  symbol: symbol
                }, data);
                data = data.slice(0, encodeLength);
                // Allocate memory for the tokenAccount account
                transaction = _systemController.SystemController.createNewAccount(owner.pubKey, tokenAccount.pubKey, 1, 1, 2 + data.length, controllerId);
                _context8.next = 13;
                return (0, _sendAndConfmTx.sendAndconfmTx)(connection, transaction, owner);

              case 13:
                transaction = new _transactionController.Transaction().add({
                  keys: [{
                    pubkey: tokenAccount.pubKey,
                    isSigner: true,
                    isDebitable: false
                  }, {
                    pubkey: initialAccountPublicKey,
                    isSigner: false,
                    isDebitable: true
                  }],
                  controllerId: controllerId,
                  data: data
                });
                _context8.next = 16;
                return (0, _sendAndConfmTx.sendAndconfmTx)(connection, transaction, owner, tokenAccount);

              case 16:
                return _context8.abrupt("return", [token, initialAccountPublicKey]);

              case 17:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      function createNewToken(_x18, _x19, _x20, _x21, _x22, _x23) {
        return _createNewToken.apply(this, arguments);
      }

      return createNewToken;
    }()
  }]);
  return Token;
}();

exports.Token = Token;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,