{"version":3,"sources":["send-and-confm-original-tx.js"],"names":["sendAndConfmNativeTxn","connection","rawTransaction","start","Date","now","sendNativeTxn","signature","status","statusRetries","fetchSignatureState","DEFAULT_TICKS_PER_SLOT","NUM_TICKS_PER_SEC","duration","Error","toFixed","JSON","stringify"],"mappings":";;;;;;;;;;;;;AAEA;;AACA;;AAEA;;AAEA;;;SAGsBA,qB;;;;;;;+BAAf,iBACLC,UADK,EAELC,cAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAICC,YAAAA,KAJD,GAISC,IAAI,CAACC,GAAL,EAJT;AAAA;AAAA,mBAKiBJ,UAAU,CAACK,aAAX,CAAyBJ,cAAzB,CALjB;;AAAA;AAKDK,YAAAA,SALC;AAOL;AACIC,YAAAA,MARC,GAQQ,IARR;AASDC,YAAAA,aATC,GASe,CATf;;AAAA;AAAA;AAAA,mBAWYR,UAAU,CAACS,mBAAX,CAA+BH,SAA/B,CAXZ;;AAAA;AAWHC,YAAAA,MAXG;;AAAA,iBAYCA,MAZD;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,mBAiBG,kBAAO,MAAMG,8BAAP,GAAiCC,yBAAvC,CAjBH;;AAAA;AAAA,kBAmBC,EAAEH,aAAF,IAAmB,CAnBpB;AAAA;AAAA;AAAA;;AAoBKI,YAAAA,QApBL,GAoBgB,CAACT,IAAI,CAACC,GAAL,KAAaF,KAAd,IAAuB,IApBvC;AAAA,kBAqBK,IAAIW,KAAJ,4BACgBP,SADhB,oCACmDM,QAAQ,CAACE,OAAT,CACrD,CADqD,CADnD,uBAGUC,IAAI,CAACC,SAAL,CAAeT,MAAf,CAHV,OArBL;;AAAA;AAAA;AAAA;;AAAA;AAAA,kBA6BDA,MAAM,IAAI,QAAQA,MA7BjB;AAAA;AAAA;AAAA;;AAAA,6CA8BID,SA9BJ;;AAAA;AAAA,kBAiCC,IAAIO,KAAJ,2BACeP,SADf,sBACoCS,IAAI,CAACC,SAAL,CAAeT,MAAf,CADpC,OAjCD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["// @flow\n\nimport {Connection} from '../connection';\nimport {sleep} from './sleep';\nimport type {TxnSignature} from '../transaction-controller';\nimport {DEFAULT_TICKS_PER_SLOT, NUM_TICKS_PER_SEC} from '../timing';\n\n/**\n * Sign, send and confirm a raw transaction\n */\nexport async function sendAndConfmNativeTxn(\n  connection: Connection,\n  rawTransaction: Buffer,\n): Promise<TxnSignature> {\n  const start = Date.now();\n  let signature = await connection.sendNativeTxn(rawTransaction);\n\n  // Wait up to a couple slots for a confirmation\n  let status = null;\n  let statusRetries = 6;\n  for (;;) {\n    status = await connection.fetchSignatureState(signature);\n    if (status) {\n      break;\n    }\n\n    // Sleep for approximately half a slot\n    await sleep((500 * DEFAULT_TICKS_PER_SLOT) / NUM_TICKS_PER_SEC);\n\n    if (--statusRetries <= 0) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Raw Transaction '${signature}' was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds (${JSON.stringify(status)})`,\n      );\n    }\n  }\n\n  if (status && 'Ok' in status) {\n    return signature;\n  }\n\n  throw new Error(\n    `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n  );\n}\n"]}