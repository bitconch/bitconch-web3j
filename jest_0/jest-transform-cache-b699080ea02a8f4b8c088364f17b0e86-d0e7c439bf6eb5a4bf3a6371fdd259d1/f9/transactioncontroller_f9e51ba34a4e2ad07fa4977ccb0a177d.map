{"version":3,"sources":["transaction-controller.js"],"names":["PACKET_DATA_SIZE","TxOperation","opts","Buffer","alloc","Object","assign","Transaction","signatures","length","signature","items","Error","forEach","item","operations","concat","push","recentPackagehash","keys","map","pubKey","toString","numRequiredSignatures","numCreditOnlySignedAccounts","numCreditOnlyUnsignedAccounts","programIds","instruction","keySignerPair","keyStr","pubkey","includes","isSigner","isDebitable","controllerId","keyCount","shortvec","encodeLength","data","keyIndicesCount","dataCount","programIdIndex","indexOf","from","keyIndices","keyObj","dataLength","keyIndex","instructionCount","instructionBuffer","copy","instructionBufferLength","instructionLayout","BufferLayout","struct","u8","blob","seq","encode","slice","signDataLayout","Layout","transaction","key","PubKey","toBuffer","bs58","decode","signData","signPartial","partialSigners","accountOrPublicKey","BusAccount","_fetchSignData","index","nacl","sign","detached","privateKey","signer","findIndex","sigpair","equals","signatureCount","transactionLength","wireTransaction","buffer","PUBKEY_LENGTH","SIGNATURE_LENGTH","isCreditDebit","i","numKeys","byteArray","decodeLength","shift","accountCount","accounts","account","programIndex","accountIndexCount","accountIndex","toBase58","sigPubkeyPair","instructionData","j","some"],"mappings":"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","sourcesContent":["// @flow\n\nimport invariant from 'assert';\nimport * as BufferLayout from 'buffer-layout';\nimport nacl from 'tweetnacl';\nimport bs58 from 'bs58';\n\nimport * as Layout from './resize';\nimport {PubKey} from './pubkey';\nimport {BusAccount} from './bus-account';\nimport * as shortvec from './util/shortvec-encoding';\nimport type {Blockhash} from './bus-blockhash';\n\n/**\n * @typedef {string} TxnSignature\n */\nexport type TxnSignature = string;\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\n/**\n * List of TxOperation object fields that may be initialized at construction\n *\n * @typedef {Object} TxInstructionControlFields\n * @property {?Array<PubKey>} keys\n * @property {?PubKey} controllerId\n * @property {?Buffer} data\n */\ntype TxInstructionControlFields = {|\n  keys?: Array<{pubkey: PubKey, isSigner: boolean, isDebitable: boolean}>,\n  controllerId?: PubKey,\n  data?: Buffer,\n|};\n\n/**\n * Transaction Instruction class\n */\nexport class TxOperation {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<{\n    pubkey: PubKey,\n    isSigner: boolean,\n    isDebitable: boolean,\n  }> = [];\n\n  /**\n   * Controller Id to execute\n   */\n  controllerId: PubKey;\n\n  /**\n   * Controller input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts?: TxInstructionControlFields) {\n    opts && Object.assign(this, opts);\n  }\n}\n\n/**\n * @private\n */\ntype SignaturePubkeyPair = {|\n  signature: Buffer | null,\n  pubKey: PubKey,\n|};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n * @typedef {Object} TxnControlFields\n * @property (?recentPackagehash} A recent block hash\n * @property (?signatures} One or more signatures\n *\n */\ntype TxnControlFields = {|\n  recentPackagehash?: Blockhash | null,\n  signatures?: Array<SignaturePubkeyPair>,\n|};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The operations to atomically execute\n   */\n  operations: Array<TxOperation> = [];\n\n  /**\n   * A recent transaction id.  Must be populated by the caller\n   */\n  recentPackagehash: Blockhash | null;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TxnControlFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more operations to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TxOperation | TxInstructionControlFields,\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No operations');\n    }\n\n    items.forEach(item => {\n      if (item instanceof Transaction) {\n        this.operations = this.operations.concat(item.operations);\n      } else if (item instanceof TxOperation) {\n        this.operations.push(item);\n      } else {\n        this.operations.push(new TxOperation(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * @private\n   */\n  _fetchSignData(): Buffer {\n    const {recentPackagehash} = this;\n    if (!recentPackagehash) {\n      throw new Error('Transaction recentPackagehash required');\n    }\n\n    if (this.operations.length < 1) {\n      throw new Error('No operations provided');\n    }\n\n    const keys = this.signatures.map(({pubKey}) => pubKey.toString());\n    let numRequiredSignatures = 0;\n    let numCreditOnlySignedAccounts = 0;\n    let numCreditOnlyUnsignedAccounts = 0;\n\n    const programIds = [];\n\n    this.operations.forEach(instruction => {\n      instruction.keys.forEach(keySignerPair => {\n        const keyStr = keySignerPair.pubkey.toString();\n        if (!keys.includes(keyStr)) {\n          if (keySignerPair.isSigner) {\n            numRequiredSignatures += 1;\n            if (!keySignerPair.isDebitable) {\n              numCreditOnlySignedAccounts += 1;\n            }\n          } else {\n            if (!keySignerPair.isDebitable) {\n              numCreditOnlyUnsignedAccounts += 1;\n            }\n          }\n          keys.push(keyStr);\n        }\n      });\n\n      const controllerId = instruction.controllerId.toString();\n      if (!programIds.includes(controllerId)) {\n        programIds.push(controllerId);\n      }\n    });\n\n    programIds.forEach(controllerId => {\n      if (!keys.includes(controllerId)) {\n        keys.push(controllerId);\n        numCreditOnlyUnsignedAccounts += 1;\n      }\n    });\n\n    if (numRequiredSignatures > this.signatures.length) {\n      throw new Error(\n        `Insufficent signatures: expected ${numRequiredSignatures} but got ${\n          this.signatures.length\n        }`,\n      );\n    }\n\n    let keyCount = [];\n    shortvec.encodeLength(keyCount, keys.length);\n\n    const operations = this.operations.map(instruction => {\n      const {data, controllerId} = instruction;\n      let keyIndicesCount = [];\n      shortvec.encodeLength(keyIndicesCount, instruction.keys.length);\n      let dataCount = [];\n      shortvec.encodeLength(dataCount, instruction.data.length);\n      return {\n        programIdIndex: keys.indexOf(controllerId.toString()),\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(\n          instruction.keys.map(keyObj =>\n            keys.indexOf(keyObj.pubkey.toString()),\n          ),\n        ),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    operations.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.keyIndices.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    let instructionCount = [];\n    shortvec.encodeLength(instructionCount, operations.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    operations.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numCreditOnlySignedAccounts'),\n      BufferLayout.blob(1, 'numCreditOnlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.pubKey('key'), keys.length, 'keys'),\n      Layout.pubKey('recentPackagehash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.signatures.length]),\n      numCreditOnlySignedAccounts: Buffer.from([numCreditOnlySignedAccounts]),\n      numCreditOnlyUnsignedAccounts: Buffer.from([\n        numCreditOnlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: keys.map(key => new PubKey(key).toBuffer()),\n      recentPackagehash: Buffer.from(bs58.decode(recentPackagehash)),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    signData = signData.slice(0, length + instructionBuffer.length);\n\n    return signData;\n  }\n\n  /**\n   * Sign the Transaction with the specified accounts.  Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used when testing for Transaction confirmation.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentPackagehash` before invoking this method\n   */\n  sign(...signers: Array<BusAccount>) {\n    this.signPartial(...signers);\n  }\n\n  /**\n   * Partially sign a Transaction with the specified accounts.  The `BusAccount`\n   * inputs will be used to sign the Transaction immediately, while any\n   * `PubKey` inputs will be referenced in the signed Transaction but need to\n   * be filled in later by calling `addSigner()` with the matching `BusAccount`.\n   *\n   * All the caveats from the `sign` method apply to `signPartial`\n   */\n  signPartial(...partialSigners: Array<PubKey | BusAccount>) {\n    if (partialSigners.length === 0) {\n      throw new Error('No signers');\n    }\n    const signatures: Array<SignaturePubkeyPair> = partialSigners.map(\n      accountOrPublicKey => {\n        const pubKey =\n          accountOrPublicKey instanceof BusAccount\n            ? accountOrPublicKey.pubKey\n            : accountOrPublicKey;\n        return {\n          signature: null,\n          pubKey,\n        };\n      },\n    );\n    this.signatures = signatures;\n    const signData = this._fetchSignData();\n\n    partialSigners.forEach((accountOrPublicKey, index) => {\n      if (accountOrPublicKey instanceof PubKey) {\n        return;\n      }\n      const signature = nacl.sign.detached(\n        signData,\n        accountOrPublicKey.privateKey,\n      );\n      invariant(signature.length === 64);\n      signatures[index].signature = Buffer.from(signature);\n    });\n  }\n\n  /**\n   * Fill in a signature for a partially signed Transaction.  The `signer` must\n   * be the corresponding `BusAccount` for a `PubKey` that was previously provided to\n   * `signPartial`\n   */\n  addSigner(signer: BusAccount) {\n    const index = this.signatures.findIndex(sigpair =>\n      signer.pubKey.equals(sigpair.pubKey),\n    );\n    if (index < 0) {\n      throw new Error(`Unknown signer: ${signer.pubKey.toString()}`);\n    }\n\n    const signData = this._fetchSignData();\n    const signature = nacl.sign.detached(signData, signer.privateKey);\n    invariant(signature.length === 64);\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * The Transaction must have a valid `signature` before invoking this method\n   */\n  serialize(): Buffer {\n    const {signatures} = this;\n    if (!signatures) {\n      throw new Error('Transaction has not been signed');\n    }\n\n    const signData = this._fetchSignData();\n    const signatureCount = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      invariant(signature !== null, `null signature`);\n      invariant(signature.length === 64, `signature has invalid length`);\n      Buffer.from(signature).copy(\n        wireTransaction,\n        signatureCount.length + index * 64,\n      );\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get keys(): Array<PubKey> {\n    invariant(this.operations.length === 1);\n    return this.operations[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get controllerId(): PubKey {\n    invariant(this.operations.length === 1);\n    return this.operations[0].controllerId;\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get data(): Buffer {\n    invariant(this.operations.length === 1);\n    return this.operations[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer): Transaction {\n    const PUBKEY_LENGTH = 32;\n    const SIGNATURE_LENGTH = 64;\n\n    function isCreditDebit(\n      i: number,\n      numRequiredSignatures: number,\n      numCreditOnlySignedAccounts: number,\n      numCreditOnlyUnsignedAccounts: number,\n      numKeys: number,\n    ): boolean {\n      return (\n        i < numRequiredSignatures - numCreditOnlySignedAccounts ||\n        (i >= numRequiredSignatures &&\n          i < numKeys - numCreditOnlyUnsignedAccounts)\n      );\n    }\n\n    let transaction = new Transaction();\n\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(signature);\n    }\n\n    const numRequiredSignatures = byteArray.shift();\n    // byteArray = byteArray.slice(1); // Skip numRequiredSignatures byte\n    const numCreditOnlySignedAccounts = byteArray.shift();\n    // byteArray = byteArray.slice(1); // Skip numCreditOnlySignedAccounts byte\n    const numCreditOnlyUnsignedAccounts = byteArray.shift();\n    // byteArray = byteArray.slice(1); // Skip numCreditOnlyUnsignedAccounts byte\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accounts = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accounts.push(account);\n    }\n\n    const recentPackagehash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let operations = [];\n    for (let i = 0; i < instructionCount; i++) {\n      let instruction = {};\n      instruction.programIndex = byteArray.shift();\n      const accountIndexCount = shortvec.decodeLength(byteArray);\n      instruction.accountIndex = byteArray.slice(0, accountIndexCount);\n      byteArray = byteArray.slice(accountIndexCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      instruction.data = byteArray.slice(0, dataLength);\n      byteArray = byteArray.slice(dataLength);\n      operations.push(instruction);\n    }\n\n    // Populate Transaction object\n    transaction.recentPackagehash = new PubKey(recentPackagehash).toBase58();\n    for (let i = 0; i < signatureCount; i++) {\n      const sigPubkeyPair = {\n        signature: Buffer.from(signatures[i]),\n        pubKey: new PubKey(accounts[i]),\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    }\n    for (let i = 0; i < instructionCount; i++) {\n      let instructionData = {\n        keys: [],\n        controllerId: new PubKey(accounts[operations[i].programIndex]),\n        data: Buffer.from(operations[i].data),\n      };\n      for (let j = 0; j < operations[i].accountIndex.length; j++) {\n        const pubkey = new PubKey(accounts[operations[i].accountIndex[j]]);\n\n        instructionData.keys.push({\n          pubkey,\n          isSigner: transaction.signatures.some(\n            keyObj => keyObj.pubKey.toString() === pubkey.toString(),\n          ),\n          isDebitable: isCreditDebit(\n            j,\n            numRequiredSignatures,\n            numCreditOnlySignedAccounts,\n            numCreditOnlyUnsignedAccounts,\n            accounts.length,\n          ),\n        });\n      }\n      let instruction = new TxOperation(instructionData);\n      transaction.operations.push(instruction);\n    }\n    return transaction;\n  }\n}\n"]}