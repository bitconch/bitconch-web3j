{"version":3,"sources":["publickey.test.js"],"names":["test","expect","PubKey","toThrow","arrayKey","hexKey","base56Key","equals","toBe","key","isPubKey","toBase58","toString","key2","key3","key4","toBuffer","toHaveLength","key1"],"mappings":"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","sourcesContent":["// @flow\nimport {PubKey} from '../src/pubkey';\n\ntest('invalid', () => {\n  expect(() => {\n    new PubKey([\n      3,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n    ]);\n  }).toThrow();\n\n  expect(() => {\n    new PubKey(\n      '0x300000000000000000000000000000000000000000000000000000000000000000000',\n    );\n  }).toThrow();\n\n  expect(() => {\n    new PubKey(\n      '135693854574979916511997248057056142015550763280047535983739356259273198796800000',\n    );\n  }).toThrow();\n});\n\ntest('equals', () => {\n  const arrayKey = new PubKey([\n    3,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ]);\n  const hexKey = new PubKey(\n    '0x300000000000000000000000000000000000000000000000000000000000000',\n  );\n  const base56Key = new PubKey(\n    'CiDwVBFgWV9E5MvXWoLgnEgn2hK7rJikbvfWavzAQz3',\n  );\n\n  expect(arrayKey.equals(hexKey)).toBe(true);\n  expect(arrayKey.equals(base56Key)).toBe(true);\n});\n\ntest('isPubKey', () => {\n  const key = new PubKey(\n    '0x100000000000000000000000000000000000000000000000000000000000000',\n  );\n  expect(PubKey.isPubKey(key)).toBe(true);\n  expect(PubKey.isPubKey({})).toBe(false);\n});\n\ntest('toBase58', () => {\n  const key = new PubKey(\n    '0x300000000000000000000000000000000000000000000000000000000000000',\n  );\n  expect(key.toBase58()).toBe('CiDwVBFgWV9E5MvXWoLgnEgn2hK7rJikbvfWavzAQz3');\n  expect(key.toString()).toBe('CiDwVBFgWV9E5MvXWoLgnEgn2hK7rJikbvfWavzAQz3');\n\n  const key2 = new PubKey('1111111111111111111111111111BukQL');\n  expect(key2.toBase58()).toBe('1111111111111111111111111111BukQL');\n  expect(key2.toString()).toBe('1111111111111111111111111111BukQL');\n\n  const key3 = new PubKey('11111111111111111111111111111111');\n  expect(key3.toBase58()).toBe('11111111111111111111111111111111');\n\n  const key4 = new PubKey([\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ]);\n  expect(key4.toBase58()).toBe('11111111111111111111111111111111');\n});\n\ntest('toBuffer', () => {\n  const key = new PubKey(\n    '0x300000000000000000000000000000000000000000000000000000000000000',\n  );\n  expect(key.toBuffer()).toHaveLength(32);\n  expect(key.toBase58()).toBe('CiDwVBFgWV9E5MvXWoLgnEgn2hK7rJikbvfWavzAQz3');\n\n  const key2 = new PubKey(\n    '0x000000000000000000000000000000000000000000000000000000000000000',\n  );\n  expect(key2.toBuffer()).toHaveLength(32);\n  expect(key2.toBase58()).toBe('11111111111111111111111111111111');\n});\n\ntest('equals (II)', () => {\n  const key1 = new PubKey([\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n  ]);\n  const key2 = new PubKey(key1.toBuffer());\n\n  expect(key1.equals(key2)).toBe(true);\n});\n"]}