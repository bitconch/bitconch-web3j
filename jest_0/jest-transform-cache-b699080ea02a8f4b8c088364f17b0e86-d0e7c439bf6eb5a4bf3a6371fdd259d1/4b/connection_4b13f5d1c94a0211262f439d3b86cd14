ae3e9c476820d80fea47481d0ab5b6bc
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Connection = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _assert = _interopRequireDefault(require("assert"));

var _url = require("url");

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

var _browser = _interopRequireDefault(require("jayson/lib/client/browser"));

var _superstruct = require("superstruct");

var _rpcWebsockets = require("rpc-websockets");

var _timing = require("./timing");

var _pubkey = require("./pubkey");

var _transactionController = require("./transaction-controller");

var _sleep = require("./util/sleep");

function createRpcReq(url) {
  var server = (0, _browser["default"])(
  /*#__PURE__*/
  function () {
    var _ref = (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee(request, callback) {
      var options, res, text;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              options = {
                method: 'POST',
                body: request,
                headers: {
                  'Content-Type': 'application/json'
                }
              };
              _context.prev = 1;
              _context.next = 4;
              return (0, _nodeFetch["default"])(url, options);

            case 4:
              res = _context.sent;
              _context.next = 7;
              return res.text();

            case 7:
              text = _context.sent;
              callback(null, text);
              _context.next = 14;
              break;

            case 11:
              _context.prev = 11;
              _context.t0 = _context["catch"](1);
              callback(_context.t0);

            case 14:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[1, 11]]);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }());
  return function (method, args) {
    return new Promise(function (resolve, reject) {
      server.request(method, args, function (err, response) {
        if (err) {
          reject(err);
          return;
        }

        resolve(response);
      });
    });
  };
}
/**
 * Expected JSON RPC response for the "fetchAccountBalance" message
 */


var FetchBalanceRpcResult = (0, _superstruct.struct)({
  jsonrpc: _superstruct.struct.literal('2.0'),
  id: 'string',
  error: 'any?',
  result: 'number?'
});
var FetchBalance1RpcResult = (0, _superstruct.struct)({
  jsonrpc: _superstruct.struct.literal('2.0'),
  id: 'string',
  error: 'any?',
  result: 'number?'
});
/**
 * @private
 */

function jsonRpcResult(resultDescription) {
  var jsonRpcVersion = _superstruct.struct.literal('2.0');

  return _superstruct.struct.union([(0, _superstruct.struct)({
    jsonrpc: jsonRpcVersion,
    id: 'string',
    error: 'any'
  }), (0, _superstruct.struct)({
    jsonrpc: jsonRpcVersion,
    id: 'string',
    error: 'null?',
    result: resultDescription
  })]);
}
/**
 * @private
 */


var AccountDetailResult = (0, _superstruct.struct)({
  executable: 'boolean',
  owner: 'array',
  difs: 'number',
  reputations: 'number',
  data: 'array'
});
/**
 * Expected JSON RPC response for the "fetchAccountDetail" message
 */

var fetchAccountDetailRpcResult = jsonRpcResult(AccountDetailResult);
/***
 * Expected JSON RPC response for the "accountNotification" message
 */

var AccountNoticeResult = (0, _superstruct.struct)({
  subscription: 'number',
  result: AccountDetailResult
});
/**
 * @private
 */

var ControllerAccountDetailResult = (0, _superstruct.struct)(['string', AccountDetailResult]);
/***
 * Expected JSON RPC response for the "controllerNotification" message
 */

var ControllerAccountNoticeResult = (0, _superstruct.struct)({
  subscription: 'number',
  result: ControllerAccountDetailResult
});
/**
 * Expected JSON RPC response for the "confmTxn" message
 */

var ConfmTxnRpcResult = jsonRpcResult('boolean');
/**
 * Expected JSON RPC response for the "fetchRoundLeader" message
 */

var FetchRoundLeader = jsonRpcResult('string');
/**
 * Expected JSON RPC response for the "fetchClusterNodes" message
 */

var GetClusterNodes = jsonRpcResult(_superstruct.struct.list([(0, _superstruct.struct)({
  pubkey: 'string',
  gossip: 'string',
  tpu: _superstruct.struct.union(['null', 'string']),
  rpc: _superstruct.struct.union(['null', 'string'])
})]));
/**
 * @ignore
 */

var GetClusterNodes_015 = jsonRpcResult(_superstruct.struct.list([(0, _superstruct.struct)({
  id: 'string',
  gossip: 'string',
  tpu: _superstruct.struct.union(['null', 'string']),
  rpc: _superstruct.struct.union(['null', 'string'])
})]));
/**
 * Expected JSON RPC response for the "getEpochVoteAccounts" message
 */

var GetEpochVoteAccounts = jsonRpcResult(_superstruct.struct.list([(0, _superstruct.struct)({
  votePubkey: 'string',
  nodePubkey: 'string',
  stake: 'number',
  commission: 'number'
})]));
/**
 * Expected JSON RPC response for the "fetchSignatureState" message
 */

var FetchSignatureStateRpcResult = jsonRpcResult(_superstruct.struct.union(['null', _superstruct.struct.union([(0, _superstruct.struct)({
  Ok: 'null'
}), (0, _superstruct.struct)({
  Err: 'object'
})])]));
/**
 * Expected JSON RPC response for the "fetchTxnAmount" message
 */

var FetchTxnAmountRpcResult = jsonRpcResult('number');
/**
 * Expected JSON RPC response for the "getTotalSupply" message
 */

var GetTotalSupplyRpcResult = jsonRpcResult('number');
/**
 * Expected JSON RPC response for the "fetchRecentBlockhash" message
 */

var FetchRecentBlockhash = jsonRpcResult(['string', (0, _superstruct.struct)({
  difsPerSignature: 'number',
  maxDifsPerSignature: 'number',
  minDifsPerSignature: 'number',
  targetDifsPerSignature: 'number',
  targetSignaturesPerSlot: 'number'
})]);
/**
 * @ignore
 */

var GetRecentBlockhash_015 = jsonRpcResult(['string', (0, _superstruct.struct)({
  difsPerSignature: 'number'
})]);
/**
 * Expected JSON RPC response for the "reqDrone" message
 */

var ReqDroneRpcResult = jsonRpcResult('string');
/**
 * Expected JSON RPC response for the "reqDrone1" message
 */

var ReqDrone1RpcResult = jsonRpcResult('string');
/**
 * Expected JSON RPC response for the "sendTxn" message
 */

var SendTxnRpcResult = jsonRpcResult('string');
/**
 * Information describing an account
 *
 * @typedef {Object} AccountDetail
 * @property {number} difs Number of difs assigned to the account
 * @property {PubKey} owner Identifier of the controller that owns the account
 * @property {?Buffer} data Optional data assigned to the account
 * @property {boolean} executable `true` if this account's data contains a loaded controller
 */

// This type exists to workaround an esdoc parse error

/**
 * A connection to a fullnode JSON RPC endpoint
 */
var Connection =
/*#__PURE__*/
function () {
  /**
   * Establish a JSON RPC connection
   *
   * @param endpoint URL to the fullnode JSON RPC endpoint
   */
  function Connection(endpoint) {
    (0, _classCallCheck2["default"])(this, Connection);
    (0, _defineProperty2["default"])(this, "_rpcReq", void 0);
    (0, _defineProperty2["default"])(this, "_rpcWebSock", void 0);
    (0, _defineProperty2["default"])(this, "_rpcWebSockConnected", false);
    (0, _defineProperty2["default"])(this, "_blockhashInfo", void 0);
    (0, _defineProperty2["default"])(this, "_disableBlockhashCaching", false);
    (0, _defineProperty2["default"])(this, "_accountChangeSubscriptions", {});
    (0, _defineProperty2["default"])(this, "_accountChangeSubscriptionCounter", 0);
    (0, _defineProperty2["default"])(this, "_controllerAccountChangeSubscriptions", {});
    (0, _defineProperty2["default"])(this, "_controllerAccountChangeSubscriptionCounter", 0);
    var url = (0, _url.parse)(endpoint);
    this._rpcReq = createRpcReq(url.href);
    this._blockhashInfo = {
      recentPackagehash: null,
      seconds: -1,
      transactionSignatures: []
    };
    url.protocol = url.protocol === 'https:' ? 'wss:' : 'ws:';
    url.host = '';
    url.port = String(Number(url.port) + 1);

    if (url.port === '1') {
      url.port = url.protocol === 'wss:' ? '8901' : '8900';
    }

    this._rpcWebSock = new _rpcWebsockets.Client((0, _url.format)(url), {
      autoconnect: false,
      max_reconnects: Infinity
    });

    this._rpcWebSock.on('open', this._wsOnOpen.bind(this));

    this._rpcWebSock.on('error', this._wsOnErr.bind(this));

    this._rpcWebSock.on('close', this._wsOnClose.bind(this));

    this._rpcWebSock.on('accountNotification', this._wsOnAccountNotice.bind(this));

    this._rpcWebSock.on('controllerNotification', this._wsOnProgramAccountNotification.bind(this));
  }
  /**
   * Fetch the balance for the specified public key
   */


  (0, _createClass2["default"])(Connection, [{
    key: "fetchAccountBalance",
    value: function () {
      var _fetchAccountBalance = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee2(pubKey) {
        var unsafeRes, res;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this._rpcReq('getDif', [pubKey.toBase58()]);

              case 2:
                unsafeRes = _context2.sent;
                res = FetchBalanceRpcResult(unsafeRes);

                if (!res.error) {
                  _context2.next = 6;
                  break;
                }

                throw new Error(res.error.message);

              case 6:
                (0, _assert["default"])(typeof res.result !== 'undefined');
                return _context2.abrupt("return", res.result);

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function fetchAccountBalance(_x3) {
        return _fetchAccountBalance.apply(this, arguments);
      }

      return fetchAccountBalance;
    }()
  }, {
    key: "fetchAccountBalance1",
    value: function () {
      var _fetchAccountBalance2 = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee3(pubKey) {
        var unsafeRes, res;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this._rpcReq('getDif1', [pubKey.toBase58()]);

              case 2:
                unsafeRes = _context3.sent;
                res = FetchBalance1RpcResult(unsafeRes);

                if (!res.error) {
                  _context3.next = 6;
                  break;
                }

                throw new Error(res.error.message);

              case 6:
                (0, _assert["default"])(typeof res.result !== 'undefined');
                return _context3.abrupt("return", res.result);

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function fetchAccountBalance1(_x4) {
        return _fetchAccountBalance2.apply(this, arguments);
      }

      return fetchAccountBalance1;
    }()
    /**
     * Fetch all the account info for the specified public key
     */

  }, {
    key: "fetchAccountDetail",
    value: function () {
      var _fetchAccountDetail = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee4(pubKey) {
        var unsafeRes, res, result;
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this._rpcReq('getAccountInfo', [pubKey.toBase58()]);

              case 2:
                unsafeRes = _context4.sent;
                res = fetchAccountDetailRpcResult(unsafeRes);

                if (!res.error) {
                  _context4.next = 6;
                  break;
                }

                throw new Error(res.error.message);

              case 6:
                result = res.result;
                (0, _assert["default"])(typeof result !== 'undefined');
                return _context4.abrupt("return", {
                  executable: result.executable,
                  owner: new _pubkey.PubKey(result.owner),
                  difs: result.difs,
                  reputations: result.reputations,
                  data: Buffer.from(result.data)
                });

              case 9:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function fetchAccountDetail(_x5) {
        return _fetchAccountDetail.apply(this, arguments);
      }

      return fetchAccountDetail;
    }()
    /**
     * Confirm the transaction identified by the specified signature
     */

  }, {
    key: "confmTxn",
    value: function () {
      var _confmTxn = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee5(signature) {
        var unsafeRes, res;
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this._rpcReq('confirmTxn', [signature]);

              case 2:
                unsafeRes = _context5.sent;
                res = ConfmTxnRpcResult(unsafeRes);

                if (!res.error) {
                  _context5.next = 6;
                  break;
                }

                throw new Error(res.error.message);

              case 6:
                (0, _assert["default"])(typeof res.result !== 'undefined');
                return _context5.abrupt("return", res.result);

              case 8:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function confmTxn(_x6) {
        return _confmTxn.apply(this, arguments);
      }

      return confmTxn;
    }()
    /**
     * Return the list of nodes that are currently participating in the cluster
     */

  }, {
    key: "fetchClusterNodes",
    value: function () {
      var _fetchClusterNodes = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee6() {
        var unsafeRes, res_015, res;
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this._rpcReq('getClusterNodes', []);

              case 2:
                unsafeRes = _context6.sent;
                _context6.prev = 3;
                res_015 = GetClusterNodes_015(unsafeRes);

                if (!res_015.error) {
                  _context6.next = 8;
                  break;
                }

                console.log('no', res_015.error);
                throw new Error(res_015.error.message);

              case 8:
                return _context6.abrupt("return", res_015.result.map(function (node) {
                  node.pubkey = node.id;
                  node.id = undefined;
                  return node;
                }));

              case 11:
                _context6.prev = 11;
                _context6.t0 = _context6["catch"](3);

              case 13:
                // End Legacy v0.15 response
                res = GetClusterNodes(unsafeRes);

                if (!res.error) {
                  _context6.next = 16;
                  break;
                }

                throw new Error(res.error.message);

              case 16:
                (0, _assert["default"])(typeof res.result !== 'undefined');
                return _context6.abrupt("return", res.result);

              case 18:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this, [[3, 11]]);
      }));

      function fetchClusterNodes() {
        return _fetchClusterNodes.apply(this, arguments);
      }

      return fetchClusterNodes;
    }()
    /**
     * Return the list of nodes that are currently participating in the cluster
     */

  }, {
    key: "getEpochVoteAccounts",
    value: function () {
      var _getEpochVoteAccounts = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee7() {
        var unsafeRes, res;
        return _regenerator["default"].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this._rpcReq('getEpochVoteAccounts', []);

              case 2:
                unsafeRes = _context7.sent;
                res = GetEpochVoteAccounts(unsafeRes); //const res = unsafeRes;

                if (!res.error) {
                  _context7.next = 6;
                  break;
                }

                throw new Error(res.error.message);

              case 6:
                (0, _assert["default"])(typeof res.result !== 'undefined');
                return _context7.abrupt("return", res.result);

              case 8:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function getEpochVoteAccounts() {
        return _getEpochVoteAccounts.apply(this, arguments);
      }

      return getEpochVoteAccounts;
    }()
    /**
     * Fetch the current slot leader of the cluster
     */

  }, {
    key: "fetchRoundLeader",
    value: function () {
      var _fetchRoundLeader = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee8() {
        var unsafeRes, res;
        return _regenerator["default"].wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return this._rpcReq('getRoundLeader', []);

              case 2:
                unsafeRes = _context8.sent;
                res = FetchRoundLeader(unsafeRes);

                if (!res.error) {
                  _context8.next = 6;
                  break;
                }

                throw new Error(res.error.message);

              case 6:
                (0, _assert["default"])(typeof res.result !== 'undefined');
                return _context8.abrupt("return", res.result);

              case 8:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function fetchRoundLeader() {
        return _fetchRoundLeader.apply(this, arguments);
      }

      return fetchRoundLeader;
    }()
    /**
     * Fetch the current transaction count of the cluster
     */

  }, {
    key: "fetchSignatureState",
    value: function () {
      var _fetchSignatureState = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee9(signature) {
        var unsafeRes, res;
        return _regenerator["default"].wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this._rpcReq('getSignatureState', [signature]);

              case 2:
                unsafeRes = _context9.sent;
                res = FetchSignatureStateRpcResult(unsafeRes);

                if (!res.error) {
                  _context9.next = 6;
                  break;
                }

                throw new Error(res.error.message);

              case 6:
                (0, _assert["default"])(typeof res.result !== 'undefined');
                return _context9.abrupt("return", res.result);

              case 8:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function fetchSignatureState(_x7) {
        return _fetchSignatureState.apply(this, arguments);
      }

      return fetchSignatureState;
    }()
    /**
     * Fetch the current transaction count of the cluster
     */

  }, {
    key: "fetchTxnAmount",
    value: function () {
      var _fetchTxnAmount = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee10() {
        var unsafeRes, res;
        return _regenerator["default"].wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return this._rpcReq('getTxnCnt', []);

              case 2:
                unsafeRes = _context10.sent;
                res = FetchTxnAmountRpcResult(unsafeRes);

                if (!res.error) {
                  _context10.next = 6;
                  break;
                }

                throw new Error(res.error.message);

              case 6:
                (0, _assert["default"])(typeof res.result !== 'undefined');
                return _context10.abrupt("return", Number(res.result));

              case 8:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function fetchTxnAmount() {
        return _fetchTxnAmount.apply(this, arguments);
      }

      return fetchTxnAmount;
    }()
    /**
     * Fetch the current total currency supply of the cluster
     */

  }, {
    key: "getTotalSupply",
    value: function () {
      var _getTotalSupply = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee11() {
        var unsafeRes, res;
        return _regenerator["default"].wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return this._rpcReq('getTotalSupply', []);

              case 2:
                unsafeRes = _context11.sent;
                res = GetTotalSupplyRpcResult(unsafeRes);

                if (!res.error) {
                  _context11.next = 6;
                  break;
                }

                throw new Error(res.error.message);

              case 6:
                (0, _assert["default"])(typeof res.result !== 'undefined');
                return _context11.abrupt("return", Number(res.result));

              case 8:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function getTotalSupply() {
        return _getTotalSupply.apply(this, arguments);
      }

      return getTotalSupply;
    }()
    /**
     * Fetch a recent blockhash from the cluster
     */

  }, {
    key: "fetchRecentBlockhash",
    value: function () {
      var _fetchRecentBlockhash = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee12() {
        var unsafeRes, res_015, _res_015$result, blockhash, feeCalculator, res;

        return _regenerator["default"].wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                _context12.next = 2;
                return this._rpcReq('getLatestBlockhash', []);

              case 2:
                unsafeRes = _context12.sent;
                _context12.prev = 3;
                res_015 = GetRecentBlockhash_015(unsafeRes);

                if (!res_015.error) {
                  _context12.next = 7;
                  break;
                }

                throw new Error(res_015.error.message);

              case 7:
                _res_015$result = (0, _slicedToArray2["default"])(res_015.result, 2), blockhash = _res_015$result[0], feeCalculator = _res_015$result[1];
                feeCalculator.targetSignaturesPerSlot = 42;
                feeCalculator.targetDifsPerSignature = feeCalculator.difsPerSignature;
                return _context12.abrupt("return", [blockhash, feeCalculator]);

              case 13:
                _context12.prev = 13;
                _context12.t0 = _context12["catch"](3);

              case 15:
                // End Legacy v0.15 response
                res = FetchRecentBlockhash(unsafeRes);

                if (!res.error) {
                  _context12.next = 18;
                  break;
                }

                throw new Error(res.error.message);

              case 18:
                (0, _assert["default"])(typeof res.result !== 'undefined');
                return _context12.abrupt("return", res.result);

              case 20:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this, [[3, 13]]);
      }));

      function fetchRecentBlockhash() {
        return _fetchRecentBlockhash.apply(this, arguments);
      }

      return fetchRecentBlockhash;
    }()
    /**
     * Request an allocation of difs to the specified account
     */

  }, {
    key: "reqDrone",
    value: function () {
      var _reqDrone = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee13(to, amount) {
        var unsafeRes, res;
        return _regenerator["default"].wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                _context13.next = 2;
                return this._rpcReq('requestDif', [to.toBase58(), amount]);

              case 2:
                unsafeRes = _context13.sent;
                res = ReqDroneRpcResult(unsafeRes);

                if (!res.error) {
                  _context13.next = 6;
                  break;
                }

                throw new Error(res.error.message);

              case 6:
                (0, _assert["default"])(typeof res.result !== 'undefined');
                return _context13.abrupt("return", res.result);

              case 8:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function reqDrone(_x8, _x9) {
        return _reqDrone.apply(this, arguments);
      }

      return reqDrone;
    }()
    /**
    * Request an allocation of reputations to the specified account
    */

  }, {
    key: "reqDrone1",
    value: function () {
      var _reqDrone2 = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee14(to, amount) {
        var unsafeRes, res;
        return _regenerator["default"].wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.next = 2;
                return this._rpcReq('requestDif1', [to.toBase58(), amount]);

              case 2:
                unsafeRes = _context14.sent;
                res = ReqDrone1RpcResult(unsafeRes);

                if (!res.error) {
                  _context14.next = 6;
                  break;
                }

                throw new Error(res.error.message);

              case 6:
                (0, _assert["default"])(typeof res.result !== 'undefined');
                return _context14.abrupt("return", res.result);

              case 8:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function reqDrone1(_x10, _x11) {
        return _reqDrone2.apply(this, arguments);
      }

      return reqDrone1;
    }()
    /**
     * Sign and send a transaction
     */

  }, {
    key: "sendTxn",
    value: function () {
      var _sendTxn = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee15(transaction) {
        var _len,
            signers,
            _key,
            seconds,
            signature,
            attempts,
            startTime,
            _ref2,
            _ref3,
            recentPackagehash,
            wireTransaction,
            _args15 = arguments;

        return _regenerator["default"].wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                for (_len = _args15.length, signers = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  signers[_key - 1] = _args15[_key];
                }

              case 1:
                // Attempt to use a recent blockhash for up to 30 seconds
                seconds = new Date().getSeconds();

                if (!(this._blockhashInfo.recentPackagehash != null && this._blockhashInfo.seconds < seconds + 30)) {
                  _context15.next = 12;
                  break;
                }

                transaction.recentPackagehash = this._blockhashInfo.recentPackagehash;
                transaction.sign.apply(transaction, signers);

                if (transaction.signature) {
                  _context15.next = 7;
                  break;
                }

                throw new Error('!signature');

              case 7:
                // If the signature of this transaction has not been seen before with the
                // current recentPackagehash, all done.
                signature = transaction.signature.toString();

                if (this._blockhashInfo.transactionSignatures.includes(signature)) {
                  _context15.next = 12;
                  break;
                }

                this._blockhashInfo.transactionSignatures.push(signature);

                if (this._disableBlockhashCaching) {
                  this._blockhashInfo.seconds = -1;
                }

                return _context15.abrupt("break", 31);

              case 12:
                // Fetch a new blockhash
                attempts = 0;
                startTime = Date.now();

              case 14:
                _context15.next = 16;
                return this.fetchRecentBlockhash();

              case 16:
                _ref2 = _context15.sent;
                _ref3 = (0, _slicedToArray2["default"])(_ref2, 1);
                recentPackagehash = _ref3[0];

                if (!(this._blockhashInfo.recentPackagehash != recentPackagehash)) {
                  _context15.next = 22;
                  break;
                }

                this._blockhashInfo = {
                  recentPackagehash: recentPackagehash,
                  seconds: new Date().getSeconds(),
                  transactionSignatures: []
                };
                return _context15.abrupt("break", 29);

              case 22:
                if (!(attempts === 50)) {
                  _context15.next = 24;
                  break;
                }

                throw new Error("Unable to obtain a new blockhash after ".concat(Date.now() - startTime, "ms"));

              case 24:
                _context15.next = 26;
                return (0, _sleep.sleep)(500 * _timing.DEFAULT_TICKS_PER_SLOT / _timing.NUM_TICKS_PER_SEC);

              case 26:
                ++attempts;

              case 27:
                _context15.next = 14;
                break;

              case 29:
                _context15.next = 1;
                break;

              case 31:
                wireTransaction = transaction.serialize();
                _context15.next = 34;
                return this.sendNativeTxn(wireTransaction);

              case 34:
                return _context15.abrupt("return", _context15.sent);

              case 35:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function sendTxn(_x12) {
        return _sendTxn.apply(this, arguments);
      }

      return sendTxn;
    }()
    /**
     * @private
     */

  }, {
    key: "fullnodeExit",
    value: function () {
      var _fullnodeExit = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee16() {
        var unsafeRes, res;
        return _regenerator["default"].wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                _context16.next = 2;
                return this._rpcReq('fullnodeQuit', []);

              case 2:
                unsafeRes = _context16.sent;
                res = jsonRpcResult('boolean')(unsafeRes);

                if (!res.error) {
                  _context16.next = 6;
                  break;
                }

                throw new Error(res.error.message);

              case 6:
                (0, _assert["default"])(typeof res.result !== 'undefined');
                return _context16.abrupt("return", res.result);

              case 8:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      function fullnodeExit() {
        return _fullnodeExit.apply(this, arguments);
      }

      return fullnodeExit;
    }()
    /**
     * Send a transaction that has already been signed and serialized into the
     * wire format
     */

  }, {
    key: "sendNativeTxn",
    value: function () {
      var _sendNativeTxn = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee17(rawTransaction) {
        var unsafeRes, res;
        return _regenerator["default"].wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                _context17.next = 2;
                return this._rpcReq('sendTxn', [(0, _toConsumableArray2["default"])(rawTransaction)]);

              case 2:
                unsafeRes = _context17.sent;
                res = SendTxnRpcResult(unsafeRes);

                if (!res.error) {
                  _context17.next = 6;
                  break;
                }

                throw new Error(res.error.message);

              case 6:
                (0, _assert["default"])(typeof res.result !== 'undefined');
                (0, _assert["default"])(res.result);
                return _context17.abrupt("return", res.result);

              case 9:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      function sendNativeTxn(_x13) {
        return _sendNativeTxn.apply(this, arguments);
      }

      return sendNativeTxn;
    }()
    /**
     * @private
     */

  }, {
    key: "_wsOnOpen",
    value: function _wsOnOpen() {
      this._rpcWebSockConnected = true;

      this._updateSubscriptions();
    }
    /**
     * @private
     */

  }, {
    key: "_wsOnErr",
    value: function _wsOnErr(err) {
      console.log('ws error:', err.message);
    }
    /**
     * @private
     */

  }, {
    key: "_wsOnClose",
    value: function _wsOnClose(code, message) {
      // 1000 means _rpcWebSock.close() was called explicitly
      if (code !== 1000) {
        console.log('ws close:', code, message);
      }

      this._rpcWebSockConnected = false;
    }
    /**
     * @private
     */

  }, {
    key: "_updateSubscriptions",
    value: function () {
      var _updateSubscriptions2 = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee18() {
        var accountKeys, programKeys, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, id, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _id, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _id2, _this$_accountChangeS, subscriptionId, pubKey, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, _id3, _this$_controllerAcco, controllerId;

        return _regenerator["default"].wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                accountKeys = Object.keys(this._accountChangeSubscriptions).map(Number);
                programKeys = Object.keys(this._controllerAccountChangeSubscriptions).map(Number);

                if (!(accountKeys.length === 0 && programKeys.length === 0)) {
                  _context18.next = 5;
                  break;
                }

                this._rpcWebSock.close();

                return _context18.abrupt("return");

              case 5:
                if (this._rpcWebSockConnected) {
                  _context18.next = 46;
                  break;
                }

                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context18.prev = 9;

                for (_iterator = accountKeys[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  id = _step.value;
                  this._accountChangeSubscriptions[id].subscriptionId = null;
                }

                _context18.next = 17;
                break;

              case 13:
                _context18.prev = 13;
                _context18.t0 = _context18["catch"](9);
                _didIteratorError = true;
                _iteratorError = _context18.t0;

              case 17:
                _context18.prev = 17;
                _context18.prev = 18;

                if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                  _iterator["return"]();
                }

              case 20:
                _context18.prev = 20;

                if (!_didIteratorError) {
                  _context18.next = 23;
                  break;
                }

                throw _iteratorError;

              case 23:
                return _context18.finish(20);

              case 24:
                return _context18.finish(17);

              case 25:
                _iteratorNormalCompletion2 = true;
                _didIteratorError2 = false;
                _iteratorError2 = undefined;
                _context18.prev = 28;

                for (_iterator2 = programKeys[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  _id = _step2.value;
                  this._controllerAccountChangeSubscriptions[_id].subscriptionId = null;
                }

                _context18.next = 36;
                break;

              case 32:
                _context18.prev = 32;
                _context18.t1 = _context18["catch"](28);
                _didIteratorError2 = true;
                _iteratorError2 = _context18.t1;

              case 36:
                _context18.prev = 36;
                _context18.prev = 37;

                if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                  _iterator2["return"]();
                }

              case 39:
                _context18.prev = 39;

                if (!_didIteratorError2) {
                  _context18.next = 42;
                  break;
                }

                throw _iteratorError2;

              case 42:
                return _context18.finish(39);

              case 43:
                return _context18.finish(36);

              case 44:
                this._rpcWebSock.connect();

                return _context18.abrupt("return");

              case 46:
                _iteratorNormalCompletion3 = true;
                _didIteratorError3 = false;
                _iteratorError3 = undefined;
                _context18.prev = 49;
                _iterator3 = accountKeys[Symbol.iterator]();

              case 51:
                if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                  _context18.next = 67;
                  break;
                }

                _id2 = _step3.value;
                _this$_accountChangeS = this._accountChangeSubscriptions[_id2], subscriptionId = _this$_accountChangeS.subscriptionId, pubKey = _this$_accountChangeS.pubKey;

                if (!(subscriptionId === null)) {
                  _context18.next = 64;
                  break;
                }

                _context18.prev = 55;
                _context18.next = 58;
                return this._rpcWebSock.call('accountSubscribe', [pubKey]);

              case 58:
                this._accountChangeSubscriptions[_id2].subscriptionId = _context18.sent;
                _context18.next = 64;
                break;

              case 61:
                _context18.prev = 61;
                _context18.t2 = _context18["catch"](55);
                console.log("accountSubscribe error for ".concat(pubKey, ": ").concat(_context18.t2.message));

              case 64:
                _iteratorNormalCompletion3 = true;
                _context18.next = 51;
                break;

              case 67:
                _context18.next = 73;
                break;

              case 69:
                _context18.prev = 69;
                _context18.t3 = _context18["catch"](49);
                _didIteratorError3 = true;
                _iteratorError3 = _context18.t3;

              case 73:
                _context18.prev = 73;
                _context18.prev = 74;

                if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                  _iterator3["return"]();
                }

              case 76:
                _context18.prev = 76;

                if (!_didIteratorError3) {
                  _context18.next = 79;
                  break;
                }

                throw _iteratorError3;

              case 79:
                return _context18.finish(76);

              case 80:
                return _context18.finish(73);

              case 81:
                _iteratorNormalCompletion4 = true;
                _didIteratorError4 = false;
                _iteratorError4 = undefined;
                _context18.prev = 84;
                _iterator4 = programKeys[Symbol.iterator]();

              case 86:
                if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
                  _context18.next = 102;
                  break;
                }

                _id3 = _step4.value;
                _this$_controllerAcco = this._controllerAccountChangeSubscriptions[_id3], subscriptionId = _this$_controllerAcco.subscriptionId, controllerId = _this$_controllerAcco.controllerId;

                if (!(subscriptionId === null)) {
                  _context18.next = 99;
                  break;
                }

                _context18.prev = 90;
                _context18.next = 93;
                return this._rpcWebSock.call('programSubscribe', [controllerId]);

              case 93:
                this._controllerAccountChangeSubscriptions[_id3].subscriptionId = _context18.sent;
                _context18.next = 99;
                break;

              case 96:
                _context18.prev = 96;
                _context18.t4 = _context18["catch"](90);
                console.log("programSubscribe error for ".concat(controllerId, ": ").concat(_context18.t4.message));

              case 99:
                _iteratorNormalCompletion4 = true;
                _context18.next = 86;
                break;

              case 102:
                _context18.next = 108;
                break;

              case 104:
                _context18.prev = 104;
                _context18.t5 = _context18["catch"](84);
                _didIteratorError4 = true;
                _iteratorError4 = _context18.t5;

              case 108:
                _context18.prev = 108;
                _context18.prev = 109;

                if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                  _iterator4["return"]();
                }

              case 111:
                _context18.prev = 111;

                if (!_didIteratorError4) {
                  _context18.next = 114;
                  break;
                }

                throw _iteratorError4;

              case 114:
                return _context18.finish(111);

              case 115:
                return _context18.finish(108);

              case 116:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this, [[9, 13, 17, 25], [18,, 20, 24], [28, 32, 36, 44], [37,, 39, 43], [49, 69, 73, 81], [55, 61], [74,, 76, 80], [84, 104, 108, 116], [90, 96], [109,, 111, 115]]);
      }));

      function _updateSubscriptions() {
        return _updateSubscriptions2.apply(this, arguments);
      }

      return _updateSubscriptions;
    }()
    /**
     * @private
     */

  }, {
    key: "_wsOnAccountNotice",
    value: function _wsOnAccountNotice(notification) {
      var res = AccountNoticeResult(notification);

      if (res.error) {
        throw new Error(res.error.message);
      }

      var keys = Object.keys(this._accountChangeSubscriptions).map(Number);
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = keys[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var id = _step5.value;
          var sub = this._accountChangeSubscriptions[id];

          if (sub.subscriptionId === res.subscription) {
            var result = res.result;
            (0, _assert["default"])(typeof result !== 'undefined');
            sub.callback({
              executable: result.executable,
              owner: new _pubkey.PubKey(result.owner),
              difs: result.difs,
              reputations: result.reputations,
              data: Buffer.from(result.data)
            });
            return true;
          }
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
            _iterator5["return"]();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }
    }
    /**
     * Register a callback to be invoked whenever the specified account changes
     *
     * @param publickey Public key of the account to monitor
     * @param callback Function to invoke whenever the account is changed
     * @return subscription id
     */

  }, {
    key: "onAccountChange",
    value: function onAccountChange(pubKey, callback) {
      var id = ++this._accountChangeSubscriptionCounter;
      this._accountChangeSubscriptions[id] = {
        pubKey: pubKey.toBase58(),
        callback: callback,
        subscriptionId: null
      };

      this._updateSubscriptions();

      return id;
    }
    /**
     * Deregister an account notification callback
     *
     * @param id subscription id to deregister
     */

  }, {
    key: "removeListenerOfAccountChange",
    value: function () {
      var _removeListenerOfAccountChange = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee19(id) {
        var subscriptionId;
        return _regenerator["default"].wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                if (!this._accountChangeSubscriptions[id]) {
                  _context19.next = 15;
                  break;
                }

                subscriptionId = this._accountChangeSubscriptions[id].subscriptionId;
                delete this._accountChangeSubscriptions[id];

                if (!(subscriptionId !== null)) {
                  _context19.next = 12;
                  break;
                }

                _context19.prev = 4;
                _context19.next = 7;
                return this._rpcWebSock.call('accountUnsubscribe', [subscriptionId]);

              case 7:
                _context19.next = 12;
                break;

              case 9:
                _context19.prev = 9;
                _context19.t0 = _context19["catch"](4);
                console.log('accountUnsubscribe error:', _context19.t0.message);

              case 12:
                this._updateSubscriptions();

                _context19.next = 16;
                break;

              case 15:
                throw new Error("Unknown account change id: ".concat(id));

              case 16:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this, [[4, 9]]);
      }));

      function removeListenerOfAccountChange(_x14) {
        return _removeListenerOfAccountChange.apply(this, arguments);
      }

      return removeListenerOfAccountChange;
    }()
    /**
     * @private
     */

  }, {
    key: "_wsOnProgramAccountNotification",
    value: function _wsOnProgramAccountNotification(notification) {
      var res = ControllerAccountNoticeResult(notification);

      if (res.error) {
        throw new Error(res.error.message);
      }

      var keys = Object.keys(this._controllerAccountChangeSubscriptions).map(Number);
      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        for (var _iterator6 = keys[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var id = _step6.value;
          var sub = this._controllerAccountChangeSubscriptions[id];

          if (sub.subscriptionId === res.subscription) {
            var result = res.result;
            (0, _assert["default"])(typeof result !== 'undefined');
            sub.callback({
              accountId: result[0],
              fetchAccountDetail: {
                executable: result[1].executable,
                owner: new _pubkey.PubKey(result[1].owner),
                difs: result[1].difs,
                reputations: result[1].reputations,
                data: Buffer.from(result[1].data)
              }
            });
            return true;
          }
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
            _iterator6["return"]();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }
    }
    /**
     * Register a callback to be invoked whenever accounts owned by the
     * specified controller change
     *
     * @param controllerId Public key of the controller to monitor
     * @param callback Function to invoke whenever the account is changed
     * @return subscription id
     */

  }, {
    key: "onControllerAccountChange",
    value: function onControllerAccountChange(controllerId, callback) {
      var id = ++this._controllerAccountChangeSubscriptionCounter;
      this._controllerAccountChangeSubscriptions[id] = {
        controllerId: controllerId.toBase58(),
        callback: callback,
        subscriptionId: null
      };

      this._updateSubscriptions();

      return id;
    }
    /**
     * Deregister an account notification callback
     *
     * @param id subscription id to deregister
     */

  }, {
    key: "removeControllerAccountChangeListener",
    value: function () {
      var _removeControllerAccountChangeListener = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee20(id) {
        var subscriptionId;
        return _regenerator["default"].wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                if (!this._controllerAccountChangeSubscriptions[id]) {
                  _context20.next = 15;
                  break;
                }

                subscriptionId = this._controllerAccountChangeSubscriptions[id].subscriptionId;
                delete this._controllerAccountChangeSubscriptions[id];

                if (!(subscriptionId !== null)) {
                  _context20.next = 12;
                  break;
                }

                _context20.prev = 4;
                _context20.next = 7;
                return this._rpcWebSock.call('programUnsubscribe', [subscriptionId]);

              case 7:
                _context20.next = 12;
                break;

              case 9:
                _context20.prev = 9;
                _context20.t0 = _context20["catch"](4);
                console.log('programUnsubscribe error:', _context20.t0.message);

              case 12:
                this._updateSubscriptions();

                _context20.next = 16;
                break;

              case 15:
                throw new Error("Unknown account change id: ".concat(id));

              case 16:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this, [[4, 9]]);
      }));

      function removeControllerAccountChangeListener(_x15) {
        return _removeControllerAccountChangeListener.apply(this, arguments);
      }

      return removeControllerAccountChangeListener;
    }()
  }]);
  return Connection;
}();

exports.Connection = Connection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,