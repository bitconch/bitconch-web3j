b8a4673699a4e4b45bbe29ce97cb7e58
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _src = require("../src");

var _timing = require("../src/timing");

var _nodeFetch = require("./__mocks__/node-fetch");

var _getRecentBlockhash = require("./mockrpc/get-recent-blockhash");

var _url = require("./url");

var _sleep = require("../src/util/sleep");

if (!_nodeFetch.mockRpcEnabled) {
  // The default of 5 seconds is too slow for live testing sometimes
  jest.setTimeout(30000);
}

var errorMessage = 'Invalid request';
var errorResponse = {
  error: {
    message: errorMessage
  },
  result: undefined
};
test('get account info - error', function () {
  var account = new _src.BusAccount();
  var connection = new _src.Connection(_url.url);

  _nodeFetch.mockRpc.push([_url.url, {
    method: 'getAccountInfo',
    params: [account.pubKey.toBase58()]
  }, errorResponse]);

  expect(connection.fetchAccountDetail(account.pubKey)).rejects.toThrow(errorMessage);
});
test('fullnodeQuit',
/*#__PURE__*/
(0, _asyncToGenerator2["default"])(
/*#__PURE__*/
_regenerator["default"].mark(function _callee() {
  var connection, result;
  return _regenerator["default"].wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (_nodeFetch.mockRpcEnabled) {
            _context.next = 3;
            break;
          }

          console.log('fullnodeExit skipped on live node');
          return _context.abrupt("return");

        case 3:
          connection = new _src.Connection(_url.url);

          _nodeFetch.mockRpc.push([_url.url, {
            method: 'fullnodeQuit'
          }, {
            error: null,
            result: false
          }]);

          _context.next = 7;
          return connection.fullnodeExit();

        case 7:
          result = _context.sent;
          expect(result).toBe(false);

        case 9:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
})));
test('get balance',
/*#__PURE__*/
(0, _asyncToGenerator2["default"])(
/*#__PURE__*/
_regenerator["default"].mark(function _callee2() {
  var account, connection, balance;
  return _regenerator["default"].wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          account = new _src.BusAccount();
          connection = new _src.Connection(_url.url);

          _nodeFetch.mockRpc.push([_url.url, {
            method: 'getDif',
            params: [account.pubKey.toBase58()]
          }, {
            error: null,
            result: 0
          }]);

          _context2.next = 5;
          return connection.fetchAccountBalance(account.pubKey);

        case 5:
          balance = _context2.sent;
          expect(balance).toBeGreaterThanOrEqual(0);

        case 7:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2);
})));
test('get reputation',
/*#__PURE__*/
(0, _asyncToGenerator2["default"])(
/*#__PURE__*/
_regenerator["default"].mark(function _callee3() {
  var account, connection, balance;
  return _regenerator["default"].wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          account = new _src.BusAccount();
          connection = new _src.Connection(_url.url);

          _nodeFetch.mockRpc.push([_url.url, {
            method: 'getDif1',
            params: [account.pubKey.toBase58()]
          }, {
            error: null,
            result: 0
          }]);

          _context3.next = 5;
          return connection.fetchAccountBalance1(account.pubKey);

        case 5:
          balance = _context3.sent;
          expect(balance).toBeGreaterThanOrEqual(0);

        case 7:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3);
})));
test('get slot leader',
/*#__PURE__*/
(0, _asyncToGenerator2["default"])(
/*#__PURE__*/
_regenerator["default"].mark(function _callee4() {
  var connection, slotLeader;
  return _regenerator["default"].wrap(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          connection = new _src.Connection(_url.url);

          _nodeFetch.mockRpc.push([_url.url, {
            method: 'getRoundLeader'
          }, {
            error: null,
            result: '11111111111111111111111111111111'
          }]);

          _context4.next = 4;
          return connection.fetchRoundLeader();

        case 4:
          slotLeader = _context4.sent;

          if (_nodeFetch.mockRpcEnabled) {
            expect(slotLeader).toBe('11111111111111111111111111111111');
          } else {
            // No idea what the correct slotLeader value should be on a live cluster, so
            // just check the type
            expect((0, _typeof2["default"])(slotLeader)).toBe('string');
          }

        case 6:
        case "end":
          return _context4.stop();
      }
    }
  }, _callee4);
})));
test('get cluster nodes',
/*#__PURE__*/
(0, _asyncToGenerator2["default"])(
/*#__PURE__*/
_regenerator["default"].mark(function _callee5() {
  var connection, clusterNodes;
  return _regenerator["default"].wrap(function _callee5$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          connection = new _src.Connection(_url.url);

          _nodeFetch.mockRpc.push([_url.url, {
            method: 'getClusterNodes'
          }, {
            error: null,
            result: [{
              pubkey: '11111111111111111111111111111111',
              gossip: '127.0.0.0:1234',
              tpu: '127.0.0.0:1235',
              rpc: null
            }]
          }]);

          _context5.next = 4;
          return connection.fetchClusterNodes();

        case 4:
          clusterNodes = _context5.sent;

          if (_nodeFetch.mockRpcEnabled) {
            expect(clusterNodes).toHaveLength(1);
            expect(clusterNodes[0].pubkey).toBe('11111111111111111111111111111111');
            expect((0, _typeof2["default"])(clusterNodes[0].gossip)).toBe('string');
            expect((0, _typeof2["default"])(clusterNodes[0].tpu)).toBe('string');
            expect(clusterNodes[0].rpc).toBeNull();
          } else {
            // There should be at least one node (the node that we're talking to)
            expect(clusterNodes.length).toBeGreaterThan(0);
          }

        case 6:
        case "end":
          return _context5.stop();
      }
    }
  }, _callee5);
})));
test('getEpochVoteAccounts',
/*#__PURE__*/
(0, _asyncToGenerator2["default"])(
/*#__PURE__*/
_regenerator["default"].mark(function _callee6() {
  var connection, voteAccounts;
  return _regenerator["default"].wrap(function _callee6$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          if (!_nodeFetch.mockRpcEnabled) {
            _context6.next = 3;
            break;
          }

          console.log('non-live test skipped');
          return _context6.abrupt("return");

        case 3:
          connection = new _src.Connection(_url.url);
          _context6.next = 6;
          return connection.getEpochVoteAccounts();

        case 6:
          voteAccounts = _context6.sent;
          expect(voteAccounts.length).toBeGreaterThan(0);

        case 8:
        case "end":
          return _context6.stop();
      }
    }
  }, _callee6);
})));
test('confirm transaction - error', function () {
  var connection = new _src.Connection(_url.url);
  var badTransactionSignature = 'bad transaction signature';

  _nodeFetch.mockRpc.push([_url.url, {
    method: 'confirmTxn',
    params: [badTransactionSignature]
  }, errorResponse]);

  expect(connection.confmTxn(badTransactionSignature)).rejects.toThrow(errorMessage);

  _nodeFetch.mockRpc.push([_url.url, {
    method: 'getSignatureState',
    params: [badTransactionSignature]
  }, errorResponse]);

  expect(connection.fetchSignatureState(badTransactionSignature)).rejects.toThrow(errorMessage);
});
test('get transaction count',
/*#__PURE__*/
(0, _asyncToGenerator2["default"])(
/*#__PURE__*/
_regenerator["default"].mark(function _callee7() {
  var connection, count;
  return _regenerator["default"].wrap(function _callee7$(_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          connection = new _src.Connection(_url.url);

          _nodeFetch.mockRpc.push([_url.url, {
            method: 'getTxnCnt',
            params: []
          }, {
            error: null,
            result: 1000000
          }]);

          _context7.next = 4;
          return connection.fetchTxnAmount();

        case 4:
          count = _context7.sent;
          expect(count).toBeGreaterThanOrEqual(0);

        case 6:
        case "end":
          return _context7.stop();
      }
    }
  }, _callee7);
})));
test('get total supply',
/*#__PURE__*/
(0, _asyncToGenerator2["default"])(
/*#__PURE__*/
_regenerator["default"].mark(function _callee8() {
  var connection, count;
  return _regenerator["default"].wrap(function _callee8$(_context8) {
    while (1) {
      switch (_context8.prev = _context8.next) {
        case 0:
          connection = new _src.Connection(_url.url);

          _nodeFetch.mockRpc.push([_url.url, {
            method: 'getTotalSupply',
            params: []
          }, {
            error: null,
            result: 1000000
          }]);

          _context8.next = 4;
          return connection.getTotalSupply();

        case 4:
          count = _context8.sent;
          expect(count).toBeGreaterThanOrEqual(0);

        case 6:
        case "end":
          return _context8.stop();
      }
    }
  }, _callee8);
})));
test('get recent blockhash',
/*#__PURE__*/
(0, _asyncToGenerator2["default"])(
/*#__PURE__*/
_regenerator["default"].mark(function _callee9() {
  var connection, _ref10, _ref11, recentPackagehash, feeCalculator;

  return _regenerator["default"].wrap(function _callee9$(_context9) {
    while (1) {
      switch (_context9.prev = _context9.next) {
        case 0:
          connection = new _src.Connection(_url.url);
          (0, _getRecentBlockhash.mockGetRecentBlockhash)();
          _context9.next = 4;
          return connection.fetchRecentBlockhash();

        case 4:
          _ref10 = _context9.sent;
          _ref11 = (0, _slicedToArray2["default"])(_ref10, 2);
          recentPackagehash = _ref11[0];
          feeCalculator = _ref11[1];
          expect(recentPackagehash.length).toBeGreaterThanOrEqual(43);
          expect(feeCalculator.difsPerSignature).toBeGreaterThanOrEqual(0);

        case 10:
        case "end":
          return _context9.stop();
      }
    }
  }, _callee9);
})));
test('request airdrop',
/*#__PURE__*/
(0, _asyncToGenerator2["default"])(
/*#__PURE__*/
_regenerator["default"].mark(function _callee10() {
  var account, connection, balance, fetchAccountDetail;
  return _regenerator["default"].wrap(function _callee10$(_context10) {
    while (1) {
      switch (_context10.prev = _context10.next) {
        case 0:
          account = new _src.BusAccount();
          connection = new _src.Connection(_url.url);

          _nodeFetch.mockRpc.push([_url.url, {
            method: 'requestDif',
            params: [account.pubKey.toBase58(), 40]
          }, {
            error: null,
            result: '1WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk'
          }]);

          _nodeFetch.mockRpc.push([_url.url, {
            method: 'requestDif',
            params: [account.pubKey.toBase58(), 2]
          }, {
            error: null,
            result: '2WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk'
          }]);

          _nodeFetch.mockRpc.push([_url.url, {
            method: 'getDif',
            params: [account.pubKey.toBase58()]
          }, {
            error: null,
            result: 42
          }]);

          _context10.next = 7;
          return connection.reqDrone(account.pubKey, 40);

        case 7:
          _context10.next = 9;
          return connection.reqDrone(account.pubKey, 2);

        case 9:
          _context10.next = 11;
          return connection.fetchAccountBalance(account.pubKey);

        case 11:
          balance = _context10.sent;
          expect(balance).toBe(42);

          _nodeFetch.mockRpc.push([_url.url, {
            method: 'getAccountInfo',
            params: [account.pubKey.toBase58()]
          }, {
            error: null,
            result: {
              owner: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              difs: 42,
              reputations: 0,
              data: [],
              executable: false
            }
          }]);

          _context10.next = 16;
          return connection.fetchAccountDetail(account.pubKey);

        case 16:
          fetchAccountDetail = _context10.sent;
          expect(fetchAccountDetail.difs).toBe(42);
          expect(fetchAccountDetail.reputations).toBe(0);
          expect(fetchAccountDetail.data).toHaveLength(0);
          expect(fetchAccountDetail.owner).toEqual(_src.SystemController.controllerId);

        case 21:
        case "end":
          return _context10.stop();
      }
    }
  }, _callee10);
})));
test('request airdrop1',
/*#__PURE__*/
(0, _asyncToGenerator2["default"])(
/*#__PURE__*/
_regenerator["default"].mark(function _callee11() {
  var account, connection, reputations, fetchAccountDetail;
  return _regenerator["default"].wrap(function _callee11$(_context11) {
    while (1) {
      switch (_context11.prev = _context11.next) {
        case 0:
          account = new _src.BusAccount();
          connection = new _src.Connection(_url.url);

          _nodeFetch.mockRpc.push([_url.url, {
            method: 'requestDif1',
            params: [account.pubKey.toBase58(), 40]
          }, {
            error: null,
            result: '1WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk'
          }]);

          _nodeFetch.mockRpc.push([_url.url, {
            method: 'requestDif1',
            params: [account.pubKey.toBase58(), 2]
          }, {
            error: null,
            result: '2WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk'
          }]);

          _nodeFetch.mockRpc.push([_url.url, {
            method: 'getDif1',
            params: [account.pubKey.toBase58()]
          }, {
            error: null,
            result: 42
          }]);

          _context11.next = 7;
          return connection.reqDrone1(account.pubKey, 40);

        case 7:
          _context11.next = 9;
          return connection.reqDrone1(account.pubKey, 2);

        case 9:
          _context11.next = 11;
          return connection.fetchAccountBalance1(account.pubKey);

        case 11:
          reputations = _context11.sent;
          expect(reputations).toBe(42);

          _nodeFetch.mockRpc.push([_url.url, {
            method: 'getAccountInfo',
            params: [account.pubKey.toBase58()]
          }, {
            error: null,
            result: {
              owner: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              difs: 0,
              reputations: 42,
              data: [],
              executable: false
            }
          }]);

          _context11.next = 16;
          return connection.fetchAccountDetail(account.pubKey);

        case 16:
          fetchAccountDetail = _context11.sent;
          expect(fetchAccountDetail.difs).toBe(0);
          expect(fetchAccountDetail.reputations).toBe(42);
          expect(fetchAccountDetail.data).toHaveLength(0);
          expect(fetchAccountDetail.owner).toEqual(_src.SystemController.controllerId);

        case 21:
        case "end":
          return _context11.stop();
      }
    }
  }, _callee11);
})));
test('transaction',
/*#__PURE__*/
(0, _asyncToGenerator2["default"])(
/*#__PURE__*/
_regenerator["default"].mark(function _callee12() {
  var accountFrom, accountTo, connection, transaction, signature, i, balance;
  return _regenerator["default"].wrap(function _callee12$(_context12) {
    while (1) {
      switch (_context12.prev = _context12.next) {
        case 0:
          accountFrom = new _src.BusAccount();
          accountTo = new _src.BusAccount();
          connection = new _src.Connection(_url.url);

          _nodeFetch.mockRpc.push([_url.url, {
            method: 'requestDif',
            params: [accountFrom.pubKey.toBase58(), 100010]
          }, {
            error: null,
            result: '0WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk'
          }]);

          _nodeFetch.mockRpc.push([_url.url, {
            method: 'getDif',
            params: [accountFrom.pubKey.toBase58()]
          }, {
            error: null,
            result: 100010
          }]);

          _context12.next = 7;
          return connection.reqDrone(accountFrom.pubKey, 100010);

        case 7:
          _context12.t0 = expect;
          _context12.next = 10;
          return connection.fetchAccountBalance(accountFrom.pubKey);

        case 10:
          _context12.t1 = _context12.sent;
          (0, _context12.t0)(_context12.t1).toBe(100010);

          _nodeFetch.mockRpc.push([_url.url, {
            method: 'requestDif',
            params: [accountTo.pubKey.toBase58(), 21]
          }, {
            error: null,
            result: '8WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk'
          }]);

          _nodeFetch.mockRpc.push([_url.url, {
            method: 'getDif',
            params: [accountTo.pubKey.toBase58()]
          }, {
            error: null,
            result: 21
          }]);

          _context12.next = 16;
          return connection.reqDrone(accountTo.pubKey, 21);

        case 16:
          _context12.t2 = expect;
          _context12.next = 19;
          return connection.fetchAccountBalance(accountTo.pubKey);

        case 19:
          _context12.t3 = _context12.sent;
          (0, _context12.t2)(_context12.t3).toBe(21);
          (0, _getRecentBlockhash.mockGetRecentBlockhash)();

          _nodeFetch.mockRpc.push([_url.url, {
            method: 'sendTxn'
          }, {
            error: null,
            result: '3WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk'
          }]);

          transaction = _src.SystemController.transfer(accountFrom.pubKey, accountTo.pubKey, 10);
          _context12.next = 26;
          return connection.sendTxn(transaction, accountFrom);

        case 26:
          signature = _context12.sent;

          _nodeFetch.mockRpc.push([_url.url, {
            method: 'confirmTxn',
            params: ['3WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk']
          }, {
            error: null,
            result: true
          }]);

          i = 0;

        case 29:
          _context12.next = 31;
          return connection.confmTxn(signature);

        case 31:
          if (!_context12.sent) {
            _context12.next = 33;
            break;
          }

          return _context12.abrupt("break", 40);

        case 33:
          console.log('not confirmed', signature);
          expect(_nodeFetch.mockRpcEnabled).toBe(false);
          expect(++i).toBeLessThan(10);
          _context12.next = 38;
          return (0, _sleep.sleep)(500);

        case 38:
          _context12.next = 29;
          break;

        case 40:
          _nodeFetch.mockRpc.push([_url.url, {
            method: 'getSignatureState',
            params: ['3WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk']
          }, {
            error: null,
            result: {
              Ok: null
            }
          }]);

          _context12.next = 43;
          return expect(connection.fetchSignatureState(signature)).resolves.toEqual({
            Ok: null
          });

        case 43:
          _nodeFetch.mockRpc.push([_url.url, {
            method: 'getDif',
            params: [accountFrom.pubKey.toBase58()]
          }, {
            error: null,
            result: 2
          }]); // accountFrom may have less than 100000 due to transaction fees


          _context12.next = 46;
          return connection.fetchAccountBalance(accountFrom.pubKey);

        case 46:
          balance = _context12.sent;
          expect(balance).toBeGreaterThan(0);
          expect(balance).toBeLessThanOrEqual(100000);

          _nodeFetch.mockRpc.push([_url.url, {
            method: 'getDif',
            params: [accountTo.pubKey.toBase58()]
          }, {
            error: null,
            result: 31
          }]);

          _context12.t4 = expect;
          _context12.next = 53;
          return connection.fetchAccountBalance(accountTo.pubKey);

        case 53:
          _context12.t5 = _context12.sent;
          (0, _context12.t4)(_context12.t5).toBe(31);

        case 55:
        case "end":
          return _context12.stop();
      }
    }
  }, _callee12);
})));
test('multi-instruction transaction',
/*#__PURE__*/
(0, _asyncToGenerator2["default"])(
/*#__PURE__*/
_regenerator["default"].mark(function _callee13() {
  var accountFrom, accountTo, connection, transaction, signature, i;
  return _regenerator["default"].wrap(function _callee13$(_context13) {
    while (1) {
      switch (_context13.prev = _context13.next) {
        case 0:
          if (!_nodeFetch.mockRpcEnabled) {
            _context13.next = 3;
            break;
          }

          console.log('non-live test skipped');
          return _context13.abrupt("return");

        case 3:
          accountFrom = new _src.BusAccount();
          accountTo = new _src.BusAccount();
          connection = new _src.Connection(_url.url);
          _context13.next = 8;
          return connection.reqDrone(accountFrom.pubKey, 100000);

        case 8:
          _context13.t0 = expect;
          _context13.next = 11;
          return connection.fetchAccountBalance(accountFrom.pubKey);

        case 11:
          _context13.t1 = _context13.sent;
          (0, _context13.t0)(_context13.t1).toBe(100000);
          _context13.next = 15;
          return connection.reqDrone(accountTo.pubKey, 21);

        case 15:
          _context13.t2 = expect;
          _context13.next = 18;
          return connection.fetchAccountBalance(accountTo.pubKey);

        case 18:
          _context13.t3 = _context13.sent;
          (0, _context13.t2)(_context13.t3).toBe(21);
          // 1. Move(accountFrom, accountTo)
          // 2. Move(accountTo, accountFrom)
          transaction = _src.SystemController.transfer(accountFrom.pubKey, accountTo.pubKey, 100).add(_src.SystemController.transfer(accountTo.pubKey, accountFrom.pubKey, 100));
          _context13.next = 23;
          return connection.sendTxn(transaction, accountFrom, accountTo);

        case 23:
          signature = _context13.sent;
          i = 0;

        case 25:
          _context13.next = 27;
          return connection.confmTxn(signature);

        case 27:
          if (!_context13.sent) {
            _context13.next = 29;
            break;
          }

          return _context13.abrupt("break", 35);

        case 29:
          expect(_nodeFetch.mockRpcEnabled).toBe(false);
          expect(++i).toBeLessThan(10);
          _context13.next = 33;
          return (0, _sleep.sleep)(500);

        case 33:
          _context13.next = 25;
          break;

        case 35:
          _context13.next = 37;
          return expect(connection.fetchSignatureState(signature)).resolves.toEqual({
            Ok: null
          });

        case 37:
          _context13.t4 = expect;
          _context13.next = 40;
          return connection.fetchAccountBalance(accountFrom.pubKey);

        case 40:
          _context13.t5 = _context13.sent;
          (0, _context13.t4)(_context13.t5).toBeGreaterThan(0);
          _context13.t6 = expect;
          _context13.next = 45;
          return connection.fetchAccountBalance(accountFrom.pubKey);

        case 45:
          _context13.t7 = _context13.sent;
          (0, _context13.t6)(_context13.t7).toBeLessThanOrEqual(100000);
          _context13.t8 = expect;
          _context13.next = 50;
          return connection.fetchAccountBalance(accountTo.pubKey);

        case 50:
          _context13.t9 = _context13.sent;
          (0, _context13.t8)(_context13.t9).toBe(21);

        case 52:
        case "end":
          return _context13.stop();
      }
    }
  }, _callee13);
})));
test('account change notification',
/*#__PURE__*/
(0, _asyncToGenerator2["default"])(
/*#__PURE__*/
_regenerator["default"].mark(function _callee14() {
  var connection, owner, controllerAccount, mockCallback, subscriptionId, i;
  return _regenerator["default"].wrap(function _callee14$(_context14) {
    while (1) {
      switch (_context14.prev = _context14.next) {
        case 0:
          if (!_nodeFetch.mockRpcEnabled) {
            _context14.next = 3;
            break;
          }

          console.log('non-live test skipped');
          return _context14.abrupt("return");

        case 3:
          connection = new _src.Connection(_url.url);
          owner = new _src.BusAccount();
          controllerAccount = new _src.BusAccount();
          mockCallback = jest.fn();
          subscriptionId = connection.onAccountChange(controllerAccount.pubKey, mockCallback);
          _context14.next = 10;
          return connection.reqDrone(owner.pubKey, 100000);

        case 10:
          _context14.next = 12;
          return _src.ControllerLoader.load(connection, owner, controllerAccount, _src.BpfControllerLoader.controllerId, [1, 2, 3]);

        case 12:
          // Wait for mockCallback to receive a call
          i = 0;

        case 13:
          if (!(mockCallback.mock.calls.length > 0)) {
            _context14.next = 15;
            break;
          }

          return _context14.abrupt("break", 21);

        case 15:
          if (!(++i === 30)) {
            _context14.next = 17;
            break;
          }

          throw new Error('BusAccount change notification not observed');

        case 17:
          _context14.next = 19;
          return (0, _sleep.sleep)(250 * _timing.DEFAULT_TICKS_PER_SLOT / _timing.NUM_TICKS_PER_SEC);

        case 19:
          _context14.next = 13;
          break;

        case 21:
          _context14.next = 23;
          return connection.removeListenerOfAccountChange(subscriptionId);

        case 23:
          expect(mockCallback.mock.calls[0][0].difs).toBe(1);
          expect(mockCallback.mock.calls[0][0].reputations).toBe(1);
          expect(mockCallback.mock.calls[0][0].owner).toEqual(_src.BpfControllerLoader.controllerId);

        case 26:
        case "end":
          return _context14.stop();
      }
    }
  }, _callee14);
})));
test('controller account change notification',
/*#__PURE__*/
(0, _asyncToGenerator2["default"])(
/*#__PURE__*/
_regenerator["default"].mark(function _callee15() {
  var connection, owner, controllerAccount, notified, subscriptionId, i;
  return _regenerator["default"].wrap(function _callee15$(_context15) {
    while (1) {
      switch (_context15.prev = _context15.next) {
        case 0:
          if (!_nodeFetch.mockRpcEnabled) {
            _context15.next = 3;
            break;
          }

          console.log('non-live test skipped');
          return _context15.abrupt("return");

        case 3:
          connection = new _src.Connection(_url.url);
          owner = new _src.BusAccount();
          controllerAccount = new _src.BusAccount(); // const mockCallback = jest.fn();

          notified = false;
          subscriptionId = connection.onControllerAccountChange(_src.BpfControllerLoader.controllerId, function (keyedAccountInfo) {
            if (keyedAccountInfo.accountId !== controllerAccount.pubKey.toString()) {
              //console.log('Ignoring another account', keyedAccountInfo);
              return;
            }

            expect(keyedAccountInfo.fetchAccountDetail.difs).toBe(1);
            expect(keyedAccountInfo.fetchAccountDetail.reputations).toBe(1);
            expect(keyedAccountInfo.fetchAccountDetail.owner).toEqual(_src.BpfControllerLoader.controllerId);
            notified = true;
          });
          _context15.next = 10;
          return connection.reqDrone(owner.pubKey, 100000);

        case 10:
          _context15.next = 12;
          return _src.ControllerLoader.load(connection, owner, controllerAccount, _src.BpfControllerLoader.controllerId, [1, 2, 3]);

        case 12:
          // Wait for mockCallback to receive a call
          i = 0;

        case 13:
          if (notified) {
            _context15.next = 20;
            break;
          }

          if (!(++i === 30)) {
            _context15.next = 16;
            break;
          }

          throw new Error('Controller change notification not observed');

        case 16:
          _context15.next = 18;
          return (0, _sleep.sleep)(250 * _timing.DEFAULT_TICKS_PER_SLOT / _timing.NUM_TICKS_PER_SEC);

        case 18:
          _context15.next = 13;
          break;

        case 20:
          _context15.next = 22;
          return connection.removeControllerAccountChangeListener(subscriptionId);

        case 22:
        case "end":
          return _context15.stop();
      }
    }
  }, _callee15);
})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,