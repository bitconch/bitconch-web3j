95f021dc37ed2dbd0c4309cf95970f36
"use strict";

var _shortvecEncoding = require("../src/util/shortvec-encoding");

function checkDecodedArray(array, expectedValue) {
  expect((0, _shortvecEncoding.decodeLength)(array)).toEqual(expectedValue);
  expect(array.length).toEqual(0);
}

test('shortvec decodeLength', function () {
  var array = [];
  checkDecodedArray(array, 0);
  array = [5];
  checkDecodedArray(array, 5);
  array = [0x7f];
  checkDecodedArray(array, 0x7f);
  array = [0x80, 0x01];
  checkDecodedArray(array, 0x80);
  array = [0xff, 0x01];
  checkDecodedArray(array, 0xff);
  array = [0x80, 0x02];
  checkDecodedArray(array, 0x100);
  array = [0xff, 0xff, 0x01];
  checkDecodedArray(array, 0x7fff);
  array = [0x80, 0x80, 0x80, 0x01];
  checkDecodedArray(array, 0x200000);
});

function checkEncodedArray(array, len, prevLength, addedLength, expectedArray) {
  (0, _shortvecEncoding.encodeLength)(array, len);
  expect(array.length).toEqual(prevLength);
  expect(array.slice(-addedLength)).toEqual(expectedArray);
}

test('shortvec encodeLength', function () {
  var array = [];
  var prevLength = 1;
  checkEncodedArray(array, 0, prevLength, 1, [0]);
  checkEncodedArray(array, 5, prevLength += 1, 1, [5]);
  checkEncodedArray(array, 0x7f, prevLength += 1, 1, [0x7f]);
  checkEncodedArray(array, 0x80, prevLength += 2, 2, [0x80, 0x01]);
  checkEncodedArray(array, 0xff, prevLength += 2, 2, [0xff, 0x01]);
  checkEncodedArray(array, 0x100, prevLength += 2, 2, [0x80, 0x02]);
  checkEncodedArray(array, 0x7fff, prevLength += 3, 3, [0xff, 0xff, 0x01]);
  prevLength = checkEncodedArray(array, 0x200000, prevLength += 4, 4, [0x80, 0x80, 0x80, 0x01]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNob3J0dmVjLWVuY29kaW5nLnRlc3QuanMiXSwibmFtZXMiOlsiY2hlY2tEZWNvZGVkQXJyYXkiLCJhcnJheSIsImV4cGVjdGVkVmFsdWUiLCJleHBlY3QiLCJ0b0VxdWFsIiwibGVuZ3RoIiwidGVzdCIsImNoZWNrRW5jb2RlZEFycmF5IiwibGVuIiwicHJldkxlbmd0aCIsImFkZGVkTGVuZ3RoIiwiZXhwZWN0ZWRBcnJheSIsInNsaWNlIl0sIm1hcHBpbmdzIjoiOztBQUVBOztBQUVBLFNBQVNBLGlCQUFULENBQTJCQyxLQUEzQixFQUFpREMsYUFBakQsRUFBd0U7QUFDdEVDLEVBQUFBLE1BQU0sQ0FBQyxvQ0FBYUYsS0FBYixDQUFELENBQU4sQ0FBNEJHLE9BQTVCLENBQW9DRixhQUFwQztBQUNBQyxFQUFBQSxNQUFNLENBQUNGLEtBQUssQ0FBQ0ksTUFBUCxDQUFOLENBQXFCRCxPQUFyQixDQUE2QixDQUE3QjtBQUNEOztBQUVERSxJQUFJLENBQUMsdUJBQUQsRUFBMEIsWUFBTTtBQUNsQyxNQUFJTCxLQUFLLEdBQUcsRUFBWjtBQUNBRCxFQUFBQSxpQkFBaUIsQ0FBQ0MsS0FBRCxFQUFRLENBQVIsQ0FBakI7QUFFQUEsRUFBQUEsS0FBSyxHQUFHLENBQUMsQ0FBRCxDQUFSO0FBQ0FELEVBQUFBLGlCQUFpQixDQUFDQyxLQUFELEVBQVEsQ0FBUixDQUFqQjtBQUVBQSxFQUFBQSxLQUFLLEdBQUcsQ0FBQyxJQUFELENBQVI7QUFDQUQsRUFBQUEsaUJBQWlCLENBQUNDLEtBQUQsRUFBUSxJQUFSLENBQWpCO0FBRUFBLEVBQUFBLEtBQUssR0FBRyxDQUFDLElBQUQsRUFBTyxJQUFQLENBQVI7QUFDQUQsRUFBQUEsaUJBQWlCLENBQUNDLEtBQUQsRUFBUSxJQUFSLENBQWpCO0FBRUFBLEVBQUFBLEtBQUssR0FBRyxDQUFDLElBQUQsRUFBTyxJQUFQLENBQVI7QUFDQUQsRUFBQUEsaUJBQWlCLENBQUNDLEtBQUQsRUFBUSxJQUFSLENBQWpCO0FBRUFBLEVBQUFBLEtBQUssR0FBRyxDQUFDLElBQUQsRUFBTyxJQUFQLENBQVI7QUFDQUQsRUFBQUEsaUJBQWlCLENBQUNDLEtBQUQsRUFBUSxLQUFSLENBQWpCO0FBRUFBLEVBQUFBLEtBQUssR0FBRyxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixDQUFSO0FBQ0FELEVBQUFBLGlCQUFpQixDQUFDQyxLQUFELEVBQVEsTUFBUixDQUFqQjtBQUVBQSxFQUFBQSxLQUFLLEdBQUcsQ0FBQyxJQUFELEVBQU8sSUFBUCxFQUFhLElBQWIsRUFBbUIsSUFBbkIsQ0FBUjtBQUNBRCxFQUFBQSxpQkFBaUIsQ0FBQ0MsS0FBRCxFQUFRLFFBQVIsQ0FBakI7QUFDRCxDQXhCRyxDQUFKOztBQTBCQSxTQUFTTSxpQkFBVCxDQUNFTixLQURGLEVBRUVPLEdBRkYsRUFHRUMsVUFIRixFQUlFQyxXQUpGLEVBS0VDLGFBTEYsRUFNRTtBQUNBLHNDQUFhVixLQUFiLEVBQW9CTyxHQUFwQjtBQUNBTCxFQUFBQSxNQUFNLENBQUNGLEtBQUssQ0FBQ0ksTUFBUCxDQUFOLENBQXFCRCxPQUFyQixDQUE2QkssVUFBN0I7QUFDQU4sRUFBQUEsTUFBTSxDQUFDRixLQUFLLENBQUNXLEtBQU4sQ0FBWSxDQUFDRixXQUFiLENBQUQsQ0FBTixDQUFrQ04sT0FBbEMsQ0FBMENPLGFBQTFDO0FBQ0Q7O0FBRURMLElBQUksQ0FBQyx1QkFBRCxFQUEwQixZQUFNO0FBQ2xDLE1BQUlMLEtBQUssR0FBRyxFQUFaO0FBQ0EsTUFBSVEsVUFBVSxHQUFHLENBQWpCO0FBQ0FGLEVBQUFBLGlCQUFpQixDQUFDTixLQUFELEVBQVEsQ0FBUixFQUFXUSxVQUFYLEVBQXVCLENBQXZCLEVBQTBCLENBQUMsQ0FBRCxDQUExQixDQUFqQjtBQUVBRixFQUFBQSxpQkFBaUIsQ0FBQ04sS0FBRCxFQUFRLENBQVIsRUFBWVEsVUFBVSxJQUFJLENBQTFCLEVBQThCLENBQTlCLEVBQWlDLENBQUMsQ0FBRCxDQUFqQyxDQUFqQjtBQUVBRixFQUFBQSxpQkFBaUIsQ0FBQ04sS0FBRCxFQUFRLElBQVIsRUFBZVEsVUFBVSxJQUFJLENBQTdCLEVBQWlDLENBQWpDLEVBQW9DLENBQUMsSUFBRCxDQUFwQyxDQUFqQjtBQUVBRixFQUFBQSxpQkFBaUIsQ0FBQ04sS0FBRCxFQUFRLElBQVIsRUFBZVEsVUFBVSxJQUFJLENBQTdCLEVBQWlDLENBQWpDLEVBQW9DLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FBcEMsQ0FBakI7QUFFQUYsRUFBQUEsaUJBQWlCLENBQUNOLEtBQUQsRUFBUSxJQUFSLEVBQWVRLFVBQVUsSUFBSSxDQUE3QixFQUFpQyxDQUFqQyxFQUFvQyxDQUFDLElBQUQsRUFBTyxJQUFQLENBQXBDLENBQWpCO0FBRUFGLEVBQUFBLGlCQUFpQixDQUFDTixLQUFELEVBQVEsS0FBUixFQUFnQlEsVUFBVSxJQUFJLENBQTlCLEVBQWtDLENBQWxDLEVBQXFDLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FBckMsQ0FBakI7QUFFQUYsRUFBQUEsaUJBQWlCLENBQUNOLEtBQUQsRUFBUSxNQUFSLEVBQWlCUSxVQUFVLElBQUksQ0FBL0IsRUFBbUMsQ0FBbkMsRUFBc0MsQ0FBQyxJQUFELEVBQU8sSUFBUCxFQUFhLElBQWIsQ0FBdEMsQ0FBakI7QUFFQUEsRUFBQUEsVUFBVSxHQUFHRixpQkFBaUIsQ0FBQ04sS0FBRCxFQUFRLFFBQVIsRUFBbUJRLFVBQVUsSUFBSSxDQUFqQyxFQUFxQyxDQUFyQyxFQUF3QyxDQUNwRSxJQURvRSxFQUVwRSxJQUZvRSxFQUdwRSxJQUhvRSxFQUlwRSxJQUpvRSxDQUF4QyxDQUE5QjtBQU1ELENBdkJHLENBQUoiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQge2RlY29kZUxlbmd0aCwgZW5jb2RlTGVuZ3RofSBmcm9tICcuLi9zcmMvdXRpbC9zaG9ydHZlYy1lbmNvZGluZyc7XG5cbmZ1bmN0aW9uIGNoZWNrRGVjb2RlZEFycmF5KGFycmF5OiBBcnJheTxudW1iZXI+LCBleHBlY3RlZFZhbHVlOiBudW1iZXIpIHtcbiAgZXhwZWN0KGRlY29kZUxlbmd0aChhcnJheSkpLnRvRXF1YWwoZXhwZWN0ZWRWYWx1ZSk7XG4gIGV4cGVjdChhcnJheS5sZW5ndGgpLnRvRXF1YWwoMCk7XG59XG5cbnRlc3QoJ3Nob3J0dmVjIGRlY29kZUxlbmd0aCcsICgpID0+IHtcbiAgbGV0IGFycmF5ID0gW107XG4gIGNoZWNrRGVjb2RlZEFycmF5KGFycmF5LCAwKTtcblxuICBhcnJheSA9IFs1XTtcbiAgY2hlY2tEZWNvZGVkQXJyYXkoYXJyYXksIDUpO1xuXG4gIGFycmF5ID0gWzB4N2ZdO1xuICBjaGVja0RlY29kZWRBcnJheShhcnJheSwgMHg3Zik7XG5cbiAgYXJyYXkgPSBbMHg4MCwgMHgwMV07XG4gIGNoZWNrRGVjb2RlZEFycmF5KGFycmF5LCAweDgwKTtcblxuICBhcnJheSA9IFsweGZmLCAweDAxXTtcbiAgY2hlY2tEZWNvZGVkQXJyYXkoYXJyYXksIDB4ZmYpO1xuXG4gIGFycmF5ID0gWzB4ODAsIDB4MDJdO1xuICBjaGVja0RlY29kZWRBcnJheShhcnJheSwgMHgxMDApO1xuXG4gIGFycmF5ID0gWzB4ZmYsIDB4ZmYsIDB4MDFdO1xuICBjaGVja0RlY29kZWRBcnJheShhcnJheSwgMHg3ZmZmKTtcblxuICBhcnJheSA9IFsweDgwLCAweDgwLCAweDgwLCAweDAxXTtcbiAgY2hlY2tEZWNvZGVkQXJyYXkoYXJyYXksIDB4MjAwMDAwKTtcbn0pO1xuXG5mdW5jdGlvbiBjaGVja0VuY29kZWRBcnJheShcbiAgYXJyYXk6IEFycmF5PG51bWJlcj4sXG4gIGxlbjogbnVtYmVyLFxuICBwcmV2TGVuZ3RoOiBudW1iZXIsXG4gIGFkZGVkTGVuZ3RoOiBudW1iZXIsXG4gIGV4cGVjdGVkQXJyYXk6IEFycmF5PG51bWJlcj4sXG4pIHtcbiAgZW5jb2RlTGVuZ3RoKGFycmF5LCBsZW4pO1xuICBleHBlY3QoYXJyYXkubGVuZ3RoKS50b0VxdWFsKHByZXZMZW5ndGgpO1xuICBleHBlY3QoYXJyYXkuc2xpY2UoLWFkZGVkTGVuZ3RoKSkudG9FcXVhbChleHBlY3RlZEFycmF5KTtcbn1cblxudGVzdCgnc2hvcnR2ZWMgZW5jb2RlTGVuZ3RoJywgKCkgPT4ge1xuICBsZXQgYXJyYXkgPSBbXTtcbiAgbGV0IHByZXZMZW5ndGggPSAxO1xuICBjaGVja0VuY29kZWRBcnJheShhcnJheSwgMCwgcHJldkxlbmd0aCwgMSwgWzBdKTtcblxuICBjaGVja0VuY29kZWRBcnJheShhcnJheSwgNSwgKHByZXZMZW5ndGggKz0gMSksIDEsIFs1XSk7XG5cbiAgY2hlY2tFbmNvZGVkQXJyYXkoYXJyYXksIDB4N2YsIChwcmV2TGVuZ3RoICs9IDEpLCAxLCBbMHg3Zl0pO1xuXG4gIGNoZWNrRW5jb2RlZEFycmF5KGFycmF5LCAweDgwLCAocHJldkxlbmd0aCArPSAyKSwgMiwgWzB4ODAsIDB4MDFdKTtcblxuICBjaGVja0VuY29kZWRBcnJheShhcnJheSwgMHhmZiwgKHByZXZMZW5ndGggKz0gMiksIDIsIFsweGZmLCAweDAxXSk7XG5cbiAgY2hlY2tFbmNvZGVkQXJyYXkoYXJyYXksIDB4MTAwLCAocHJldkxlbmd0aCArPSAyKSwgMiwgWzB4ODAsIDB4MDJdKTtcblxuICBjaGVja0VuY29kZWRBcnJheShhcnJheSwgMHg3ZmZmLCAocHJldkxlbmd0aCArPSAzKSwgMywgWzB4ZmYsIDB4ZmYsIDB4MDFdKTtcblxuICBwcmV2TGVuZ3RoID0gY2hlY2tFbmNvZGVkQXJyYXkoYXJyYXksIDB4MjAwMDAwLCAocHJldkxlbmd0aCArPSA0KSwgNCwgW1xuICAgIDB4ODAsXG4gICAgMHg4MCxcbiAgICAweDgwLFxuICAgIDB4MDEsXG4gIF0pO1xufSk7XG4iXX0=