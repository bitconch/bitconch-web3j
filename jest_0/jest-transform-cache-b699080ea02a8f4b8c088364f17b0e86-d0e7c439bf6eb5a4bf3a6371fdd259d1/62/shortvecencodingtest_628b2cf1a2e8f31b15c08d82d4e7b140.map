{"version":3,"sources":["shortvec-encoding.test.js"],"names":["checkDecodedArray","array","expectedValue","expect","toEqual","length","test","checkEncodedArray","len","prevLength","addedLength","expectedArray","slice"],"mappings":"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","sourcesContent":["// @flow\n\nimport {decodeLength, encodeLength} from '../src/util/shortvec-encoding';\n\nfunction checkDecodedArray(array: Array<number>, expectedValue: number) {\n  expect(decodeLength(array)).toEqual(expectedValue);\n  expect(array.length).toEqual(0);\n}\n\ntest('shortvec decodeLength', () => {\n  let array = [];\n  checkDecodedArray(array, 0);\n\n  array = [5];\n  checkDecodedArray(array, 5);\n\n  array = [0x7f];\n  checkDecodedArray(array, 0x7f);\n\n  array = [0x80, 0x01];\n  checkDecodedArray(array, 0x80);\n\n  array = [0xff, 0x01];\n  checkDecodedArray(array, 0xff);\n\n  array = [0x80, 0x02];\n  checkDecodedArray(array, 0x100);\n\n  array = [0xff, 0xff, 0x01];\n  checkDecodedArray(array, 0x7fff);\n\n  array = [0x80, 0x80, 0x80, 0x01];\n  checkDecodedArray(array, 0x200000);\n});\n\nfunction checkEncodedArray(\n  array: Array<number>,\n  len: number,\n  prevLength: number,\n  addedLength: number,\n  expectedArray: Array<number>,\n) {\n  encodeLength(array, len);\n  expect(array.length).toEqual(prevLength);\n  expect(array.slice(-addedLength)).toEqual(expectedArray);\n}\n\ntest('shortvec encodeLength', () => {\n  let array = [];\n  let prevLength = 1;\n  checkEncodedArray(array, 0, prevLength, 1, [0]);\n\n  checkEncodedArray(array, 5, (prevLength += 1), 1, [5]);\n\n  checkEncodedArray(array, 0x7f, (prevLength += 1), 1, [0x7f]);\n\n  checkEncodedArray(array, 0x80, (prevLength += 2), 2, [0x80, 0x01]);\n\n  checkEncodedArray(array, 0xff, (prevLength += 2), 2, [0xff, 0x01]);\n\n  checkEncodedArray(array, 0x100, (prevLength += 2), 2, [0x80, 0x02]);\n\n  checkEncodedArray(array, 0x7fff, (prevLength += 3), 3, [0xff, 0xff, 0x01]);\n\n  prevLength = checkEncodedArray(array, 0x200000, (prevLength += 4), 4, [\n    0x80,\n    0x80,\n    0x80,\n    0x01,\n  ]);\n});\n"]}