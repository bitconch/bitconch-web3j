880cfbed4477b2ae0c5bd8a34b12a179
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ControllerLoader = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var BufferLayout = _interopRequireWildcard(require("buffer-layout"));

var _busAccount = require("./bus-account");

var _pubkey = require("./pubkey");

var _timing = require("./timing");

var _transactionController = require("./transaction-controller");

var _sendAndConfmTx = require("./util/send-and-confm-tx");

var _sleep = require("./util/sleep");

var _systemController = require("./system-controller");

/**
 * Program loader interface
 */
var ControllerLoader =
/*#__PURE__*/
function () {
  function ControllerLoader() {
    (0, _classCallCheck2["default"])(this, ControllerLoader);
  }

  (0, _createClass2["default"])(ControllerLoader, null, [{
    key: "load",

    /**
     * Loads a generic program
     *
     * @param connection The connection to use
     * @param payer System account that pays to load the program
     * @param program BusAccount to load the program into
     * @param controllerId Public key that identifies the loader
     * @param data Program octets
     */
    value: function () {
      var _load = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(connection, payer, program, controllerId, data) {
        var transaction, dataLayout, chunkSize, offset, array, transactions, bytes, _data, _transaction, _dataLayout, _data2, _transaction2;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                transaction = _systemController.SystemController.createNewAccount(payer.pubKey, program.pubKey, 1, data.length, controllerId);
                _context.next = 3;
                return (0, _sendAndConfmTx.sendAndconfmTx)(connection, transaction, payer);

              case 3:
                dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);
                chunkSize = ControllerLoader.chunkSize;
                offset = 0;
                array = data;
                transactions = [];

              case 8:
                if (!(array.length > 0)) {
                  _context.next = 24;
                  break;
                }

                bytes = array.slice(0, chunkSize);
                _data = Buffer.alloc(chunkSize + 16);
                dataLayout.encode({
                  instruction: 0,
                  // Load instruction
                  offset: offset,
                  bytes: bytes
                }, _data);
                _transaction = new _transactionController.Transaction().add({
                  keys: [{
                    pubkey: program.pubKey,
                    isSigner: true,
                    isDebitable: true
                  }],
                  controllerId: controllerId,
                  data: _data
                });
                transactions.push((0, _sendAndConfmTx.sendAndconfmTx)(connection, _transaction, payer, program)); // Delay ~1 tick between write transactions in an attempt to reduce AccountInUse errors
                // since all the write transactions modify the same program account

                _context.next = 16;
                return (0, _sleep.sleep)(1000 / _timing.NUM_TICKS_PER_SEC);

              case 16:
                if (!(transactions.length === 8)) {
                  _context.next = 20;
                  break;
                }

                _context.next = 19;
                return Promise.all(transactions);

              case 19:
                transactions = [];

              case 20:
                offset += chunkSize;
                array = array.slice(chunkSize);
                _context.next = 8;
                break;

              case 24:
                _context.next = 26;
                return Promise.all(transactions);

              case 26:
                _dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);
                _data2 = Buffer.alloc(_dataLayout.span);

                _dataLayout.encode({
                  instruction: 1 // Finalize instruction

                }, _data2);

                _transaction2 = new _transactionController.Transaction().add({
                  keys: [{
                    pubkey: program.pubKey,
                    isSigner: true,
                    isDebitable: true
                  }],
                  controllerId: controllerId,
                  data: _data2
                });
                _context.next = 32;
                return (0, _sendAndConfmTx.sendAndconfmTx)(connection, _transaction2, payer, program);

              case 32:
                return _context.abrupt("return", program.pubKey);

              case 33:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function load(_x, _x2, _x3, _x4, _x5) {
        return _load.apply(this, arguments);
      }

      return load;
    }()
  }, {
    key: "chunkSize",

    /**
     * Amount of program data placed in each load Transaction
     */
    get: function get() {
      // Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the
      // rest of the Transaction fields
      //
      // TODO: replace 300 with a proper constant for the size of the other
      // Transaction fields
      return _transactionController.PACKET_DATA_SIZE - 300;
    }
  }]);
  return ControllerLoader;
}();

exports.ControllerLoader = ControllerLoader;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,