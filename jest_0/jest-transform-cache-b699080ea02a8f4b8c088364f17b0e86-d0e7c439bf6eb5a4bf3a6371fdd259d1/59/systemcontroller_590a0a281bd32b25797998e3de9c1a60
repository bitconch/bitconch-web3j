d254b912b6c261445e596f52627a9baf
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SystemController = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var BufferLayout = _interopRequireWildcard(require("buffer-layout"));

var _transactionController = require("./transaction-controller");

var _pubkey = require("./pubkey");

var Layout = _interopRequireWildcard(require("./resize"));

/**
 * Factory class for transactions to interact with the System controller
 */
var SystemController =
/*#__PURE__*/
function () {
  function SystemController() {
    (0, _classCallCheck2["default"])(this, SystemController);
  }

  (0, _createClass2["default"])(SystemController, null, [{
    key: "createNewAccount",

    /**
     * Generate a Transaction that creates a new account
     */
    value: function createNewAccount(from, _createNewAccount, difs, reputations, space, controllerId) {
      var dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('difs'), BufferLayout.ns64('reputations'), BufferLayout.ns64('space'), Layout.pubKey('controllerId')]);
      var data = Buffer.alloc(dataLayout.span);
      dataLayout.encode({
        instruction: 0,
        // Create BusAccount instruction
        difs: difs,
        reputations: reputations,
        space: space,
        controllerId: controllerId.toBuffer()
      }, data);
      return new _transactionController.Transaction().add({
        keys: [{
          pubkey: from,
          isSigner: true,
          isDebitable: true
        }, {
          pubkey: _createNewAccount,
          isSigner: false,
          isDebitable: true
        }],
        controllerId: SystemController.controllerId,
        data: data
      });
    }
    /**
     * Generate a Transaction that transfers difs from one account to another
     */

  }, {
    key: "transfer",
    value: function transfer(from, to, amount) {
      var dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('amount')]);
      var data = Buffer.alloc(dataLayout.span);
      dataLayout.encode({
        instruction: 2,
        // Move instruction
        amount: amount
      }, data);
      return new _transactionController.Transaction().add({
        keys: [{
          pubkey: from,
          isSigner: true,
          isDebitable: true
        }, {
          pubkey: to,
          isSigner: false,
          isDebitable: false
        }],
        controllerId: SystemController.controllerId,
        data: data
      });
    }
    /**
     * Generate a Transaction that transfers reputations from one account to another
     */

  }, {
    key: "transferReputation",
    value: function transferReputation(from, to, amount) {
      var dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('amount')]);
      var data = Buffer.alloc(dataLayout.span);
      dataLayout.encode({
        instruction: 2,
        // Move instruction
        amount: amount
      }, data);
      return new _transactionController.Transaction().add({
        keys: [{
          pubkey: from,
          isSigner: true,
          isDebitable: true
        }, {
          pubkey: to,
          isSigner: false,
          isDebitable: false
        }],
        controllerId: SystemController.controllerId,
        data: data
      });
    }
    /**
     * Generate a Transaction that assigns an account to a controller
     */

  }, {
    key: "assign",
    value: function assign(from, controllerId) {
      var dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), Layout.pubKey('controllerId')]);
      var data = Buffer.alloc(dataLayout.span);
      dataLayout.encode({
        instruction: 1,
        // Assign instruction
        controllerId: controllerId.toBuffer()
      }, data);
      return new _transactionController.Transaction().add({
        keys: [{
          pubkey: from,
          isSigner: true,
          isDebitable: true
        }],
        controllerId: SystemController.controllerId,
        data: data
      });
    }
  }, {
    key: "controllerId",

    /**
     * Public key that identifies the System controller
     */
    get: function get() {
      return new _pubkey.PubKey('0x000000000000000000000000000000000000000000000000000000000000000');
    }
  }]);
  return SystemController;
}();

exports.SystemController = SystemController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,