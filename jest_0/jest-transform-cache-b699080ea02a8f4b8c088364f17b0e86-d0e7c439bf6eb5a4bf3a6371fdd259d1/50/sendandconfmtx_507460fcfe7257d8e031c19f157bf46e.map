{"version":3,"sources":["send-and-confm-tx.js"],"names":["sendAndconfmTx","connection","transaction","sendRetries","signers","start","Date","now","sendTxn","signature","status","statusRetries","fetchSignatureState","DEFAULT_TICKS_PER_SLOT","NUM_TICKS_PER_SEC","duration","Error","toFixed","JSON","stringify","Err","Math","random","undefined"],"mappings":";;;;;;;;;;;;;AAEA;;AAEA;;AACA;;AACA;;AAGA;;AAEA;;;SAGsBA,c;;;;;;;+BAAf,iBACLC,UADK,EAELC,WAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKDC,YAAAA,WALC,GAKa,EALb;;AAAA,sCAGFC,OAHE;AAGFA,cAAAA,OAHE;AAAA;;AAAA;AAQGC,YAAAA,KARH,GAQWC,IAAI,CAACC,GAAL,EARX;AAAA;AAAA,mBASeN,UAAU,CAACO,OAAX,OAAAP,UAAU,GAASC,WAAT,SAAyBE,OAAzB,EATzB;;AAAA;AASHK,YAAAA,SATG;AAWH;AACIC,YAAAA,MAZD,GAYU,IAZV;AAaCC,YAAAA,aAbD,GAaiB,CAbjB;;AAAA;AAAA;AAAA,mBAecV,UAAU,CAACW,mBAAX,CAA+BH,SAA/B,CAfd;;AAAA;AAeDC,YAAAA,MAfC;;AAAA,iBAgBGA,MAhBH;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,kBAoBG,EAAEC,aAAF,IAAmB,CApBtB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,mBAwBK,kBAAO,MAAME,8BAAP,GAAiCC,yBAAvC,CAxBL;;AAAA;AAAA;AAAA;;AAAA;AAAA,kBA2BCJ,MAAM,IAAI,QAAQA,MA3BnB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,kBA8BC,EAAEP,WAAF,IAAiB,CA9BlB;AAAA;AAAA;AAAA;;AA+BKY,YAAAA,QA/BL,GA+BgB,CAACT,IAAI,CAACC,GAAL,KAAaF,KAAd,IAAuB,IA/BvC;AAAA,kBAgCK,IAAIW,KAAJ,wBACYP,SADZ,oCAC+CM,QAAQ,CAACE,OAAT,CACjD,CADiD,CAD/C,uBAGUC,IAAI,CAACC,SAAL,CAAeT,MAAf,CAHV,OAhCL;;AAAA;AAAA,kBAuCCA,MAAM,IAAIA,MAAM,CAACU,GAAjB,IAAwB,EAAE,kBAAkBV,MAAM,CAACU,GAA3B,CAvCzB;AAAA;AAAA;AAAA;;AAAA,kBAwCK,IAAIJ,KAAJ,uBACWP,SADX,sBACgCS,IAAI,CAACC,SAAL,CAAeT,MAAf,CADhC,OAxCL;;AAAA;AAAA;AAAA,mBA8CG,kBAAMW,IAAI,CAACC,MAAL,KAAgB,GAAtB,CA9CH;;AAAA;AAAA;AAAA;;AAAA;AAiDL,oCAAUb,SAAS,KAAKc,SAAxB;AAjDK,6CAkDEd,SAlDF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["// @flow\n\nimport invariant from 'assert';\n\nimport {Connection} from '../connection';\nimport {Transaction} from '../transaction-controller';\nimport {sleep} from './sleep';\nimport type {BusAccount} from '../bus-account';\nimport type {TxnSignature} from '../transaction-controller';\nimport {DEFAULT_TICKS_PER_SLOT, NUM_TICKS_PER_SEC} from '../timing';\n\n/**\n * Sign, send and confirm a transaction\n */\nexport async function sendAndconfmTx(\n  connection: Connection,\n  transaction: Transaction,\n  ...signers: Array<BusAccount>\n): Promise<TxnSignature> {\n  let sendRetries = 10;\n  let signature;\n  for (;;) {\n    const start = Date.now();\n    signature = await connection.sendTxn(transaction, ...signers);\n\n    // Wait up to a couple slots for a confirmation\n    let status = null;\n    let statusRetries = 6;\n    for (;;) {\n      status = await connection.fetchSignatureState(signature);\n      if (status) {\n        break;\n      }\n\n      if (--statusRetries <= 0) {\n        break;\n      }\n      // Sleep for approximately half a slot\n      await sleep((500 * DEFAULT_TICKS_PER_SLOT) / NUM_TICKS_PER_SEC);\n    }\n\n    if (status && 'Ok' in status) {\n      break;\n    }\n    if (--sendRetries <= 0) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction '${signature}' was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds (${JSON.stringify(status)})`,\n      );\n    }\n\n    if (status && status.Err && !('AccountInUse' in status.Err)) {\n      throw new Error(\n        `Transaction ${signature} failed (${JSON.stringify(status)})`,\n      );\n    }\n\n    // Retry in 0..100ms to try to avoid another AccountInUse collision\n    await sleep(Math.random() * 100);\n  }\n\n  invariant(signature !== undefined);\n  return signature;\n}\n"]}