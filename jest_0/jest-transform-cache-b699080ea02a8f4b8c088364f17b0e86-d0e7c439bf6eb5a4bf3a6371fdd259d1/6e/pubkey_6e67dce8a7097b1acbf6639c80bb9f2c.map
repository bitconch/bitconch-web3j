{"version":3,"sources":["pubkey.js"],"names":["PubKey","value","startsWith","_bn","BN","substring","bs58","decode","byteLength","Error","pubKey","eq","encode","toBuffer","b","toArrayLike","Buffer","length","zeroPad","alloc","copy","toBase58","o"],"mappings":";;;;;;;;;;;;;;;AAEA;;AACA;;AAEA;;;IAGaA,M;;;AAGX;;;AAGA,kBAAYC,KAAZ,EAA6D;AAAA;AAAA;;AAC3D,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B;AACA,UAAIA,KAAK,CAACC,UAAN,CAAiB,IAAjB,CAAJ,EAA4B;AAC1B,aAAKC,GAAL,GAAW,IAAIC,cAAJ,CAAOH,KAAK,CAACI,SAAN,CAAgB,CAAhB,CAAP,EAA2B,EAA3B,CAAX;AACD,OAFD,MAEO;AACL;AACA,aAAKF,GAAL,GAAW,IAAIC,cAAJ,CAAOE,eAAKC,MAAL,CAAYN,KAAZ,CAAP,CAAX;AACD;AACF,KARD,MAQO;AACL,WAAKE,GAAL,GAAW,IAAIC,cAAJ,CAAOH,KAAP,CAAX;AACD;;AAED,QAAI,KAAKE,GAAL,CAASK,UAAT,KAAwB,EAA5B,EAAgC;AAC9B,YAAM,IAAIC,KAAJ,4BAAN;AACD;AACF;AAED;;;;;;;;AAOA;;;2BAGOC,M,EAAyB;AAC9B,aAAO,KAAKP,GAAL,CAASQ,EAAT,CAAYD,MAAM,CAACP,GAAnB,CAAP;AACD;AAED;;;;;;+BAGmB;AACjB,aAAOG,eAAKM,MAAL,CAAY,KAAKC,QAAL,EAAZ,CAAP;AACD;AAED;;;;;;+BAGmB;AACjB,UAAMC,CAAC,GAAG,KAAKX,GAAL,CAASY,WAAT,CAAqBC,MAArB,CAAV;;AACA,UAAIF,CAAC,CAACG,MAAF,KAAa,EAAjB,EAAqB;AACnB,eAAOH,CAAP;AACD;;AAED,UAAMI,OAAO,GAAGF,MAAM,CAACG,KAAP,CAAa,EAAb,CAAhB;AACAL,MAAAA,CAAC,CAACM,IAAF,CAAOF,OAAP,EAAgB,KAAKJ,CAAC,CAACG,MAAvB;AACA,aAAOC,OAAP;AACD;AAED;;;;;;+BAGmB;AACjB,aAAO,KAAKG,QAAL,EAAP;AACD;;;6BArCeC,C,EAAoB;AAClC,aAAOA,CAAC,YAAYtB,MAApB;AACD","sourcesContent":["// @flow\n\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\n\n/**\n * A public key\n */\nexport class PubKey {\n  _bn: BN;\n\n  /**\n   * Create a new PubKey object\n   */\n  constructor(value: number | string | Buffer | Array<number>) {\n    if (typeof value === 'string') {\n      // hexadecimal number\n      if (value.startsWith('0x')) {\n        this._bn = new BN(value.substring(2), 16);\n      } else {\n        // assume base 58 encoding by default\n        this._bn = new BN(bs58.decode(value));\n      }\n    } else {\n      this._bn = new BN(value);\n    }\n\n    if (this._bn.byteLength() > 32) {\n      throw new Error(`Invalid public key input`);\n    }\n  }\n\n  /**\n   * Checks if the provided object is a PubKey\n   */\n  static isPubKey(o: Object): boolean {\n    return o instanceof PubKey;\n  }\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(pubKey: PubKey): boolean {\n    return this._bn.eq(pubKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBuffer());\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Returns a string representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n}\n"]}