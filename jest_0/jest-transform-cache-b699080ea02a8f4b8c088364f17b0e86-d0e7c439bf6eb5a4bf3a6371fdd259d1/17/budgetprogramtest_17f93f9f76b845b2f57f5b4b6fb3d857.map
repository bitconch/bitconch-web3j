{"version":3,"sources":["budget-program.test.js"],"names":["test","from","BusAccount","program","to","transaction","BudgetController","pay","pubKey","expect","operations","keys","toHaveLength","signatureCond","datetimeCond","Date","payOnAll","sealWithDatetime","sealWithSignature"],"mappings":"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","sourcesContent":["// @flow\n\nimport {BusAccount} from '../src/bus-account';\nimport {BudgetController} from '../src/budget-controller';\n\ntest('pay', () => {\n  const from = new BusAccount();\n  const program = new BusAccount();\n  const to = new BusAccount();\n  let transaction;\n\n  transaction = BudgetController.pay(\n    from.pubKey,\n    program.pubKey,\n    to.pubKey,\n    123,\n  );\n  expect(transaction.operations[0].keys).toHaveLength(2);\n  expect(transaction.operations[1].keys).toHaveLength(2);\n  // TODO: Validate transaction contents more\n\n  transaction = BudgetController.pay(\n    from.pubKey,\n    program.pubKey,\n    to.pubKey,\n    123,\n    BudgetController.signatureCond(from.pubKey),\n  );\n  expect(transaction.operations[0].keys).toHaveLength(2);\n  expect(transaction.operations[1].keys).toHaveLength(1);\n  // TODO: Validate transaction contents more\n\n  transaction = BudgetController.pay(\n    from.pubKey,\n    program.pubKey,\n    to.pubKey,\n    123,\n    BudgetController.signatureCond(from.pubKey),\n    BudgetController.datetimeCond(from.pubKey, new Date()),\n  );\n  expect(transaction.operations[0].keys).toHaveLength(2);\n  expect(transaction.operations[1].keys).toHaveLength(1);\n  // TODO: Validate transaction contents more\n\n  transaction = BudgetController.payOnAll(\n    from.pubKey,\n    program.pubKey,\n    to.pubKey,\n    123,\n    BudgetController.signatureCond(from.pubKey),\n    BudgetController.datetimeCond(from.pubKey, new Date()),\n  );\n  expect(transaction.operations[0].keys).toHaveLength(2);\n  expect(transaction.operations[1].keys).toHaveLength(1);\n  // TODO: Validate transaction contents more\n});\n\ntest('apply', () => {\n  const from = new BusAccount();\n  const program = new BusAccount();\n  const to = new BusAccount();\n  let transaction;\n\n  transaction = BudgetController.sealWithDatetime(\n    from.pubKey,\n    program.pubKey,\n    to.pubKey,\n    new Date(),\n  );\n  expect(transaction.keys).toHaveLength(3);\n  // TODO: Validate transaction contents more\n\n  transaction = BudgetController.sealWithSignature(\n    from.pubKey,\n    program.pubKey,\n    to.pubKey,\n  );\n  expect(transaction.keys).toHaveLength(3);\n  // TODO: Validate transaction contents more\n});\n"]}