{"version":3,"sources":["transaction-payer.test.js"],"names":["mockRpcEnabled","jest","setTimeout","test","accountPayer","BusAccount","accountFrom","accountTo","connection","Connection","url","mockRpc","push","method","params","pubKey","toBase58","error","result","reqDrone","transaction","SystemController","transfer","sendTxn","signature","i","confmTxn","expect","toBe","toBeLessThan","Ok","fetchSignatureState","resolves","toEqual","fetchAccountBalance","balance","toBeGreaterThan","toBeLessThanOrEqual"],"mappings":"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","sourcesContent":["// @flow\nimport {BusAccount, Connection, SystemController} from '../src';\nimport {mockRpc, mockRpcEnabled} from './__mocks__/node-fetch';\nimport {mockGetRecentBlockhash} from './mockrpc/get-recent-blockhash';\nimport {url} from './url';\nimport {sleep} from '../src/util/sleep';\n\nif (!mockRpcEnabled) {\n  // The default of 5 seconds is too slow for live testing sometimes\n  jest.setTimeout(30000);\n}\n\ntest('transaction-payer', async () => {\n  const accountPayer = new BusAccount();\n  const accountFrom = new BusAccount();\n  const accountTo = new BusAccount();\n  const connection = new Connection(url);\n\n  mockRpc.push([\n    url,\n    {\n      method: 'requestDif',\n      params: [accountPayer.pubKey.toBase58(), 100],\n    },\n    {\n      error: null,\n      result:\n        '0WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk',\n    },\n  ]);\n  await connection.reqDrone(accountPayer.pubKey, 100);\n\n  mockRpc.push([\n    url,\n    {\n      method: 'requestDif',\n      params: [accountFrom.pubKey.toBase58(), 12],\n    },\n    {\n      error: null,\n      result:\n        '0WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk',\n    },\n  ]);\n  await connection.reqDrone(accountFrom.pubKey, 12);\n\n  mockRpc.push([\n    url,\n    {\n      method: 'requestDif',\n      params: [accountTo.pubKey.toBase58(), 21],\n    },\n    {\n      error: null,\n      result:\n        '8WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk',\n    },\n  ]);\n  await connection.reqDrone(accountTo.pubKey, 21);\n\n  mockGetRecentBlockhash();\n  mockRpc.push([\n    url,\n    {\n      method: 'sendTxn',\n    },\n    {\n      error: null,\n      result:\n        '3WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk',\n    },\n  ]);\n\n  const transaction = SystemController.transfer(\n    accountFrom.pubKey,\n    accountTo.pubKey,\n    10,\n  );\n\n  const signature = await connection.sendTxn(\n    transaction,\n    accountPayer,\n    accountFrom,\n  );\n\n  mockRpc.push([\n    url,\n    {\n      method: 'confirmTxn',\n      params: [\n        '3WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk',\n      ],\n    },\n    {\n      error: null,\n      result: true,\n    },\n  ]);\n\n  let i = 0;\n  for (;;) {\n    if (await connection.confmTxn(signature)) {\n      break;\n    }\n\n    expect(mockRpcEnabled).toBe(false);\n    expect(++i).toBeLessThan(10);\n    await sleep(500);\n  }\n\n  mockRpc.push([\n    url,\n    {\n      method: 'getSignatureState',\n      params: [\n        '3WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk',\n      ],\n    },\n    {\n      error: null,\n      result: {Ok: null},\n    },\n  ]);\n  await expect(connection.fetchSignatureState(signature)).resolves.toEqual({\n    Ok: null,\n  });\n\n  mockRpc.push([\n    url,\n    {\n      method: 'getDif',\n      params: [accountPayer.pubKey.toBase58()],\n    },\n    {\n      error: null,\n      result: 99,\n    },\n  ]);\n\n  // accountPayer could be less than 100 as it paid for the transaction\n  // (exact amount less depends on the current cluster fees)\n  const balance = await connection.fetchAccountBalance(accountPayer.pubKey);\n  expect(balance).toBeGreaterThan(0);\n  expect(balance).toBeLessThanOrEqual(100);\n\n  // accountFrom should have exactly 2, since it didn't pay for the transaction\n  mockRpc.push([\n    url,\n    {\n      method: 'getDif',\n      params: [accountFrom.pubKey.toBase58()],\n    },\n    {\n      error: null,\n      result: 2,\n    },\n  ]);\n  expect(await connection.fetchAccountBalance(accountFrom.pubKey)).toBe(2);\n});\n"]}