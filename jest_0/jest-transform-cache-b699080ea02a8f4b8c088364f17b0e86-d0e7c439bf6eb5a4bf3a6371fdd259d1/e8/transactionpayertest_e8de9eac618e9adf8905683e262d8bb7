849901209aa7e12470df50c15fd5abb6
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _src = require("../src");

var _nodeFetch = require("./__mocks__/node-fetch");

var _getRecentBlockhash = require("./mockrpc/get-recent-blockhash");

var _url = require("./url");

var _sleep = require("../src/util/sleep");

if (!_nodeFetch.mockRpcEnabled) {
  // The default of 5 seconds is too slow for live testing sometimes
  jest.setTimeout(30000);
}

test('transaction-payer',
/*#__PURE__*/
(0, _asyncToGenerator2["default"])(
/*#__PURE__*/
_regenerator["default"].mark(function _callee() {
  var accountPayer, accountFrom, accountTo, connection, transaction, signature, i, balance;
  return _regenerator["default"].wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          accountPayer = new _src.BusAccount();
          accountFrom = new _src.BusAccount();
          accountTo = new _src.BusAccount();
          connection = new _src.Connection(_url.url);

          _nodeFetch.mockRpc.push([_url.url, {
            method: 'requestDif',
            params: [accountPayer.pubKey.toBase58(), 100]
          }, {
            error: null,
            result: '0WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk'
          }]);

          _context.next = 7;
          return connection.reqDrone(accountPayer.pubKey, 100);

        case 7:
          _nodeFetch.mockRpc.push([_url.url, {
            method: 'requestDif',
            params: [accountFrom.pubKey.toBase58(), 12]
          }, {
            error: null,
            result: '0WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk'
          }]);

          _context.next = 10;
          return connection.reqDrone(accountFrom.pubKey, 12);

        case 10:
          _nodeFetch.mockRpc.push([_url.url, {
            method: 'requestDif',
            params: [accountTo.pubKey.toBase58(), 21]
          }, {
            error: null,
            result: '8WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk'
          }]);

          _context.next = 13;
          return connection.reqDrone(accountTo.pubKey, 21);

        case 13:
          (0, _getRecentBlockhash.mockGetRecentBlockhash)();

          _nodeFetch.mockRpc.push([_url.url, {
            method: 'sendTxn'
          }, {
            error: null,
            result: '3WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk'
          }]);

          transaction = _src.SystemController.transfer(accountFrom.pubKey, accountTo.pubKey, 10);
          _context.next = 18;
          return connection.sendTxn(transaction, accountPayer, accountFrom);

        case 18:
          signature = _context.sent;

          _nodeFetch.mockRpc.push([_url.url, {
            method: 'confirmTxn',
            params: ['3WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk']
          }, {
            error: null,
            result: true
          }]);

          i = 0;

        case 21:
          _context.next = 23;
          return connection.confmTxn(signature);

        case 23:
          if (!_context.sent) {
            _context.next = 25;
            break;
          }

          return _context.abrupt("break", 31);

        case 25:
          expect(_nodeFetch.mockRpcEnabled).toBe(false);
          expect(++i).toBeLessThan(10);
          _context.next = 29;
          return (0, _sleep.sleep)(500);

        case 29:
          _context.next = 21;
          break;

        case 31:
          _nodeFetch.mockRpc.push([_url.url, {
            method: 'getSignatureState',
            params: ['3WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk']
          }, {
            error: null,
            result: {
              Ok: null
            }
          }]);

          _context.next = 34;
          return expect(connection.fetchSignatureState(signature)).resolves.toEqual({
            Ok: null
          });

        case 34:
          _nodeFetch.mockRpc.push([_url.url, {
            method: 'getDif',
            params: [accountPayer.pubKey.toBase58()]
          }, {
            error: null,
            result: 99
          }]); // accountPayer could be less than 100 as it paid for the transaction
          // (exact amount less depends on the current cluster fees)


          _context.next = 37;
          return connection.fetchAccountBalance(accountPayer.pubKey);

        case 37:
          balance = _context.sent;
          expect(balance).toBeGreaterThan(0);
          expect(balance).toBeLessThanOrEqual(100); // accountFrom should have exactly 2, since it didn't pay for the transaction

          _nodeFetch.mockRpc.push([_url.url, {
            method: 'getDif',
            params: [accountFrom.pubKey.toBase58()]
          }, {
            error: null,
            result: 2
          }]);

          _context.t0 = expect;
          _context.next = 44;
          return connection.fetchAccountBalance(accountFrom.pubKey);

        case 44:
          _context.t1 = _context.sent;
          (0, _context.t0)(_context.t1).toBe(2);

        case 46:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,