{"version":3,"sources":["token-controller.js"],"names":["TokenCount","a","reverse","b","Buffer","from","length","zeroPad","alloc","copy","buffer","BN","map","i","toString","slice","join","TokenDetailLayout","BufferLayout","struct","Layout","uint64","u8","rustString","TokenAccountDetailLayout","pubKey","SYSTEM_TOKEN_CONTROLLER_ID","PubKey","Token","connection","token","controllerId","Object","assign","owner","source","tokenAccount","BusAccount","dataLayout","u32","data","span","encode","instruction","transaction","SystemController","createNewAccount","keys","pubkey","isSigner","isDebitable","push","Transaction","add","fetchAccountDetail","equals","Error","JSON","stringify","readUInt8","fetchTokenDetail","decode","supply","fromBuffer","account","tokenAccountInfo","amount","sourceOption","originalAmount","destination","sendAndconfmTx","transferOperation","delegate","approveOperation","approve","newOwner","setOwnerOperation","toBuffer","TxOperation","name","symbol","decimals","initialAccountPublicKey","encodeLength"],"mappings":"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","sourcesContent":["/**\n * @flow\n */\n\nimport assert from 'assert';\nimport BN from 'bn.js';\nimport * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './resize';\nimport {BusAccount} from './bus-account';\nimport {PubKey} from './pubkey';\nimport {SystemController} from './system-controller';\nimport {Transaction, TxOperation} from './transaction-controller';\nimport type {TxnSignature} from './transaction-controller';\nimport {sendAndconfmTx} from './util/send-and-confm-tx';\nimport type {Connection} from './connection';\n\n/**\n * Some amount of tokens\n */\nexport class TokenCount extends BN {\n  /**\n   * Convert to Buffer representation\n   */\n  toBuffer(): Buffer {\n    const a = super.toArray().reverse();\n    const b = Buffer.from(a);\n    if (b.length === 8) {\n      return b;\n    }\n    assert(b.length < 8, 'TokenCount too large');\n\n    const zeroPad = Buffer.alloc(8);\n    b.copy(zeroPad);\n    return zeroPad;\n  }\n\n  /**\n   * Construct a TokenCount from Buffer representation\n   */\n  static fromBuffer(buffer: Buffer): TokenCount {\n    assert(buffer.length === 8, `Invalid buffer length: ${buffer.length}`);\n    return new BN(\n      [...buffer]\n        .reverse()\n        .map(i => `00${i.toString(16)}`.slice(-2))\n        .join(''),\n      16,\n    );\n  }\n}\n\n/**\n * Information about a token\n */\ntype TokenDetail = {|\n  /**\n   * Total supply of tokens\n   */\n  supply: TokenCount,\n\n  /**\n   * Number of base 10 digits to the right of the decimal place\n   */\n  decimals: number,\n\n  /**\n   * Descriptive name of this token\n   */\n  name: string,\n\n  /**\n   * Symbol for this token\n   */\n  symbol: string,\n|};\n\n/**\n * @private\n */\nconst TokenDetailLayout = BufferLayout.struct([\n  Layout.uint64('supply'),\n  BufferLayout.u8('decimals'),\n  Layout.rustString('name'),\n  Layout.rustString('symbol'),\n]);\n\n/**\n * Information about a token account\n */\ntype TokenAccountDetail = {|\n  /**\n   * The kind of token this account holds\n   */\n  token: PubKey,\n\n  /**\n   * Owner of this account\n   */\n  owner: PubKey,\n\n  /**\n   * Amount of tokens this account holds\n   */\n  amount: TokenCount,\n\n  /**\n   * The source account for the tokens.\n   *\n   * If `source` is null, the source is this account.\n   * If `source` is not null, the `amount` of tokens in this account represent\n   * an allowance of tokens that may be transferred from the source account\n   */\n  source: null | PubKey,\n\n  /**\n   * New amount of tokens this delegate account was authorized to spend\n   * If `source` is null, originalAmount is zero\n   */\n  originalAmount: TokenCount,\n|};\n\n/**\n * @private\n */\nconst TokenAccountDetailLayout = BufferLayout.struct([\n  Layout.pubKey('token'),\n  Layout.pubKey('owner'),\n  Layout.uint64('amount'),\n  BufferLayout.u8('sourceOption'),\n  Layout.pubKey('source'),\n  Layout.uint64('originalAmount'),\n]);\n\ntype TokenAndPubKey = [Token, PubKey]; // This type exists to workaround an esdoc parse error\n\n/**\n * The built-in token program\n */\nexport const SYSTEM_TOKEN_CONTROLLER_ID = new PubKey(\n  'Token11111111111111111111111111111111111111',\n);\n\n/**\n * An ERC20-like Token\n */\nexport class Token {\n  /**\n   * @private\n   */\n  connection: Connection;\n\n  /**\n   * The public key identifying this token\n   */\n  token: PubKey;\n\n  /**\n   * Program Identifier for the Token program\n   */\n  controllerId: PubKey;\n\n  /**\n   * Create a Token object attached to the specific token\n   *\n   * @param connection The connection to use\n   * @param token Public key of the token\n   * @param controllerId Optional token controllerId, uses the system controllerId by default\n   */\n  constructor(\n    connection: Connection,\n    token: PubKey,\n    controllerId: PubKey = SYSTEM_TOKEN_CONTROLLER_ID,\n  ) {\n    Object.assign(this, {connection, token, controllerId});\n  }\n\n  /**\n   * Create a new Token\n   *\n   * @param connection The connection to use\n   * @param owner User account that will own the returned Token BusAccount\n   * @param supply Total supply of the new token\n   * @param name Descriptive name of this token\n   * @param symbol Symbol for this token\n   * @param decimals Location of the decimal place\n   * @param controllerId Optional token controllerId, uses the system controllerId by default\n   * @return Token object for the newly minted token, Public key of the Token BusAccount holding the total supply of new tokens\n   */\n  static async createNewToken(\n    connection: Connection,\n    owner: BusAccount,\n    supply: TokenCount,\n    name: string,\n    symbol: string,\n    decimals: number,\n    controllerId: PubKey = SYSTEM_TOKEN_CONTROLLER_ID,\n  ): Promise<TokenAndPubKey> {\n    const tokenAccount = new BusAccount();\n    const token = new Token(connection, tokenAccount.pubKey, controllerId);\n    const initialAccountPublicKey = await token.createNewAccount(owner, null);\n\n    let transaction;\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.uint64('supply'),\n      BufferLayout.u8('decimals'),\n      Layout.rustString('name'),\n      Layout.rustString('symbol'),\n    ]);\n\n    let data = Buffer.alloc(1024);\n    {\n      const encodeLength = dataLayout.encode(\n        {\n          instruction: 0, // NewToken instruction\n          supply: supply.toBuffer(),\n          decimals,\n          name,\n          symbol,\n        },\n        data,\n      );\n      data = data.slice(0, encodeLength);\n    }\n\n    // Allocate memory for the tokenAccount account\n    transaction = SystemController.createNewAccount(\n      owner.pubKey,\n      tokenAccount.pubKey,\n      1,\n      1 + data.length,\n      controllerId,\n    );\n    await sendAndconfmTx(connection, transaction, owner);\n\n    transaction = new Transaction().add({\n      keys: [\n        {pubkey: tokenAccount.pubKey, isSigner: true, isDebitable: false},\n        {pubkey: initialAccountPublicKey, isSigner: false, isDebitable: true},\n      ],\n      controllerId,\n      data,\n    });\n    await sendAndconfmTx(\n      connection,\n      transaction,\n      owner,\n      tokenAccount,\n    );\n\n    return [token, initialAccountPublicKey];\n  }\n\n  /**\n   * Create a new and empty token account.\n   *\n   * This account may then be used as a `transfer()` or `approve()` destination\n   *\n   * @param owner User account that will own the new token account\n   * @param source If not null, create a delegate account that when authorized\n   *               may transfer tokens from this `source` account\n   * @return Public key of the new empty token account\n   */\n  async createNewAccount(\n    owner: BusAccount,\n    source: null | PubKey = null,\n  ): Promise<PubKey> {\n    const tokenAccount = new BusAccount();\n    let transaction;\n\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 1, // NewTokenAccount instruction\n      },\n      data,\n    );\n\n    // Allocate memory for the token\n    transaction = SystemController.createNewAccount(\n      owner.pubKey,\n      tokenAccount.pubKey,\n      1,\n      1 + TokenAccountDetailLayout.span,\n      this.controllerId,\n    );\n    await sendAndconfmTx(this.connection, transaction, owner);\n\n    // Initialize the token account\n    const keys = [\n      {pubkey: tokenAccount.pubKey, isSigner: true, isDebitable: true},\n      {pubkey: owner.pubKey, isSigner: false, isDebitable: false},\n      {pubkey: this.token, isSigner: false, isDebitable: false},\n    ];\n    if (source) {\n      keys.push({pubkey: source, isSigner: false, isDebitable: false});\n    }\n    transaction = new Transaction().add({\n      keys,\n      controllerId: this.controllerId,\n      data,\n    });\n    await sendAndconfmTx(\n      this.connection,\n      transaction,\n      owner,\n      tokenAccount,\n    );\n\n    return tokenAccount.pubKey;\n  }\n\n  /**\n   * Retrieve token information\n   */\n  async fetchTokenDetail(): Promise<TokenDetail> {\n    const fetchAccountDetail = await this.connection.fetchAccountDetail(this.token);\n    if (!fetchAccountDetail.owner.equals(this.controllerId)) {\n      throw new Error(\n        `Invalid token owner: ${JSON.stringify(fetchAccountDetail.owner)}`,\n      );\n    }\n\n    const data = Buffer.from(fetchAccountDetail.data);\n\n    if (data.readUInt8(0) !== 1) {\n      throw new Error(`Invalid token data`);\n    }\n    const fetchTokenDetail = TokenDetailLayout.decode(data, 1);\n    fetchTokenDetail.supply = TokenCount.fromBuffer(fetchTokenDetail.supply);\n    return fetchTokenDetail;\n  }\n\n  /**\n   * Retrieve account information\n   *\n   * @param account Public key of the token account\n   */\n  async fetchAccountDetail(account: PubKey): Promise<TokenAccountDetail> {\n    const fetchAccountDetail = await this.connection.fetchAccountDetail(account);\n    if (!fetchAccountDetail.owner.equals(this.controllerId)) {\n      throw new Error(`Invalid token account owner`);\n    }\n\n    const data = Buffer.from(fetchAccountDetail.data);\n    if (data.readUInt8(0) !== 2) {\n      throw new Error(`Invalid token account data`);\n    }\n    const tokenAccountInfo = TokenAccountDetailLayout.decode(data, 1);\n\n    tokenAccountInfo.token = new PubKey(tokenAccountInfo.token);\n    tokenAccountInfo.owner = new PubKey(tokenAccountInfo.owner);\n    tokenAccountInfo.amount = TokenCount.fromBuffer(tokenAccountInfo.amount);\n    if (tokenAccountInfo.sourceOption === 0) {\n      tokenAccountInfo.source = null;\n      tokenAccountInfo.originalAmount = new TokenCount();\n    } else {\n      tokenAccountInfo.source = new PubKey(tokenAccountInfo.source);\n      tokenAccountInfo.originalAmount = TokenCount.fromBuffer(\n        tokenAccountInfo.originalAmount,\n      );\n    }\n\n    if (!tokenAccountInfo.token.equals(this.token)) {\n      throw new Error(\n        `Invalid token account token: ${JSON.stringify(\n          tokenAccountInfo.token,\n        )} !== ${JSON.stringify(this.token)}`,\n      );\n    }\n    return tokenAccountInfo;\n  }\n\n  /**\n   * Transfer tokens to another account\n   *\n   * @param owner Owner of the source token account\n   * @param source Source token account\n   * @param destination Destination token account\n   * @param amount Number of tokens to transfer\n   */\n  async transfer(\n    owner: BusAccount,\n    source: PubKey,\n    destination: PubKey,\n    amount: number | TokenCount,\n  ): Promise<?TxnSignature> {\n    return await sendAndconfmTx(\n      this.connection,\n      new Transaction().add(\n        await this.transferOperation(\n          owner.pubKey,\n          source,\n          destination,\n          amount,\n        ),\n      ),\n      owner,\n    );\n  }\n\n  /**\n   * Grant a third-party permission to transfer up the specified number of tokens from an account\n   *\n   * @param owner Owner of the source token account\n   * @param account Public key of the token account\n   * @param delegate Token account authorized to perform a transfer tokens from the source account\n   * @param amount Maximum number of tokens the delegate may transfer\n   */\n  async approve(\n    owner: BusAccount,\n    account: PubKey,\n    delegate: PubKey,\n    amount: number | TokenCount,\n  ): Promise<void> {\n    await sendAndconfmTx(\n      this.connection,\n      new Transaction().add(\n        this.approveOperation(owner.pubKey, account, delegate, amount),\n      ),\n      owner,\n    );\n  }\n\n  /**\n   * Remove approval for the transfer of any remaining tokens\n   *\n   * @param owner Owner of the source token account\n   * @param account Public key of the token account\n   * @param delegate Token account to revoke authorization from\n   */\n  revoke(\n    owner: BusAccount,\n    account: PubKey,\n    delegate: PubKey,\n  ): Promise<void> {\n    return this.approve(owner, account, delegate, 0);\n  }\n\n  /**\n   * Assign a new owner to the account\n   *\n   * @param owner Owner of the token account\n   * @param account Public key of the token account\n   * @param newOwner New owner of the token account\n   */\n  async setOwner(\n    owner: BusAccount,\n    account: PubKey,\n    newOwner: PubKey,\n  ): Promise<void> {\n    await sendAndconfmTx(\n      this.connection,\n      new Transaction().add(\n        this.setOwnerOperation(owner.pubKey, account, newOwner),\n      ),\n      owner,\n    );\n  }\n\n  /**\n   * Construct a Transfer instruction\n   *\n   * @param owner Owner of the source token account\n   * @param source Source token account\n   * @param destination Destination token account\n   * @param amount Number of tokens to transfer\n   */\n  async transferOperation(\n    owner: PubKey,\n    source: PubKey,\n    destination: PubKey,\n    amount: number | TokenCount,\n  ): Promise<TxOperation> {\n    const fetchAccountDetail = await this.fetchAccountDetail(source);\n    if (!owner.equals(fetchAccountDetail.owner)) {\n      throw new Error('BusAccount owner mismatch');\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.uint64('amount'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 2, // Transfer instruction\n        amount: new TokenCount(amount).toBuffer(),\n      },\n      data,\n    );\n\n    const keys = [\n      {pubkey: owner, isSigner: true, isDebitable: false},\n      {pubkey: source, isSigner: false, isDebitable: true},\n      {pubkey: destination, isSigner: false, isDebitable: true},\n    ];\n    if (fetchAccountDetail.source) {\n      keys.push({\n        pubkey: fetchAccountDetail.source,\n        isSigner: false,\n        isDebitable: true,\n      });\n    }\n    return new TxOperation({\n      keys,\n      controllerId: this.controllerId,\n      data,\n    });\n  }\n\n  /**\n   * Construct an Approve instruction\n   *\n   * @param owner Owner of the source token account\n   * @param account Public key of the token account\n   * @param delegate Token account authorized to perform a transfer tokens from the source account\n   * @param amount Maximum number of tokens the delegate may transfer\n   */\n  approveOperation(\n    owner: PubKey,\n    account: PubKey,\n    delegate: PubKey,\n    amount: number | TokenCount,\n  ): TxOperation {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.uint64('amount'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 3, // Approve instruction\n        amount: new TokenCount(amount).toBuffer(),\n      },\n      data,\n    );\n\n    return new TxOperation({\n      keys: [\n        {pubkey: owner, isSigner: true, isDebitable: false},\n        {pubkey: account, isSigner: false, isDebitable: true},\n        {pubkey: delegate, isSigner: false, isDebitable: true},\n      ],\n      controllerId: this.controllerId,\n      data,\n    });\n  }\n\n  /**\n   * Construct an Revoke instruction\n   *\n   * @param owner Owner of the source token account\n   * @param account Public key of the token account\n   * @param delegate Token account authorized to perform a transfer tokens from the source account\n   */\n  revokeOperation(\n    owner: PubKey,\n    account: PubKey,\n    delegate: PubKey,\n  ): TxOperation {\n    return this.approveOperation(owner, account, delegate, 0);\n  }\n\n  /**\n   * Construct a SetOwner instruction\n   *\n   * @param owner Owner of the token account\n   * @param account Public key of the token account\n   * @param newOwner New owner of the token account\n   */\n  setOwnerOperation(\n    owner: PubKey,\n    account: PubKey,\n    newOwner: PubKey,\n  ): TxOperation {\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 4, // SetOwner instruction\n      },\n      data,\n    );\n\n    return new TxOperation({\n      keys: [\n        {pubkey: owner, isSigner: true, isDebitable: false},\n        {pubkey: account, isSigner: false, isDebitable: true},\n        {pubkey: newOwner, isSigner: false, isDebitable: true},\n      ],\n      controllerId: this.controllerId,\n      data,\n    });\n  }\n}\n"]}