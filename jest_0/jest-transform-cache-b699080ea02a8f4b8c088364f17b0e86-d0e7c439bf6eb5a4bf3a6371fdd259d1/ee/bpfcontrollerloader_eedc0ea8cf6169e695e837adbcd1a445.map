{"version":3,"sources":["bpfcontroller-loader.js"],"names":["BpfControllerLoader","connection","payer","elf","controller","BusAccount","ControllerLoader","load","controllerId","PubKey"],"mappings":";;;;;;;;;;;;;AAEA;;AACA;;AACA;;AAGA;;;IAGaA,mB;;;;;;;;;;AAQX;;;;;;;yBAQEC,U,EACAC,K,EACAC,G,EACiB;AACjB,UAAMC,UAAU,GAAG,IAAIC,sBAAJ,EAAnB;AACA,aAAOC,mCAAiBC,IAAjB,CAAsBN,UAAtB,EAAkCC,KAAlC,EAAyCE,UAAzC,EAAqDJ,mBAAmB,CAACQ,YAAzE,EAAuFL,GAAvF,CAAP;AACD;;;;AArBD;;;wBAGkC;AAChC,aAAO,IAAIM,cAAJ,CAAW,6CAAX,CAAP;AACD","sourcesContent":["// @flow\n\nimport {BusAccount} from './bus-account';\nimport {PubKey} from './pubkey';\nimport {ControllerLoader} from './controller-loader';\nimport type {Connection} from './connection';\n\n/**\n * Factory class for transactions to interact with a controller loader\n */\nexport class BpfControllerLoader {\n  /**\n   * Public key that identifies the BpfControllerLoader\n   */\n  static get controllerId(): PubKey {\n    return new PubKey('BPFLoader1111111111111111111111111111111111');\n  }\n\n  /**\n   * Load a BPF controller\n   *\n   * @param connection The connection to use\n   * @param owner User account to load the controller into\n   * @param elfBytes The entire ELF containing the BPF controller\n   */\n  static load(\n    connection: Connection,\n    payer: BusAccount,\n    elf: Array<number>,\n  ): Promise<PubKey> {\n    const controller = new BusAccount();\n    return ControllerLoader.load(connection, payer, controller, BpfControllerLoader.controllerId, elf);\n  }\n}\n"]}