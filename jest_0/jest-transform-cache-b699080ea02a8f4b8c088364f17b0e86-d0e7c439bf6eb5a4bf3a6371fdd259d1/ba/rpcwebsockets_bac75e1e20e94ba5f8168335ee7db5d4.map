{"version":3,"sources":["rpc-websockets.js"],"names":["mockRpcEnabled","process","env","TEST_LIVE","mockNotice","Client","url","options","console","log","client","RpcWebSocketClient","connect","close","event","callback","on","method","params","call","Error"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AAEA;AACA;AACO,IAAMA,cAAc,GAAG,CAACC,OAAO,CAACC,GAAR,CAAYC,SAApC;;AAEP,IAAIC,UAAU,GAAG,IAAjB;;IAEaC,M;;;AAGX,kBAAYC,GAAZ,EAAiBC,OAAjB,EAA0B;AAAA;AAAA;;AACxB;AACA,QAAI,CAACP,cAAL,EAAqB;AACnB,UAAII,UAAJ,EAAgB;AACdI,QAAAA,OAAO,CAACC,GAAR,CACE,6DADF,EAEEH,GAFF;AAIAF,QAAAA,UAAU,GAAG,KAAb;AACD;;AACD,WAAKM,MAAL,GAAc,IAAIC,qBAAJ,CAAuBL,GAAvB,EAA4BC,OAA5B,CAAd;AACD;AACF;;;;8BAES;AACR,UAAI,CAACP,cAAL,EAAqB;AACnB,eAAO,KAAKU,MAAL,CAAYE,OAAZ,EAAP;AACD;AACF;;;4BAEO;AACN,UAAI,CAACZ,cAAL,EAAqB;AACnB,eAAO,KAAKU,MAAL,CAAYG,KAAZ,EAAP;AACD;AACF;;;uBAEEC,K,EAAeC,Q,EAAoB;AACpC,UAAI,CAACf,cAAL,EAAqB;AACnB,eAAO,KAAKU,MAAL,CAAYM,EAAZ,CAAeF,KAAf,EAAsBC,QAAtB,CAAP;AACD,OAHmC,CAIpC;;AACD;;;;;;oDAEUE,M,EAAgBC,M;;;;;oBACpBlB,c;;;;;;uBACU,KAAKU,MAAL,CAAYS,IAAZ,CAAiBF,MAAjB,EAAyBC,MAAzB,C;;;;;;sBAET,IAAIE,KAAJ,CAAU,kBAAV,C","sourcesContent":["import {Client as RpcWebSocketClient} from 'rpc-websockets';\n\n// Define TEST_LIVE in the environment to test against the real full node\n// identified by `url` instead of using the mock\nexport const mockRpcEnabled = !process.env.TEST_LIVE;\n\nlet mockNotice = true;\n\nexport class Client {\n  client: RpcWebSocketClient;\n\n  constructor(url, options) {\n    //console.log('MockClient', url, options);\n    if (!mockRpcEnabled) {\n      if (mockNotice) {\n        console.log(\n          'Note: rpc-websockets mock is disabled, testing live against',\n          url,\n        );\n        mockNotice = false;\n      }\n      this.client = new RpcWebSocketClient(url, options);\n    }\n  }\n\n  connect() {\n    if (!mockRpcEnabled) {\n      return this.client.connect();\n    }\n  }\n\n  close() {\n    if (!mockRpcEnabled) {\n      return this.client.close();\n    }\n  }\n\n  on(event: string, callback: Function) {\n    if (!mockRpcEnabled) {\n      return this.client.on(event, callback);\n    }\n    //console.log('on', event);\n  }\n\n  async call(method: string, params: Object): Promise<Object> {\n    if (!mockRpcEnabled) {\n      return await this.client.call(method, params);\n    }\n    throw new Error('call unsupported');\n  }\n}\n"]}