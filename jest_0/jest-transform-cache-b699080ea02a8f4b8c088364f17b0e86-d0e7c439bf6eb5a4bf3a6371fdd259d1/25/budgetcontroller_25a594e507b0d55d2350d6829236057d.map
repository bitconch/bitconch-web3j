{"version":3,"sources":["budget-controller.js"],"names":["serializePayment","payment","toData","to","toBuffer","data","Buffer","alloc","length","writeUInt32LE","amount","copy","serializeTime","when","iso","date","pad","number","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","write","serializeCond","condition","type","from","Error","BudgetController","program","pos","conditions","trimmedData","slice","transaction","SystemController","createNewAccount","controllerId","add","keys","pubkey","isSigner","isDebitable","conditionData","paymentData","condition1","condition2","whenData","Transaction","dataLayout","BufferLayout","struct","u32","span","encode","instruction","PubKey"],"mappings":"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","sourcesContent":["// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {Transaction} from './transaction-controller';\nimport {PubKey} from './pubkey';\nimport {SystemController} from './system-controller';\n\n/**\n * Represents a condition that is met by executing a `sealWithSignature()`\n * transaction\n *\n * @typedef {Object} SignatureCond\n * @property {string} type Must equal the string 'timestamp'\n * @property {PubKey} from Public key from which `sealWithSignature()` will be accepted from\n */\nexport type SignatureCond = {\n  type: 'signature',\n  from: PubKey,\n};\n\n/**\n * Represents a condition that is met by executing a `sealWithDatetime()`\n * transaction\n *\n * @typedef {Object} TimestampCond\n * @property {string} type Must equal the string 'timestamp'\n * @property {PubKey} from Public key from which `sealWithDatetime()` will be accepted from\n * @property {Date} when The timestamp that was observed\n */\nexport type TimestampCond = {\n  type: 'timestamp',\n  from: PubKey,\n  when: Date,\n};\n\n/**\n * Represents a payment to a given public key\n *\n * @typedef {Object} Payment\n * @property {number} amount Number of difs\n * @property {PubKey} to Public key of the recipient\n */\nexport type Payment = {\n  amount: number,\n  to: PubKey,\n};\n\n/**\n * A condition that can unlock a payment\n *\n * @typedef {SignatureCond|TimestampCond} BudgetCond\n */\nexport type BudgetCond = SignatureCond | TimestampCond;\n\n/**\n * @private\n */\nfunction serializePayment(payment: Payment): Buffer {\n  const toData = payment.to.toBuffer();\n  const data = Buffer.alloc(8 + toData.length);\n  data.writeUInt32LE(payment.amount, 0);\n  toData.copy(data, 8);\n  return data;\n}\n\n/**\n * @private\n */\nfunction serializeTime(when: Date): Buffer {\n  const data = Buffer.alloc(8 + 20);\n  data.writeUInt32LE(20, 0); // size of timestamp as u64\n\n  function iso(date) {\n    function pad(number) {\n      if (number < 10) {\n        return '0' + number;\n      }\n      return number;\n    }\n\n    return (\n      date.getUTCFullYear() +\n      '-' +\n      pad(date.getUTCMonth() + 1) +\n      '-' +\n      pad(date.getUTCDate()) +\n      'T' +\n      pad(date.getUTCHours()) +\n      ':' +\n      pad(date.getUTCMinutes()) +\n      ':' +\n      pad(date.getUTCSeconds()) +\n      'Z'\n    );\n  }\n  data.write(iso(when), 8);\n  return data;\n}\n\n/**\n * @private\n */\nfunction serializeCond(condition: BudgetCond) {\n  switch (condition.type) {\n    case 'timestamp': {\n      const date = serializeTime(condition.when);\n      const from = condition.from.toBuffer();\n\n      const data = Buffer.alloc(4 + date.length + from.length);\n      data.writeUInt32LE(0, 0); // Condition enum = Timestamp\n      date.copy(data, 4);\n      from.copy(data, 4 + date.length);\n      return data;\n    }\n    case 'signature': {\n      const from = condition.from.toBuffer();\n      const data = Buffer.alloc(4 + from.length);\n      data.writeUInt32LE(1, 0); // Condition enum = Signature\n      from.copy(data, 4);\n      return data;\n    }\n    default:\n      throw new Error(`Unknown condition type: ${condition.type}`);\n  }\n}\n\n/**\n * Factory class for transactions to interact with the Budget program\n */\nexport class BudgetController {\n  /**\n   * Public key that identifies the Budget program\n   */\n  static get controllerId(): PubKey {\n    return new PubKey('Budget1111111111111111111111111111111111111');\n  }\n\n  /**\n   * The amount of space this program requires\n   */\n  static get size(): number {\n    return 128;\n  }\n\n  /**\n   * Creates a timestamp condition\n   */\n  static datetimeCond(from: PubKey, when: Date): TimestampCond {\n    return {\n      type: 'timestamp',\n      from,\n      when,\n    };\n  }\n\n  /**\n   * Creates a signature condition\n   */\n  static signatureCond(from: PubKey): SignatureCond {\n    return {\n      type: 'signature',\n      from,\n    };\n  }\n\n  /**\n   * Generates a transaction that transfers difs once any of the conditions are met\n   */\n  static pay(\n    from: PubKey,\n    program: PubKey,\n    to: PubKey,\n    amount: number,\n    ...conditions: Array<BudgetCond>\n  ): Transaction {\n    const data = Buffer.alloc(1024);\n    let pos = 0;\n    data.writeUInt32LE(0, pos); // NewBudget instruction\n    pos += 4;\n\n    switch (conditions.length) {\n      case 0: {\n        data.writeUInt32LE(0, pos); // BudgetExpr enum = Pay\n        pos += 4;\n\n        {\n          const payment = serializePayment({amount, to});\n          payment.copy(data, pos);\n          pos += payment.length;\n        }\n        const trimmedData = data.slice(0, pos);\n\n        const transaction = SystemController.createNewAccount(\n          from,\n          program,\n          amount,\n          trimmedData.length,\n          this.controllerId,\n        );\n\n        return transaction.add({\n          keys: [\n            {pubkey: to, isSigner: false, isDebitable: false},\n            {pubkey: program, isSigner: false, isDebitable: true},\n          ],\n          controllerId: this.controllerId,\n          data: trimmedData,\n        });\n      }\n      case 1: {\n        data.writeUInt32LE(1, pos); // BudgetExpr enum = After\n        pos += 4;\n        {\n          const condition = conditions[0];\n\n          const conditionData = serializeCond(condition);\n          conditionData.copy(data, pos);\n          pos += conditionData.length;\n\n          data.writeUInt32LE(0, pos); // BudgetExpr enum = Pay\n          pos += 4;\n\n          const paymentData = serializePayment({amount, to});\n          paymentData.copy(data, pos);\n          pos += paymentData.length;\n        }\n        const trimmedData = data.slice(0, pos);\n\n        const transaction = SystemController.createNewAccount(\n          from,\n          program,\n          amount,\n          trimmedData.length,\n          this.controllerId,\n        );\n\n        return transaction.add({\n          keys: [{pubkey: program, isSigner: false, isDebitable: true}],\n          controllerId: this.controllerId,\n          data: trimmedData,\n        });\n      }\n\n      case 2: {\n        data.writeUInt32LE(2, pos); // BudgetExpr enum = Or\n        pos += 4;\n\n        for (let condition of conditions) {\n          const conditionData = serializeCond(condition);\n          conditionData.copy(data, pos);\n          pos += conditionData.length;\n\n          data.writeUInt32LE(0, pos); // BudgetExpr enum = Pay\n          pos += 4;\n\n          const paymentData = serializePayment({amount, to});\n          paymentData.copy(data, pos);\n          pos += paymentData.length;\n        }\n        const trimmedData = data.slice(0, pos);\n\n        const transaction = SystemController.createNewAccount(\n          from,\n          program,\n          amount,\n          trimmedData.length,\n          this.controllerId,\n        );\n\n        return transaction.add({\n          keys: [{pubkey: program, isSigner: false, isDebitable: true}],\n          controllerId: this.controllerId,\n          data: trimmedData,\n        });\n      }\n\n      default:\n        throw new Error(\n          `A maximum of two conditions are support: ${\n            conditions.length\n          } provided`,\n        );\n    }\n  }\n\n  /**\n   * Generates a transaction that transfers difs once both conditions are met\n   */\n  static payOnAll(\n    from: PubKey,\n    program: PubKey,\n    to: PubKey,\n    amount: number,\n    condition1: BudgetCond,\n    condition2: BudgetCond,\n  ): Transaction {\n    const data = Buffer.alloc(1024);\n    let pos = 0;\n    data.writeUInt32LE(0, pos); // NewBudget instruction\n    pos += 4;\n\n    data.writeUInt32LE(3, pos); // BudgetExpr enum = And\n    pos += 4;\n\n    for (let condition of [condition1, condition2]) {\n      const conditionData = serializeCond(condition);\n      conditionData.copy(data, pos);\n      pos += conditionData.length;\n    }\n\n    data.writeUInt32LE(0, pos); // BudgetExpr enum = Pay\n    pos += 4;\n\n    const paymentData = serializePayment({amount, to});\n    paymentData.copy(data, pos);\n    pos += paymentData.length;\n\n    const trimmedData = data.slice(0, pos);\n\n    const transaction = SystemController.createNewAccount(\n      from,\n      program,\n      amount,\n      trimmedData.length,\n      this.controllerId,\n    );\n\n    return transaction.add({\n      keys: [{pubkey: program, isSigner: false, isDebitable: true}],\n      controllerId: this.controllerId,\n      data: trimmedData,\n    });\n  }\n\n  /**\n   * Generates a transaction that applies a timestamp, which could enable a\n   * pending payment to proceed.\n   */\n  static sealWithDatetime(\n    from: PubKey,\n    program: PubKey,\n    to: PubKey,\n    when: Date,\n  ): Transaction {\n    const whenData = serializeTime(when);\n    const data = Buffer.alloc(4 + whenData.length);\n\n    data.writeUInt32LE(1, 0); // ApplyTimestamp instruction\n    whenData.copy(data, 4);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: from, isSigner: true, isDebitable: true},\n        {pubkey: program, isSigner: false, isDebitable: true},\n        {pubkey: to, isSigner: false, isDebitable: false},\n      ],\n      controllerId: this.controllerId,\n      data,\n    });\n  }\n\n  /**\n   * Generates a transaction that applies a signature, which could enable a\n   * pending payment to proceed.\n   */\n  static sealWithSignature(\n    from: PubKey,\n    program: PubKey,\n    to: PubKey,\n  ): Transaction {\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 2, // ApplySignature instruction\n      },\n      data,\n    );\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: from, isSigner: true, isDebitable: true},\n        {pubkey: program, isSigner: false, isDebitable: true},\n        {pubkey: to, isSigner: false, isDebitable: false},\n      ],\n      controllerId: this.controllerId,\n      data,\n    });\n  }\n}\n"]}