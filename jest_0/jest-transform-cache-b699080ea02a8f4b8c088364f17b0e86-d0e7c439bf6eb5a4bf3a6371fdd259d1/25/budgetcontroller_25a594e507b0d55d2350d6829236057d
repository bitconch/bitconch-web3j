f3df44d82ff17cc63acc072837078726
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BudgetController = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var BufferLayout = _interopRequireWildcard(require("buffer-layout"));

var _transactionController = require("./transaction-controller");

var _pubkey = require("./pubkey");

var _systemController = require("./system-controller");

/**
 * @private
 */
function serializePayment(payment) {
  var toData = payment.to.toBuffer();
  var data = Buffer.alloc(8 + toData.length);
  data.writeUInt32LE(payment.amount, 0);
  toData.copy(data, 8);
  return data;
}
/**
 * @private
 */


function serializeTime(when) {
  var data = Buffer.alloc(8 + 20);
  data.writeUInt32LE(20, 0); // size of timestamp as u64

  function iso(date) {
    function pad(number) {
      if (number < 10) {
        return '0' + number;
      }

      return number;
    }

    return date.getUTCFullYear() + '-' + pad(date.getUTCMonth() + 1) + '-' + pad(date.getUTCDate()) + 'T' + pad(date.getUTCHours()) + ':' + pad(date.getUTCMinutes()) + ':' + pad(date.getUTCSeconds()) + 'Z';
  }

  data.write(iso(when), 8);
  return data;
}
/**
 * @private
 */


function serializeCond(condition) {
  switch (condition.type) {
    case 'timestamp':
      {
        var date = serializeTime(condition.when);
        var from = condition.from.toBuffer();
        var data = Buffer.alloc(4 + date.length + from.length);
        data.writeUInt32LE(0, 0); // Condition enum = Timestamp

        date.copy(data, 4);
        from.copy(data, 4 + date.length);
        return data;
      }

    case 'signature':
      {
        var _from = condition.from.toBuffer();

        var _data = Buffer.alloc(4 + _from.length);

        _data.writeUInt32LE(1, 0); // Condition enum = Signature


        _from.copy(_data, 4);

        return _data;
      }

    default:
      throw new Error("Unknown condition type: ".concat(condition.type));
  }
}
/**
 * Factory class for transactions to interact with the Budget program
 */


var BudgetController =
/*#__PURE__*/
function () {
  function BudgetController() {
    (0, _classCallCheck2["default"])(this, BudgetController);
  }

  (0, _createClass2["default"])(BudgetController, null, [{
    key: "datetimeCond",

    /**
     * Creates a timestamp condition
     */
    value: function datetimeCond(from, when) {
      return {
        type: 'timestamp',
        from: from,
        when: when
      };
    }
    /**
     * Creates a signature condition
     */

  }, {
    key: "signatureCond",
    value: function signatureCond(from) {
      return {
        type: 'signature',
        from: from
      };
    }
    /**
     * Generates a transaction that transfers difs once any of the conditions are met
     */

  }, {
    key: "pay",
    value: function pay(from, program, to, amount) {
      var data = Buffer.alloc(1024);
      var pos = 0;
      data.writeUInt32LE(0, pos); // NewBudget instruction

      pos += 4;

      for (var _len = arguments.length, conditions = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
        conditions[_key - 4] = arguments[_key];
      }

      switch (conditions.length) {
        case 0:
          {
            data.writeUInt32LE(0, pos); // BudgetExpr enum = Pay

            pos += 4;
            {
              var payment = serializePayment({
                amount: amount,
                to: to
              });
              payment.copy(data, pos);
              pos += payment.length;
            }
            var trimmedData = data.slice(0, pos);

            var transaction = _systemController.SystemController.createNewAccount(from, program, amount, trimmedData.length, this.controllerId);

            return transaction.add({
              keys: [{
                pubkey: to,
                isSigner: false,
                isDebitable: false
              }, {
                pubkey: program,
                isSigner: false,
                isDebitable: true
              }],
              controllerId: this.controllerId,
              data: trimmedData
            });
          }

        case 1:
          {
            data.writeUInt32LE(1, pos); // BudgetExpr enum = After

            pos += 4;
            {
              var condition = conditions[0];
              var conditionData = serializeCond(condition);
              conditionData.copy(data, pos);
              pos += conditionData.length;
              data.writeUInt32LE(0, pos); // BudgetExpr enum = Pay

              pos += 4;
              var paymentData = serializePayment({
                amount: amount,
                to: to
              });
              paymentData.copy(data, pos);
              pos += paymentData.length;
            }

            var _trimmedData = data.slice(0, pos);

            var _transaction = _systemController.SystemController.createNewAccount(from, program, amount, _trimmedData.length, this.controllerId);

            return _transaction.add({
              keys: [{
                pubkey: program,
                isSigner: false,
                isDebitable: true
              }],
              controllerId: this.controllerId,
              data: _trimmedData
            });
          }

        case 2:
          {
            data.writeUInt32LE(2, pos); // BudgetExpr enum = Or

            pos += 4;

            for (var _i = 0, _conditions = conditions; _i < _conditions.length; _i++) {
              var _condition = _conditions[_i];

              var _conditionData = serializeCond(_condition);

              _conditionData.copy(data, pos);

              pos += _conditionData.length;
              data.writeUInt32LE(0, pos); // BudgetExpr enum = Pay

              pos += 4;

              var _paymentData = serializePayment({
                amount: amount,
                to: to
              });

              _paymentData.copy(data, pos);

              pos += _paymentData.length;
            }

            var _trimmedData2 = data.slice(0, pos);

            var _transaction2 = _systemController.SystemController.createNewAccount(from, program, amount, _trimmedData2.length, this.controllerId);

            return _transaction2.add({
              keys: [{
                pubkey: program,
                isSigner: false,
                isDebitable: true
              }],
              controllerId: this.controllerId,
              data: _trimmedData2
            });
          }

        default:
          throw new Error("A maximum of two conditions are support: ".concat(conditions.length, " provided"));
      }
    }
    /**
     * Generates a transaction that transfers difs once both conditions are met
     */

  }, {
    key: "payOnAll",
    value: function payOnAll(from, program, to, amount, condition1, condition2) {
      var data = Buffer.alloc(1024);
      var pos = 0;
      data.writeUInt32LE(0, pos); // NewBudget instruction

      pos += 4;
      data.writeUInt32LE(3, pos); // BudgetExpr enum = And

      pos += 4;

      for (var _i2 = 0, _arr = [condition1, condition2]; _i2 < _arr.length; _i2++) {
        var condition = _arr[_i2];
        var conditionData = serializeCond(condition);
        conditionData.copy(data, pos);
        pos += conditionData.length;
      }

      data.writeUInt32LE(0, pos); // BudgetExpr enum = Pay

      pos += 4;
      var paymentData = serializePayment({
        amount: amount,
        to: to
      });
      paymentData.copy(data, pos);
      pos += paymentData.length;
      var trimmedData = data.slice(0, pos);

      var transaction = _systemController.SystemController.createNewAccount(from, program, amount, trimmedData.length, this.controllerId);

      return transaction.add({
        keys: [{
          pubkey: program,
          isSigner: false,
          isDebitable: true
        }],
        controllerId: this.controllerId,
        data: trimmedData
      });
    }
    /**
     * Generates a transaction that applies a timestamp, which could enable a
     * pending payment to proceed.
     */

  }, {
    key: "sealWithDatetime",
    value: function sealWithDatetime(from, program, to, when) {
      var whenData = serializeTime(when);
      var data = Buffer.alloc(4 + whenData.length);
      data.writeUInt32LE(1, 0); // ApplyTimestamp instruction

      whenData.copy(data, 4);
      return new _transactionController.Transaction().add({
        keys: [{
          pubkey: from,
          isSigner: true,
          isDebitable: true
        }, {
          pubkey: program,
          isSigner: false,
          isDebitable: true
        }, {
          pubkey: to,
          isSigner: false,
          isDebitable: false
        }],
        controllerId: this.controllerId,
        data: data
      });
    }
    /**
     * Generates a transaction that applies a signature, which could enable a
     * pending payment to proceed.
     */

  }, {
    key: "sealWithSignature",
    value: function sealWithSignature(from, program, to) {
      var dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);
      var data = Buffer.alloc(dataLayout.span);
      dataLayout.encode({
        instruction: 2 // ApplySignature instruction

      }, data);
      return new _transactionController.Transaction().add({
        keys: [{
          pubkey: from,
          isSigner: true,
          isDebitable: true
        }, {
          pubkey: program,
          isSigner: false,
          isDebitable: true
        }, {
          pubkey: to,
          isSigner: false,
          isDebitable: false
        }],
        controllerId: this.controllerId,
        data: data
      });
    }
  }, {
    key: "controllerId",

    /**
     * Public key that identifies the Budget program
     */
    get: function get() {
      return new _pubkey.PubKey('Budget1111111111111111111111111111111111111');
    }
    /**
     * The amount of space this program requires
     */

  }, {
    key: "size",
    get: function get() {
      return 128;
    }
  }]);
  return BudgetController;
}();

exports.BudgetController = BudgetController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,