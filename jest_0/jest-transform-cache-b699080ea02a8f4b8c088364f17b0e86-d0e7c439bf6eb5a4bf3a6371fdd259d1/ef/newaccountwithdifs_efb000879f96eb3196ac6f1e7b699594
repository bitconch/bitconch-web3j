bc74294c21af890fa33f78259fb4f900
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.newAccountWithDifs = newAccountWithDifs;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _src = require("../src");

var _nodeFetch = require("./__mocks__/node-fetch");

var _url = require("./url");

function newAccountWithDifs(_x) {
  return _newAccountWithDifs.apply(this, arguments);
}

function _newAccountWithDifs() {
  _newAccountWithDifs = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(connection) {
    var difs,
        account,
        _args = arguments;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            difs = _args.length > 1 && _args[1] !== undefined ? _args[1] : 1000000;
            account = new _src.BusAccount();

            _nodeFetch.mockRpc.push([_url.url, {
              method: 'requestDif',
              params: [account.pubKey.toBase58(), difs]
            }, {
              error: null,
              // Signature doesn't matter
              result: '3WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk'
            }]);

            _context.next = 5;
            return connection.reqDrone(account.pubKey, difs);

          case 5:
            return _context.abrupt("return", account);

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _newAccountWithDifs.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5ldy1hY2NvdW50LXdpdGgtZGlmcy5qcyJdLCJuYW1lcyI6WyJuZXdBY2NvdW50V2l0aERpZnMiLCJjb25uZWN0aW9uIiwiZGlmcyIsImFjY291bnQiLCJCdXNBY2NvdW50IiwibW9ja1JwYyIsInB1c2giLCJ1cmwiLCJtZXRob2QiLCJwYXJhbXMiLCJwdWJLZXkiLCJ0b0Jhc2U1OCIsImVycm9yIiwicmVzdWx0IiwicmVxRHJvbmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7U0FFc0JBLGtCOzs7Ozs7OytCQUFmLGlCQUNMQyxVQURLO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFTEMsWUFBQUEsSUFGSywyREFFVSxPQUZWO0FBSUNDLFlBQUFBLE9BSkQsR0FJVyxJQUFJQyxlQUFKLEVBSlg7O0FBT0hDLCtCQUFRQyxJQUFSLENBQWEsQ0FDWEMsUUFEVyxFQUVYO0FBQ0VDLGNBQUFBLE1BQU0sRUFBRSxZQURWO0FBRUVDLGNBQUFBLE1BQU0sRUFBRSxDQUFDTixPQUFPLENBQUNPLE1BQVIsQ0FBZUMsUUFBZixFQUFELEVBQTRCVCxJQUE1QjtBQUZWLGFBRlcsRUFNWDtBQUNFVSxjQUFBQSxLQUFLLEVBQUUsSUFEVDtBQUVFO0FBQ0FDLGNBQUFBLE1BQU0sRUFDSjtBQUpKLGFBTlcsQ0FBYjs7QUFQRztBQUFBLG1CQXNCQ1osVUFBVSxDQUFDYSxRQUFYLENBQW9CWCxPQUFPLENBQUNPLE1BQTVCLEVBQW9DUixJQUFwQyxDQXRCRDs7QUFBQTtBQUFBLDZDQXVCRUMsT0F2QkY7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCB7QnVzQWNjb3VudCwgQ29ubmVjdGlvbn0gZnJvbSAnLi4vc3JjJztcbmltcG9ydCB7bW9ja1JwY30gZnJvbSAnLi9fX21vY2tzX18vbm9kZS1mZXRjaCc7XG5pbXBvcnQge3VybH0gZnJvbSAnLi91cmwnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbmV3QWNjb3VudFdpdGhEaWZzKFxuICBjb25uZWN0aW9uOiBDb25uZWN0aW9uLFxuICBkaWZzOiBudW1iZXIgPSAxMDAwMDAwLFxuKTogUHJvbWlzZTxCdXNBY2NvdW50PiB7XG4gIGNvbnN0IGFjY291bnQgPSBuZXcgQnVzQWNjb3VudCgpO1xuXG4gIHtcbiAgICBtb2NrUnBjLnB1c2goW1xuICAgICAgdXJsLFxuICAgICAge1xuICAgICAgICBtZXRob2Q6ICdyZXF1ZXN0RGlmJyxcbiAgICAgICAgcGFyYW1zOiBbYWNjb3VudC5wdWJLZXkudG9CYXNlNTgoKSwgZGlmc10sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgLy8gU2lnbmF0dXJlIGRvZXNuJ3QgbWF0dGVyXG4gICAgICAgIHJlc3VsdDpcbiAgICAgICAgICAnM1dFNXc0Qjd2NTl4NnFqeUM0RmJHMkZFS1lLUWZ2c0p3cVN4TlZtdE1qVDhUUTMxaHNaaWVESGNTZ3F6eGlBb1RMNTZuMnc1VG5janFFS2pMaHRGNFZrJyxcbiAgICAgIH0sXG4gICAgXSk7XG4gIH1cblxuICBhd2FpdCBjb25uZWN0aW9uLnJlcURyb25lKGFjY291bnQucHViS2V5LCBkaWZzKTtcbiAgcmV0dXJuIGFjY291bnQ7XG59XG4iXX0=