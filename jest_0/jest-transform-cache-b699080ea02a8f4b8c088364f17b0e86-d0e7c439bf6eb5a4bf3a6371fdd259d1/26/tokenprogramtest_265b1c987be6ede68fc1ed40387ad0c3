e37f0223d86d99dcc163f794b82f76eb
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _src = require("../src");

var _tokenController = require("../src/token-controller");

var _nodeFetch = require("./__mocks__/node-fetch");

var _url = require("./url");

var _newAccountWithDifs = require("./new-account-with-difs");

var _getRecentBlockhash = require("./mockrpc/get-recent-blockhash");

var _sleep = require("../src/util/sleep");

// The default of 5 seconds is too slow for live testing sometimes
jest.setTimeout(60000);

function mockGetSignatureStatus() {
  var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
    Ok: null
  };

  _nodeFetch.mockRpc.push([_url.url, {
    method: 'getSignatureState'
  }, {
    error: null,
    result: result
  }]);
}

function mockSendTransaction() {
  _nodeFetch.mockRpc.push([_url.url, {
    method: 'sendTxn'
  }, {
    error: null,
    result: '3WE5w4B7v59x6qjyC4FbG2FEKYKQfvsJwqSxNVmtMjT8TQ31hsZieDHcSgqzxiAoTL56n2w5TncjqEKjLhtF4Vk'
  }]);
} // A token created by the first test and used by all subsequent tests


var testToken; // Initial owner of the token supply

var initialOwner;
var initialOwnerTokenAccount;
test('create new token',
/*#__PURE__*/
(0, _asyncToGenerator2["default"])(
/*#__PURE__*/
_regenerator["default"].mark(function _callee() {
  var connection, _ref2, _ref3, fetchTokenDetail, fetchAccountDetail;

  return _regenerator["default"].wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          connection = new _src.Connection(_url.url);
          connection._disableBlockhashCaching = _nodeFetch.mockRpcEnabled;
          _context.next = 4;
          return (0, _newAccountWithDifs.newAccountWithDifs)(connection, 1024);

        case 4:
          initialOwner = _context.sent;
          // mock SystemController.createNewAccount transaction for Token.createNewToken()
          (0, _getRecentBlockhash.mockGetRecentBlockhash)();
          mockSendTransaction();
          mockGetSignatureStatus(); // mock Token.createNewAccount() transaction

          mockSendTransaction();
          mockGetSignatureStatus(null);
          mockGetSignatureStatus(); // mock SystemController.createNewAccount transaction for Token.createNewToken()

          mockSendTransaction();
          mockGetSignatureStatus(); // mock Token.createNewToken() transaction

          mockSendTransaction();
          mockGetSignatureStatus(null);
          mockGetSignatureStatus();
          _context.next = 18;
          return _src.Token.createNewToken(connection, initialOwner, new _src.TokenCount(10000), 'Test token', 'TEST', 2);

        case 18:
          _ref2 = _context.sent;
          _ref3 = (0, _slicedToArray2["default"])(_ref2, 2);
          testToken = _ref3[0];
          initialOwnerTokenAccount = _ref3[1];

          // mock Token.fetchTokenDetail()'s fetchAccountDetail
          _nodeFetch.mockRpc.push([_url.url, {
            method: 'getAccountInfo',
            params: [testToken.token.toBase58()]
          }, {
            error: null,
            result: {
              owner: (0, _toConsumableArray2["default"])(_tokenController.SYSTEM_TOKEN_CONTROLLER_ID.toBuffer()),
              difs: 1,
              data: [1, 16, 39, 0, 0, 0, 0, 0, 0, 2, 10, 0, 0, 0, 0, 0, 0, 0, 84, 101, 115, 116, 32, 116, 111, 107, 101, 110, 4, 0, 0, 0, 0, 0, 0, 0, 84, 69, 83, 84],
              executable: false
            }
          }]);

          _context.next = 25;
          return testToken.fetchTokenDetail();

        case 25:
          fetchTokenDetail = _context.sent;
          expect(fetchTokenDetail.supply.toNumber()).toBe(10000);
          expect(fetchTokenDetail.decimals).toBe(2);
          expect(fetchTokenDetail.name).toBe('Test token');
          expect(fetchTokenDetail.symbol).toBe('TEST');

          // mock Token.fetchAccountDetail()'s fetchAccountDetail
          _nodeFetch.mockRpc.push([_url.url, {
            method: 'getAccountInfo',
            params: [initialOwnerTokenAccount.toBase58()]
          }, {
            error: null,
            result: {
              owner: (0, _toConsumableArray2["default"])(_tokenController.SYSTEM_TOKEN_CONTROLLER_ID.toBuffer()),
              difs: 1,
              data: [2].concat((0, _toConsumableArray2["default"])(testToken.token.toBuffer()), (0, _toConsumableArray2["default"])(initialOwner.pubKey.toBuffer()), [16, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
              executable: false
            }
          }]);

          _context.next = 33;
          return testToken.fetchAccountDetail(initialOwnerTokenAccount);

        case 33:
          fetchAccountDetail = _context.sent;
          expect(fetchAccountDetail.token.equals(testToken.token)).toBe(true);
          expect(fetchAccountDetail.owner.equals(initialOwner.pubKey)).toBe(true);
          expect(fetchAccountDetail.amount.toNumber()).toBe(10000);
          expect(fetchAccountDetail.source).toBe(null);
          expect(fetchAccountDetail.originalAmount.toNumber()).toBe(0);

        case 39:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
})));
test('create new token account',
/*#__PURE__*/
(0, _asyncToGenerator2["default"])(
/*#__PURE__*/
_regenerator["default"].mark(function _callee2() {
  var connection, destOwner, dest, fetchAccountDetail;
  return _regenerator["default"].wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          connection = new _src.Connection(_url.url);
          connection._disableBlockhashCaching = _nodeFetch.mockRpcEnabled;
          _context2.next = 4;
          return (0, _newAccountWithDifs.newAccountWithDifs)(connection);

        case 4:
          destOwner = _context2.sent;
          // mock SystemController.createNewAccount transaction for Token.createNewAccount()
          mockSendTransaction();
          mockGetSignatureStatus(); // mock Token.createNewAccount() transaction

          mockSendTransaction();
          mockGetSignatureStatus();
          _context2.next = 11;
          return testToken.createNewAccount(destOwner);

        case 11:
          dest = _context2.sent;

          // mock Token.fetchAccountDetail()'s fetchAccountDetail
          _nodeFetch.mockRpc.push([_url.url, {
            method: 'getAccountInfo',
            params: [dest.toBase58()]
          }, {
            error: null,
            result: {
              owner: (0, _toConsumableArray2["default"])(_tokenController.SYSTEM_TOKEN_CONTROLLER_ID.toBuffer()),
              difs: 1,
              data: [2].concat((0, _toConsumableArray2["default"])(testToken.token.toBuffer()), (0, _toConsumableArray2["default"])(destOwner.pubKey.toBuffer()), [0, 0, 0, 0, 0, 0, 0, 0, 0]),
              executable: false
            }
          }]);

          _context2.next = 15;
          return testToken.fetchAccountDetail(dest);

        case 15:
          fetchAccountDetail = _context2.sent;
          expect(fetchAccountDetail.token.equals(testToken.token)).toBe(true);
          expect(fetchAccountDetail.owner.equals(destOwner.pubKey)).toBe(true);
          expect(fetchAccountDetail.amount.toNumber()).toBe(0);
          expect(fetchAccountDetail.source).toBe(null);

        case 20:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2);
})));
test('transfer',
/*#__PURE__*/
(0, _asyncToGenerator2["default"])(
/*#__PURE__*/
_regenerator["default"].mark(function _callee3() {
  var connection, destOwner, dest, destAccountInfo;
  return _regenerator["default"].wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          connection = new _src.Connection(_url.url);
          connection._disableBlockhashCaching = _nodeFetch.mockRpcEnabled;
          _context3.next = 4;
          return (0, _newAccountWithDifs.newAccountWithDifs)(connection);

        case 4:
          destOwner = _context3.sent;
          // mock SystemController.createNewAccount transaction for Token.createNewAccount()
          mockSendTransaction();
          mockGetSignatureStatus(); // mock Token.createNewAccount() transaction

          mockSendTransaction();
          mockGetSignatureStatus();
          _context3.next = 11;
          return testToken.createNewAccount(destOwner);

        case 11:
          dest = _context3.sent;

          // mock Token.transfer()'s fetchAccountDetail
          _nodeFetch.mockRpc.push([_url.url, {
            method: 'getAccountInfo',
            params: [initialOwnerTokenAccount.toBase58()]
          }, {
            error: null,
            result: {
              owner: (0, _toConsumableArray2["default"])(_tokenController.SYSTEM_TOKEN_CONTROLLER_ID.toBuffer()),
              difs: 1,
              data: [2].concat((0, _toConsumableArray2["default"])(testToken.token.toBuffer()), (0, _toConsumableArray2["default"])(initialOwner.pubKey.toBuffer()), [123, 0, 0, 0, 0, 0, 0, 0, 0]),
              executable: false
            }
          }]); // mock Token.transfer() transaction


          mockSendTransaction();
          mockGetSignatureStatus();
          _context3.next = 17;
          return testToken.transfer(initialOwner, initialOwnerTokenAccount, dest, 123);

        case 17:
          // mock Token.fetchAccountDetail()'s fetchAccountDetail
          _nodeFetch.mockRpc.push([_url.url, {
            method: 'getAccountInfo',
            params: [dest.toBase58()]
          }, {
            error: null,
            result: {
              owner: (0, _toConsumableArray2["default"])(_tokenController.SYSTEM_TOKEN_CONTROLLER_ID.toBuffer()),
              difs: 1,
              data: [2].concat((0, _toConsumableArray2["default"])(testToken.token.toBuffer()), (0, _toConsumableArray2["default"])(dest.toBuffer()), [123, 0, 0, 0, 0, 0, 0, 0, 0]),
              executable: false
            }
          }]);

          _context3.next = 20;
          return (0, _sleep.sleep)(500);

        case 20:
          _context3.next = 22;
          return testToken.fetchAccountDetail(dest);

        case 22:
          destAccountInfo = _context3.sent;
          expect(destAccountInfo.amount.toNumber()).toBe(123);

        case 24:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3);
})));
test('approve/revoke',
/*#__PURE__*/
(0, _asyncToGenerator2["default"])(
/*#__PURE__*/
_regenerator["default"].mark(function _callee4() {
  var connection, delegateOwner, delegate, delegateAccountInfo;
  return _regenerator["default"].wrap(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          connection = new _src.Connection(_url.url);
          connection._disableBlockhashCaching = _nodeFetch.mockRpcEnabled;
          _context4.next = 4;
          return (0, _newAccountWithDifs.newAccountWithDifs)(connection);

        case 4:
          delegateOwner = _context4.sent;
          // mock SystemController.createNewAccount transaction for Token.createNewAccount()
          mockSendTransaction();
          mockGetSignatureStatus(); // mock Token.createNewAccount() transaction

          mockSendTransaction();
          mockGetSignatureStatus();
          _context4.next = 11;
          return testToken.createNewAccount(delegateOwner, initialOwnerTokenAccount);

        case 11:
          delegate = _context4.sent;
          // mock Token.approve() transaction
          mockSendTransaction();
          mockGetSignatureStatus();
          _context4.next = 16;
          return testToken.approve(initialOwner, initialOwnerTokenAccount, delegate, 456);

        case 16:
          // mock Token.fetchAccountDetail()'s fetchAccountDetail
          _nodeFetch.mockRpc.push([_url.url, {
            method: 'getAccountInfo',
            params: [delegate.toBase58()]
          }, {
            error: null,
            result: {
              owner: (0, _toConsumableArray2["default"])(_tokenController.SYSTEM_TOKEN_CONTROLLER_ID.toBuffer()),
              difs: 1,
              data: [2].concat((0, _toConsumableArray2["default"])(testToken.token.toBuffer()), (0, _toConsumableArray2["default"])(delegate.toBuffer()), [200, 1, 0, 0, 0, 0, 0, 0, 1], (0, _toConsumableArray2["default"])(initialOwnerTokenAccount.toBuffer()), [200, 1, 0, 0, 0, 0, 0, 0]),
              executable: false
            }
          }]);

          _context4.next = 19;
          return testToken.fetchAccountDetail(delegate);

        case 19:
          delegateAccountInfo = _context4.sent;
          expect(delegateAccountInfo.amount.toNumber()).toBe(456);
          expect(delegateAccountInfo.originalAmount.toNumber()).toBe(456);

          if (!(delegateAccountInfo.source === null)) {
            _context4.next = 26;
            break;
          }

          throw new Error('source should not be null');

        case 26:
          expect(delegateAccountInfo.source.equals(initialOwnerTokenAccount)).toBe(true);

        case 27:
          // mock Token.revoke() transaction
          mockSendTransaction();
          mockGetSignatureStatus();
          _context4.next = 31;
          return testToken.revoke(initialOwner, initialOwnerTokenAccount, delegate);

        case 31:
          // mock Token.fetchAccountDetail()'s fetchAccountDetail
          _nodeFetch.mockRpc.push([_url.url, {
            method: 'getAccountInfo',
            params: [delegate.toBase58()]
          }, {
            error: null,
            result: {
              owner: (0, _toConsumableArray2["default"])(_tokenController.SYSTEM_TOKEN_CONTROLLER_ID.toBuffer()),
              difs: 1,
              data: [2].concat((0, _toConsumableArray2["default"])(testToken.token.toBuffer()), (0, _toConsumableArray2["default"])(delegate.toBuffer()), [0, 0, 0, 0, 0, 0, 0, 0, 1], (0, _toConsumableArray2["default"])(initialOwnerTokenAccount.toBuffer()), [0, 0, 0, 0, 0, 0, 0, 0]),
              executable: false
            }
          }]);

          _context4.next = 34;
          return testToken.fetchAccountDetail(delegate);

        case 34:
          delegateAccountInfo = _context4.sent;
          expect(delegateAccountInfo.amount.toNumber()).toBe(0);
          expect(delegateAccountInfo.originalAmount.toNumber()).toBe(0);

          if (!(delegateAccountInfo.source === null)) {
            _context4.next = 41;
            break;
          }

          throw new Error('source should not be null');

        case 41:
          expect(delegateAccountInfo.source.equals(initialOwnerTokenAccount)).toBe(true);

        case 42:
        case "end":
          return _context4.stop();
      }
    }
  }, _callee4);
})));
test('invalid approve',
/*#__PURE__*/
(0, _asyncToGenerator2["default"])(
/*#__PURE__*/
_regenerator["default"].mark(function _callee5() {
  var connection, owner, account1, account1Delegate, account2;
  return _regenerator["default"].wrap(function _callee5$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          if (!_nodeFetch.mockRpcEnabled) {
            _context5.next = 3;
            break;
          }

          console.log('non-live test skipped');
          return _context5.abrupt("return");

        case 3:
          connection = new _src.Connection(_url.url);
          _context5.next = 6;
          return (0, _newAccountWithDifs.newAccountWithDifs)(connection);

        case 6:
          owner = _context5.sent;
          _context5.next = 9;
          return testToken.createNewAccount(owner);

        case 9:
          account1 = _context5.sent;
          _context5.next = 12;
          return testToken.createNewAccount(owner, account1);

        case 12:
          account1Delegate = _context5.sent;
          _context5.next = 15;
          return testToken.createNewAccount(owner);

        case 15:
          account2 = _context5.sent;
          _context5.next = 18;
          return expect(testToken.approve(owner, account1, account2, 123)).rejects.toThrow();

        case 18:
          _context5.next = 20;
          return expect(testToken.approve(owner, account2, account1Delegate, 123)).rejects.toThrow();

        case 20:
        case "end":
          return _context5.stop();
      }
    }
  }, _callee5);
})));
test('fail on approve overspend',
/*#__PURE__*/
(0, _asyncToGenerator2["default"])(
/*#__PURE__*/
_regenerator["default"].mark(function _callee6() {
  var connection, owner, account1, account1Delegate, account2, delegateAccountInfo;
  return _regenerator["default"].wrap(function _callee6$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          if (!_nodeFetch.mockRpcEnabled) {
            _context6.next = 3;
            break;
          }

          console.log('non-live test skipped');
          return _context6.abrupt("return");

        case 3:
          connection = new _src.Connection(_url.url);
          _context6.next = 6;
          return (0, _newAccountWithDifs.newAccountWithDifs)(connection);

        case 6:
          owner = _context6.sent;
          _context6.next = 9;
          return testToken.createNewAccount(owner);

        case 9:
          account1 = _context6.sent;
          _context6.next = 12;
          return testToken.createNewAccount(owner, account1);

        case 12:
          account1Delegate = _context6.sent;
          _context6.next = 15;
          return testToken.createNewAccount(owner);

        case 15:
          account2 = _context6.sent;
          _context6.next = 18;
          return testToken.transfer(initialOwner, initialOwnerTokenAccount, account1, 10);

        case 18:
          _context6.next = 20;
          return testToken.approve(owner, account1, account1Delegate, 2);

        case 20:
          _context6.next = 22;
          return testToken.fetchAccountDetail(account1Delegate);

        case 22:
          delegateAccountInfo = _context6.sent;
          expect(delegateAccountInfo.amount.toNumber()).toBe(2);
          expect(delegateAccountInfo.originalAmount.toNumber()).toBe(2);
          _context6.next = 27;
          return testToken.transfer(owner, account1Delegate, account2, 1);

        case 27:
          _context6.next = 29;
          return testToken.fetchAccountDetail(account1Delegate);

        case 29:
          delegateAccountInfo = _context6.sent;
          expect(delegateAccountInfo.amount.toNumber()).toBe(1);
          expect(delegateAccountInfo.originalAmount.toNumber()).toBe(2);
          _context6.next = 34;
          return testToken.transfer(owner, account1Delegate, account2, 1);

        case 34:
          _context6.next = 36;
          return testToken.fetchAccountDetail(account1Delegate);

        case 36:
          delegateAccountInfo = _context6.sent;
          expect(delegateAccountInfo.amount.toNumber()).toBe(0);
          expect(delegateAccountInfo.originalAmount.toNumber()).toBe(2);
          _context6.next = 41;
          return expect(testToken.transfer(owner, account1Delegate, account2, 1)).rejects.toThrow();

        case 41:
        case "end":
          return _context6.stop();
      }
    }
  }, _callee6);
})));
test('set owner',
/*#__PURE__*/
(0, _asyncToGenerator2["default"])(
/*#__PURE__*/
_regenerator["default"].mark(function _callee7() {
  var connection, owner, newOwner, account;
  return _regenerator["default"].wrap(function _callee7$(_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          if (!_nodeFetch.mockRpcEnabled) {
            _context7.next = 3;
            break;
          }

          console.log('non-live test skipped');
          return _context7.abrupt("return");

        case 3:
          connection = new _src.Connection(_url.url);
          _context7.next = 6;
          return (0, _newAccountWithDifs.newAccountWithDifs)(connection);

        case 6:
          owner = _context7.sent;
          _context7.next = 9;
          return (0, _newAccountWithDifs.newAccountWithDifs)(connection);

        case 9:
          newOwner = _context7.sent;
          _context7.next = 12;
          return testToken.createNewAccount(owner);

        case 12:
          account = _context7.sent;
          _context7.next = 15;
          return testToken.setOwner(owner, account, newOwner.pubKey);

        case 15:
          _context7.next = 17;
          return expect(testToken.setOwner(owner, account, newOwner.pubKey)).rejects.toThrow();

        case 17:
          _context7.next = 19;
          return testToken.setOwner(newOwner, account, owner.pubKey);

        case 19:
        case "end":
          return _context7.stop();
      }
    }
  }, _callee7);
})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,